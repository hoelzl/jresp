/*
 * generated by Xtext
 */
package org.cmg.resp.xtext.scellight.scoping

import org.cmg.resp.xtext.scellight.scelLight.Command
import org.cmg.resp.xtext.scellight.scelLight.ComponentDeclaration
import org.cmg.resp.xtext.scellight.scelLight.Model
import org.cmg.resp.xtext.scellight.scelLight.ProcessDeclaration
import org.cmg.resp.xtext.scellight.scelLight.ProcessExpression
import org.cmg.resp.xtext.scellight.scelLight.ProjectionExpression
import org.cmg.resp.xtext.scellight.scelLight.ReplaceAction
import org.cmg.resp.xtext.scellight.utils.Utils
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider

import static extension org.eclipse.xtext.EcoreUtil2.*
import org.cmg.resp.xtext.scellight.scelLight.ComponentExpression

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it 
 *
 */
class ScelLightScopeProvider extends AbstractDeclarativeScopeProvider {
	
	def IScope scope_Reference_ref( ProjectionExpression pe , EReference eReference ) {
		Scopes::scopeFor(Utils::getDeclaredVariablesInTemplate(pe.template))
	}

	def IScope scope_Reference_ref(ProcessExpression pe, EReference eReference) {
		var ctnr = pe.getContainerOfType(ProcessDeclaration)
		if(ctnr != null){
			Scopes::scopeFor(Utils::getPreviuslyDeclaredVariablesInABlock(pe) , Scopes::scopeFor(pe.getContainerOfType(Model).attributes ));
		}else{
//			var ctnr = pe.getContainerOfType(ComponentExpression)
			Scopes::scopeFor(pe.getContainerOfType(ComponentDeclaration).parameters)		
		}
	}

	def IScope scope_Reference_ref(Command c, EReference eReference) {
		Scopes::scopeFor(c.getContainerOfType(Model).attributes, Scopes::scopeFor(Utils::getPreviuslyDeclaredVariablesInABlock(c)))
	}
	
	def IScope scope_Reference_ref(ReplaceAction ra, EReference eReference){
		Scopes::scopeFor(Utils::getDeclaredVariablesInTemplate(ra.template), Scopes::scopeFor(Utils::getPreviuslyDeclaredVariablesInABlock(ra.getContainerOfType(Command))))
	}
	
}
