/*
* generated by Xtext
*/
package org.cmg.resp.xtext.scellight.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ScelLightGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cConstantsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cConstantsConstantDeclarationParserRuleCall_0_0 = (RuleCall)cConstantsAssignment_0.eContents().get(0);
		private final Assignment cProjectionsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cProjectionsProjectionDeclarationParserRuleCall_1_0 = (RuleCall)cProjectionsAssignment_1.eContents().get(0);
		private final Assignment cFunctionsAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cFunctionsFunctionDeclarationParserRuleCall_2_0 = (RuleCall)cFunctionsAssignment_2.eContents().get(0);
		private final Assignment cAttributesAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cAttributesAttributeDeclarationParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Assignment cProcessesAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cProcessesProcessDeclarationParserRuleCall_4_0 = (RuleCall)cProcessesAssignment_4.eContents().get(0);
		private final Assignment cComponentsAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cComponentsComponentDeclarationParserRuleCall_5_0 = (RuleCall)cComponentsAssignment_5.eContents().get(0);
		private final Assignment cSystemsAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cSystemsSystemDeclarationParserRuleCall_6_0 = (RuleCall)cSystemsAssignment_6.eContents().get(0);
		
		//Model:
		//	(constants+=ConstantDeclaration | projections+=ProjectionDeclaration | functions+=FunctionDeclaration |
		//	attributes+=AttributeDeclaration | processes+=ProcessDeclaration | components+=ComponentDeclaration |
		//	systems+=SystemDeclaration)*;
		public ParserRule getRule() { return rule; }

		//(constants+=ConstantDeclaration | projections+=ProjectionDeclaration | functions+=FunctionDeclaration |
		//attributes+=AttributeDeclaration | processes+=ProcessDeclaration | components+=ComponentDeclaration |
		//systems+=SystemDeclaration)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//constants+=ConstantDeclaration
		public Assignment getConstantsAssignment_0() { return cConstantsAssignment_0; }

		//ConstantDeclaration
		public RuleCall getConstantsConstantDeclarationParserRuleCall_0_0() { return cConstantsConstantDeclarationParserRuleCall_0_0; }

		//projections+=ProjectionDeclaration
		public Assignment getProjectionsAssignment_1() { return cProjectionsAssignment_1; }

		//ProjectionDeclaration
		public RuleCall getProjectionsProjectionDeclarationParserRuleCall_1_0() { return cProjectionsProjectionDeclarationParserRuleCall_1_0; }

		//functions+=FunctionDeclaration
		public Assignment getFunctionsAssignment_2() { return cFunctionsAssignment_2; }

		//FunctionDeclaration
		public RuleCall getFunctionsFunctionDeclarationParserRuleCall_2_0() { return cFunctionsFunctionDeclarationParserRuleCall_2_0; }

		//attributes+=AttributeDeclaration
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }

		//AttributeDeclaration
		public RuleCall getAttributesAttributeDeclarationParserRuleCall_3_0() { return cAttributesAttributeDeclarationParserRuleCall_3_0; }

		//processes+=ProcessDeclaration
		public Assignment getProcessesAssignment_4() { return cProcessesAssignment_4; }

		//ProcessDeclaration
		public RuleCall getProcessesProcessDeclarationParserRuleCall_4_0() { return cProcessesProcessDeclarationParserRuleCall_4_0; }

		//components+=ComponentDeclaration
		public Assignment getComponentsAssignment_5() { return cComponentsAssignment_5; }

		//ComponentDeclaration
		public RuleCall getComponentsComponentDeclarationParserRuleCall_5_0() { return cComponentsComponentDeclarationParserRuleCall_5_0; }

		//systems+=SystemDeclaration
		public Assignment getSystemsAssignment_6() { return cSystemsAssignment_6; }

		//SystemDeclaration
		public RuleCall getSystemsSystemDeclarationParserRuleCall_6_0() { return cSystemsSystemDeclarationParserRuleCall_6_0; }
	}

	public class AttributeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AttributeDeclaration:
		//	"attribute" name=ID ":" type=Type ";";
		public ParserRule getRule() { return rule; }

		//"attribute" name=ID ":" type=Type ";"
		public Group getGroup() { return cGroup; }

		//"attribute"
		public Keyword getAttributeKeyword_0() { return cAttributeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=Type
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//Type
		public RuleCall getTypeTypeEnumRuleCall_3_0() { return cTypeTypeEnumRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class ProjectionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProjectionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProjectionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProjectionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProjectionProjectionExpressionParserRuleCall_3_0 = (RuleCall)cProjectionAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// * Attribute declaration:
		// * - name is the attribute name;
		// * - templates is a list containing the templates used to query data from the knowledge
		// * - exp is the expression associated to the attribute. This expression may contain variables
		// * that are bound by the templates.
		// * 
		// * To compute the value of an attribute first all the templates are queried from the local knowledge,
		// * then the expression is evaluated.
		// * / ProjectionDeclaration:
		//	"projection" name=ID "=" projection=ProjectionExpression ";";
		public ParserRule getRule() { return rule; }

		//"projection" name=ID "=" projection=ProjectionExpression ";"
		public Group getGroup() { return cGroup; }

		//"projection"
		public Keyword getProjectionKeyword_0() { return cProjectionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//projection=ProjectionExpression
		public Assignment getProjectionAssignment_3() { return cProjectionAssignment_3; }

		//ProjectionExpression
		public RuleCall getProjectionProjectionExpressionParserRuleCall_3_0() { return cProjectionProjectionExpressionParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class ProjectionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProjectionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTemplateAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTemplateTemplateParserRuleCall_0_1_0 = (RuleCall)cTemplateAssignment_0_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cValueAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cValueExpressionParserRuleCall_0_4_0 = (RuleCall)cValueAssignment_0_4.eContents().get(0);
		private final Keyword cColonKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Assignment cDefaultAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefaultExpressionParserRuleCall_1_0 = (RuleCall)cDefaultAssignment_1.eContents().get(0);
		
		//ProjectionExpression:
		//	("[" template=Template "]" "->" value=Expression ":")? default=Expression;
		public ParserRule getRule() { return rule; }

		//("[" template=Template "]" "->" value=Expression ":")? default=Expression
		public Group getGroup() { return cGroup; }

		//("[" template=Template "]" "->" value=Expression ":")?
		public Group getGroup_0() { return cGroup_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }

		//template=Template
		public Assignment getTemplateAssignment_0_1() { return cTemplateAssignment_0_1; }

		//Template
		public RuleCall getTemplateTemplateParserRuleCall_0_1_0() { return cTemplateTemplateParserRuleCall_0_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_0_2() { return cRightSquareBracketKeyword_0_2; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_0_3() { return cHyphenMinusGreaterThanSignKeyword_0_3; }

		//value=Expression
		public Assignment getValueAssignment_0_4() { return cValueAssignment_0_4; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_0_4_0() { return cValueExpressionParserRuleCall_0_4_0; }

		//":"
		public Keyword getColonKeyword_0_5() { return cColonKeyword_0_5; }

		//default=Expression
		public Assignment getDefaultAssignment_1() { return cDefaultAssignment_1; }

		//Expression
		public RuleCall getDefaultExpressionParserRuleCall_1_0() { return cDefaultExpressionParserRuleCall_1_0; }
	}

	public class ConstantDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueExpressionParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ConstantDeclaration:
		//	"const" type=Type name=ID "=" value=Expression ";";
		public ParserRule getRule() { return rule; }

		//"const" type=Type name=ID "=" value=Expression ";"
		public Group getGroup() { return cGroup; }

		//"const"
		public Keyword getConstKeyword_0() { return cConstKeyword_0; }

		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeEnumRuleCall_1_0() { return cTypeTypeEnumRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//value=Expression
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_4_0() { return cValueExpressionParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class ComponentDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersVariableParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersVariableParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cComponentAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cComponentComponentExpressionParserRuleCall_6_0 = (RuleCall)cComponentAssignment_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		/// *
		// * Declares the id associate to components in the system. 
		// * / ComponentDeclaration:
		//	"component" name=ID "(" (parameters+=Variable ("," parameters+=Variable)*)? ")" "=" component=ComponentExpression ";";
		public ParserRule getRule() { return rule; }

		//"component" name=ID "(" (parameters+=Variable ("," parameters+=Variable)*)? ")" "=" component=ComponentExpression ";"
		public Group getGroup() { return cGroup; }

		//"component"
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(parameters+=Variable ("," parameters+=Variable)*)?
		public Group getGroup_3() { return cGroup_3; }

		//parameters+=Variable
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }

		//Variable
		public RuleCall getParametersVariableParserRuleCall_3_0_0() { return cParametersVariableParserRuleCall_3_0_0; }

		//("," parameters+=Variable)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//parameters+=Variable
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }

		//Variable
		public RuleCall getParametersVariableParserRuleCall_3_1_1_0() { return cParametersVariableParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"="
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }

		//component=ComponentExpression
		public Assignment getComponentAssignment_6() { return cComponentAssignment_6; }

		//ComponentExpression
		public RuleCall getComponentComponentExpressionParserRuleCall_6_0() { return cComponentComponentExpressionParserRuleCall_6_0; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class ComponentExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComponentConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComponentReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ComponentExpression:
		//	ComponentConstant | ComponentReference;
		public ParserRule getRule() { return rule; }

		//ComponentConstant | ComponentReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//ComponentConstant
		public RuleCall getComponentConstantParserRuleCall_0() { return cComponentConstantParserRuleCall_0; }

		//ComponentReference
		public RuleCall getComponentReferenceParserRuleCall_1() { return cComponentReferenceParserRuleCall_1; }
	}

	public class ComponentReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReferenceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cReferenceComponentDeclarationCrossReference_0_0 = (CrossReference)cReferenceAssignment_0.eContents().get(0);
		private final RuleCall cReferenceComponentDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cReferenceComponentDeclarationCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgumentsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgumentsExpressionParserRuleCall_2_0_0 = (RuleCall)cArgumentsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_2_1_1_0 = (RuleCall)cArgumentsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ComponentReference:
		//	reference=[ComponentDeclaration] "(" (arguments+=Expression ("," arguments+=Expression)*)? ")";
		public ParserRule getRule() { return rule; }

		//reference=[ComponentDeclaration] "(" (arguments+=Expression ("," arguments+=Expression)*)? ")"
		public Group getGroup() { return cGroup; }

		//reference=[ComponentDeclaration]
		public Assignment getReferenceAssignment_0() { return cReferenceAssignment_0; }

		//[ComponentDeclaration]
		public CrossReference getReferenceComponentDeclarationCrossReference_0_0() { return cReferenceComponentDeclarationCrossReference_0_0; }

		//ID
		public RuleCall getReferenceComponentDeclarationIDTerminalRuleCall_0_0_1() { return cReferenceComponentDeclarationIDTerminalRuleCall_0_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(arguments+=Expression ("," arguments+=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_2_0() { return cArgumentsAssignment_2_0; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_2_0_0() { return cArgumentsExpressionParserRuleCall_2_0_0; }

		//("," arguments+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_2_1_1() { return cArgumentsAssignment_2_1_1; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_2_1_1_0() { return cArgumentsExpressionParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ComponentConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInterfaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInterfaceInterfaceParserRuleCall_1_0 = (RuleCall)cInterfaceAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cKnowledgeAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cKnowledgeKnowledgeParserRuleCall_4_0_0 = (RuleCall)cKnowledgeAssignment_4_0.eContents().get(0);
		private final Keyword cCommaKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cProcessesAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cProcessesProcessExpressionParserRuleCall_5_0_0 = (RuleCall)cProcessesAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cVerticalLineKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cProcessesAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cProcessesProcessExpressionParserRuleCall_5_1_1_0 = (RuleCall)cProcessesAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ComponentConstant:
		//	"{" interface=Interface "}" "[" (knowledge=Knowledge ",")? (processes+=ProcessExpression ("|"
		//	processes+=ProcessExpression)*) "]";
		public ParserRule getRule() { return rule; }

		//"{" interface=Interface "}" "[" (knowledge=Knowledge ",")? (processes+=ProcessExpression ("|"
		//processes+=ProcessExpression)*) "]"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//interface=Interface
		public Assignment getInterfaceAssignment_1() { return cInterfaceAssignment_1; }

		//Interface
		public RuleCall getInterfaceInterfaceParserRuleCall_1_0() { return cInterfaceInterfaceParserRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }

		//(knowledge=Knowledge ",")?
		public Group getGroup_4() { return cGroup_4; }

		//knowledge=Knowledge
		public Assignment getKnowledgeAssignment_4_0() { return cKnowledgeAssignment_4_0; }

		//Knowledge
		public RuleCall getKnowledgeKnowledgeParserRuleCall_4_0_0() { return cKnowledgeKnowledgeParserRuleCall_4_0_0; }

		//","
		public Keyword getCommaKeyword_4_1() { return cCommaKeyword_4_1; }

		//processes+=ProcessExpression ("|" processes+=ProcessExpression)*
		public Group getGroup_5() { return cGroup_5; }

		//processes+=ProcessExpression
		public Assignment getProcessesAssignment_5_0() { return cProcessesAssignment_5_0; }

		//ProcessExpression
		public RuleCall getProcessesProcessExpressionParserRuleCall_5_0_0() { return cProcessesProcessExpressionParserRuleCall_5_0_0; }

		//("|" processes+=ProcessExpression)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//"|"
		public Keyword getVerticalLineKeyword_5_1_0() { return cVerticalLineKeyword_5_1_0; }

		//processes+=ProcessExpression
		public Assignment getProcessesAssignment_5_1_1() { return cProcessesAssignment_5_1_1; }

		//ProcessExpression
		public RuleCall getProcessesProcessExpressionParserRuleCall_5_1_1_0() { return cProcessesProcessExpressionParserRuleCall_5_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}

	public class ProcessExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcessExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cProcessReferenceAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cReferenceAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cReferenceProcessDeclarationCrossReference_0_1_0 = (CrossReference)cReferenceAssignment_0_1.eContents().get(0);
		private final RuleCall cReferenceProcessDeclarationIDTerminalRuleCall_0_1_0_1 = (RuleCall)cReferenceProcessDeclarationCrossReference_0_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Assignment cArgumentsAssignment_0_3_0 = (Assignment)cGroup_0_3.eContents().get(0);
		private final RuleCall cArgumentsExpressionParserRuleCall_0_3_0_0 = (RuleCall)cArgumentsAssignment_0_3_0.eContents().get(0);
		private final Group cGroup_0_3_1 = (Group)cGroup_0_3.eContents().get(1);
		private final Keyword cCommaKeyword_0_3_1_0 = (Keyword)cGroup_0_3_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_0_3_1_1 = (Assignment)cGroup_0_3_1.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_0_3_1_1_0 = (RuleCall)cArgumentsAssignment_0_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cEmptyProcessAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cNilKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//ProcessExpression:
		//	{ProcessReference} reference=[ProcessDeclaration] "(" (arguments+=Expression ("," arguments+=Expression)*)? ")" |
		//	{EmptyProcess} "nil";
		public ParserRule getRule() { return rule; }

		//{ProcessReference} reference=[ProcessDeclaration] "(" (arguments+=Expression ("," arguments+=Expression)*)? ")" |
		//{EmptyProcess} "nil"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ProcessReference} reference=[ProcessDeclaration] "(" (arguments+=Expression ("," arguments+=Expression)*)? ")"
		public Group getGroup_0() { return cGroup_0; }

		//{ProcessReference}
		public Action getProcessReferenceAction_0_0() { return cProcessReferenceAction_0_0; }

		//reference=[ProcessDeclaration]
		public Assignment getReferenceAssignment_0_1() { return cReferenceAssignment_0_1; }

		//[ProcessDeclaration]
		public CrossReference getReferenceProcessDeclarationCrossReference_0_1_0() { return cReferenceProcessDeclarationCrossReference_0_1_0; }

		//ID
		public RuleCall getReferenceProcessDeclarationIDTerminalRuleCall_0_1_0_1() { return cReferenceProcessDeclarationIDTerminalRuleCall_0_1_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }

		//(arguments+=Expression ("," arguments+=Expression)*)?
		public Group getGroup_0_3() { return cGroup_0_3; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_0_3_0() { return cArgumentsAssignment_0_3_0; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_0_3_0_0() { return cArgumentsExpressionParserRuleCall_0_3_0_0; }

		//("," arguments+=Expression)*
		public Group getGroup_0_3_1() { return cGroup_0_3_1; }

		//","
		public Keyword getCommaKeyword_0_3_1_0() { return cCommaKeyword_0_3_1_0; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_0_3_1_1() { return cArgumentsAssignment_0_3_1_1; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_0_3_1_1_0() { return cArgumentsExpressionParserRuleCall_0_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }

		//{EmptyProcess} "nil"
		public Group getGroup_1() { return cGroup_1; }

		//{EmptyProcess}
		public Action getEmptyProcessAction_1_0() { return cEmptyProcessAction_1_0; }

		//"nil"
		public Keyword getNilKeyword_1_1() { return cNilKeyword_1_1; }
	}

	public class KnowledgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Knowledge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTuplesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTuplesTupleParserRuleCall_1_0 = (RuleCall)cTuplesAssignment_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cVerticalLineKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLessThanSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cTuplesAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cTuplesTupleParserRuleCall_3_2_0 = (RuleCall)cTuplesAssignment_3_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//Knowledge:
		//	"<" tuples+=Tuple ">" ("|" "<" tuples+=Tuple ">")*;
		public ParserRule getRule() { return rule; }

		//"<" tuples+=Tuple ">" ("|" "<" tuples+=Tuple ">")*
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//tuples+=Tuple
		public Assignment getTuplesAssignment_1() { return cTuplesAssignment_1; }

		//Tuple
		public RuleCall getTuplesTupleParserRuleCall_1_0() { return cTuplesTupleParserRuleCall_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }

		//("|" "<" tuples+=Tuple ">")*
		public Group getGroup_3() { return cGroup_3; }

		//"|"
		public Keyword getVerticalLineKeyword_3_0() { return cVerticalLineKeyword_3_0; }

		//"<"
		public Keyword getLessThanSignKeyword_3_1() { return cLessThanSignKeyword_3_1; }

		//tuples+=Tuple
		public Assignment getTuplesAssignment_3_2() { return cTuplesAssignment_3_2; }

		//Tuple
		public RuleCall getTuplesTupleParserRuleCall_3_2_0() { return cTuplesTupleParserRuleCall_3_2_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3_3() { return cGreaterThanSignKeyword_3_3; }
	}

	public class InterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Interface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cAttributesAlternatives_0_0 = (Alternatives)cAttributesAssignment_0.eContents().get(0);
		private final RuleCall cAttributesIdAttributeDefinitionParserRuleCall_0_0_0 = (RuleCall)cAttributesAlternatives_0_0.eContents().get(0);
		private final RuleCall cAttributesAttributeInstantiationParserRuleCall_0_0_1 = (RuleCall)cAttributesAlternatives_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAttributesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cAttributesAlternatives_1_1_0 = (Alternatives)cAttributesAssignment_1_1.eContents().get(0);
		private final RuleCall cAttributesIdAttributeDefinitionParserRuleCall_1_1_0_0 = (RuleCall)cAttributesAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cAttributesAttributeInstantiationParserRuleCall_1_1_0_1 = (RuleCall)cAttributesAlternatives_1_1_0.eContents().get(1);
		
		//Interface:
		//	attributes+=(IdAttributeDefinition | AttributeInstantiation) ("," attributes+=(IdAttributeDefinition |
		//	AttributeInstantiation))*;
		public ParserRule getRule() { return rule; }

		//attributes+=(IdAttributeDefinition | AttributeInstantiation) ("," attributes+=(IdAttributeDefinition |
		//AttributeInstantiation))*
		public Group getGroup() { return cGroup; }

		//attributes+=(IdAttributeDefinition | AttributeInstantiation)
		public Assignment getAttributesAssignment_0() { return cAttributesAssignment_0; }

		//IdAttributeDefinition | AttributeInstantiation
		public Alternatives getAttributesAlternatives_0_0() { return cAttributesAlternatives_0_0; }

		//IdAttributeDefinition
		public RuleCall getAttributesIdAttributeDefinitionParserRuleCall_0_0_0() { return cAttributesIdAttributeDefinitionParserRuleCall_0_0_0; }

		//AttributeInstantiation
		public RuleCall getAttributesAttributeInstantiationParserRuleCall_0_0_1() { return cAttributesAttributeInstantiationParserRuleCall_0_0_1; }

		//("," attributes+=(IdAttributeDefinition | AttributeInstantiation))*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//attributes+=(IdAttributeDefinition | AttributeInstantiation)
		public Assignment getAttributesAssignment_1_1() { return cAttributesAssignment_1_1; }

		//IdAttributeDefinition | AttributeInstantiation
		public Alternatives getAttributesAlternatives_1_1_0() { return cAttributesAlternatives_1_1_0; }

		//IdAttributeDefinition
		public RuleCall getAttributesIdAttributeDefinitionParserRuleCall_1_1_0_0() { return cAttributesIdAttributeDefinitionParserRuleCall_1_1_0_0; }

		//AttributeInstantiation
		public RuleCall getAttributesAttributeInstantiationParserRuleCall_1_1_0_1() { return cAttributesAttributeInstantiationParserRuleCall_1_1_0_1; }
	}

	public class IdAttributeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IdAttributeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIdKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cComponentIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cComponentIdSTRINGTerminalRuleCall_2_0 = (RuleCall)cComponentIdAssignment_2.eContents().get(0);
		
		//IdAttributeDefinition:
		//	"id" "=" componentId=STRING;
		public ParserRule getRule() { return rule; }

		//"id" "=" componentId=STRING
		public Group getGroup() { return cGroup; }

		//"id"
		public Keyword getIdKeyword_0() { return cIdKeyword_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//componentId=STRING
		public Assignment getComponentIdAssignment_2() { return cComponentIdAssignment_2; }

		//STRING
		public RuleCall getComponentIdSTRINGTerminalRuleCall_2_0() { return cComponentIdSTRINGTerminalRuleCall_2_0; }
	}

	public class AttributeInstantiationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeInstantiation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cAttributeAttributeDeclarationCrossReference_0_0 = (CrossReference)cAttributeAssignment_0.eContents().get(0);
		private final RuleCall cAttributeAttributeDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cAttributeAttributeDeclarationCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//AttributeInstantiation:
		//	attribute=[AttributeDeclaration] "=" value=Expression;
		public ParserRule getRule() { return rule; }

		//attribute=[AttributeDeclaration] "=" value=Expression
		public Group getGroup() { return cGroup; }

		//attribute=[AttributeDeclaration]
		public Assignment getAttributeAssignment_0() { return cAttributeAssignment_0; }

		//[AttributeDeclaration]
		public CrossReference getAttributeAttributeDeclarationCrossReference_0_0() { return cAttributeAttributeDeclarationCrossReference_0_0; }

		//ID
		public RuleCall getAttributeAttributeDeclarationIDTerminalRuleCall_0_0_1() { return cAttributeAttributeDeclarationIDTerminalRuleCall_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
	}

	public class FunctionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReturnTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReturnTypeTypeEnumRuleCall_1_0 = (RuleCall)cReturnTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParametersVariableParserRuleCall_4_0_0 = (RuleCall)cParametersAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParametersVariableParserRuleCall_4_1_1_0 = (RuleCall)cParametersAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBodyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBodyExpressionParserRuleCall_7_0 = (RuleCall)cBodyAssignment_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//FunctionDeclaration:
		//	"function" returnType=Type name=ID "(" (parameters+=Variable ("," parameters+=Variable)*)? ")" "=" body=Expression
		//	";";
		public ParserRule getRule() { return rule; }

		//"function" returnType=Type name=ID "(" (parameters+=Variable ("," parameters+=Variable)*)? ")" "=" body=Expression ";"
		public Group getGroup() { return cGroup; }

		//"function"
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }

		//returnType=Type
		public Assignment getReturnTypeAssignment_1() { return cReturnTypeAssignment_1; }

		//Type
		public RuleCall getReturnTypeTypeEnumRuleCall_1_0() { return cReturnTypeTypeEnumRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(parameters+=Variable ("," parameters+=Variable)*)?
		public Group getGroup_4() { return cGroup_4; }

		//parameters+=Variable
		public Assignment getParametersAssignment_4_0() { return cParametersAssignment_4_0; }

		//Variable
		public RuleCall getParametersVariableParserRuleCall_4_0_0() { return cParametersVariableParserRuleCall_4_0_0; }

		//("," parameters+=Variable)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//parameters+=Variable
		public Assignment getParametersAssignment_4_1_1() { return cParametersAssignment_4_1_1; }

		//Variable
		public RuleCall getParametersVariableParserRuleCall_4_1_1_0() { return cParametersVariableParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//"="
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }

		//body=Expression
		public Assignment getBodyAssignment_7() { return cBodyAssignment_7; }

		//Expression
		public RuleCall getBodyExpressionParserRuleCall_7_0() { return cBodyExpressionParserRuleCall_7_0; }

		//";"
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}

	public class ProcessDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcessDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersVariableParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersVariableParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyBlockParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ProcessDeclaration:
		//	"process" name=ID "(" (parameters+=Variable ("," parameters+=Variable)*)? ")" "{" body=Block "}";
		public ParserRule getRule() { return rule; }

		//"process" name=ID "(" (parameters+=Variable ("," parameters+=Variable)*)? ")" "{" body=Block "}"
		public Group getGroup() { return cGroup; }

		//"process"
		public Keyword getProcessKeyword_0() { return cProcessKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(parameters+=Variable ("," parameters+=Variable)*)?
		public Group getGroup_3() { return cGroup_3; }

		//parameters+=Variable
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }

		//Variable
		public RuleCall getParametersVariableParserRuleCall_3_0_0() { return cParametersVariableParserRuleCall_3_0_0; }

		//("," parameters+=Variable)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//parameters+=Variable
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }

		//Variable
		public RuleCall getParametersVariableParserRuleCall_3_1_1_0() { return cParametersVariableParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//body=Block
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }

		//Block
		public RuleCall getBodyBlockParserRuleCall_6_0() { return cBodyBlockParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Variable:
		//	type=Type name=ID;
		public ParserRule getRule() { return rule; }

		//type=Type name=ID
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeEnumRuleCall_0_0() { return cTypeTypeEnumRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ReferenceableElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReferenceableElements");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstantDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAttributeDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cProjectionDeclarationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//ReferenceableElements:
		//	Variable | ConstantDeclaration | FunctionDeclaration | AttributeDeclaration | ProjectionDeclaration;
		public ParserRule getRule() { return rule; }

		//Variable | ConstantDeclaration | FunctionDeclaration | AttributeDeclaration | ProjectionDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//Variable
		public RuleCall getVariableParserRuleCall_0() { return cVariableParserRuleCall_0; }

		//ConstantDeclaration
		public RuleCall getConstantDeclarationParserRuleCall_1() { return cConstantDeclarationParserRuleCall_1; }

		//FunctionDeclaration
		public RuleCall getFunctionDeclarationParserRuleCall_2() { return cFunctionDeclarationParserRuleCall_2; }

		//AttributeDeclaration
		public RuleCall getAttributeDeclarationParserRuleCall_3() { return cAttributeDeclarationParserRuleCall_3; }

		//ProjectionDeclaration
		public RuleCall getProjectionDeclarationParserRuleCall_4() { return cProjectionDeclarationParserRuleCall_4; }
	}

	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfThenElseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWhileParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVariableDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cProcessExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cBlockParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//Command:
		//	Action | IfThenElse | While | VariableDeclaration | ProcessExpression | "{" Block "}";
		public ParserRule getRule() { return rule; }

		//Action | IfThenElse | While | VariableDeclaration | ProcessExpression | "{" Block "}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Action
		public RuleCall getActionParserRuleCall_0() { return cActionParserRuleCall_0; }

		//IfThenElse
		public RuleCall getIfThenElseParserRuleCall_1() { return cIfThenElseParserRuleCall_1; }

		//While
		public RuleCall getWhileParserRuleCall_2() { return cWhileParserRuleCall_2; }

		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_3() { return cVariableDeclarationParserRuleCall_3; }

		//ProcessExpression
		public RuleCall getProcessExpressionParserRuleCall_4() { return cProcessExpressionParserRuleCall_4; }

		//"{" Block "}"
		public Group getGroup_5() { return cGroup_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_0() { return cLeftCurlyBracketKeyword_5_0; }

		//Block
		public RuleCall getBlockParserRuleCall_5_1() { return cBlockParserRuleCall_5_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_2() { return cRightCurlyBracketKeyword_5_2; }
	}

	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeclaredVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDeclaredVariableVariableParserRuleCall_0_0 = (RuleCall)cDeclaredVariableAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cInitAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cInitExpressionParserRuleCall_1_1_0 = (RuleCall)cInitAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//VariableDeclaration:
		//	declaredVariable=Variable ("=" init=Expression)? ";";
		public ParserRule getRule() { return rule; }

		//declaredVariable=Variable ("=" init=Expression)? ";"
		public Group getGroup() { return cGroup; }

		//declaredVariable=Variable
		public Assignment getDeclaredVariableAssignment_0() { return cDeclaredVariableAssignment_0; }

		//Variable
		public RuleCall getDeclaredVariableVariableParserRuleCall_0_0() { return cDeclaredVariableVariableParserRuleCall_0_0; }

		//("=" init=Expression)?
		public Group getGroup_1() { return cGroup_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }

		//init=Expression
		public Assignment getInitAssignment_1_1() { return cInitAssignment_1_1; }

		//Expression
		public RuleCall getInitExpressionParserRuleCall_1_1_0() { return cInitExpressionParserRuleCall_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPutActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGetActionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cQueryActionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cReplaceActionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Action:
		//	PutAction | GetAction | QueryAction | ReplaceAction;
		public ParserRule getRule() { return rule; }

		//PutAction | GetAction | QueryAction | ReplaceAction
		public Alternatives getAlternatives() { return cAlternatives; }

		//PutAction
		public RuleCall getPutActionParserRuleCall_0() { return cPutActionParserRuleCall_0; }

		//GetAction
		public RuleCall getGetActionParserRuleCall_1() { return cGetActionParserRuleCall_1; }

		//QueryAction
		public RuleCall getQueryActionParserRuleCall_2() { return cQueryActionParserRuleCall_2; }

		//ReplaceAction
		public RuleCall getReplaceActionParserRuleCall_3() { return cReplaceActionParserRuleCall_3; }
	}

	public class ReplaceActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReplaceAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReplaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTemplateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTemplateTemplateParserRuleCall_2_0 = (RuleCall)cTemplateAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTupleAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTupleTupleParserRuleCall_4_0 = (RuleCall)cTupleAssignment_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ReplaceAction:
		//	"replace" "[" template=Template "->" tuple=Tuple "]" ";";
		public ParserRule getRule() { return rule; }

		//"replace" "[" template=Template "->" tuple=Tuple "]" ";"
		public Group getGroup() { return cGroup; }

		//"replace"
		public Keyword getReplaceKeyword_0() { return cReplaceKeyword_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//template=Template
		public Assignment getTemplateAssignment_2() { return cTemplateAssignment_2; }

		//Template
		public RuleCall getTemplateTemplateParserRuleCall_2_0() { return cTemplateTemplateParserRuleCall_2_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }

		//tuple=Tuple
		public Assignment getTupleAssignment_4() { return cTupleAssignment_4; }

		//Tuple
		public RuleCall getTupleTupleParserRuleCall_4_0() { return cTupleTupleParserRuleCall_4_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class GetActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GetAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTemplateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTemplateTemplateParserRuleCall_2_0 = (RuleCall)cTemplateAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cCommercialAtKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTargetAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTargetExpressionParserRuleCall_5_0 = (RuleCall)cTargetAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//GetAction:
		//	"get" "(" template=Template ")" "@" target=Expression ";";
		public ParserRule getRule() { return rule; }

		//"get" "(" template=Template ")" "@" target=Expression ";"
		public Group getGroup() { return cGroup; }

		//"get"
		public Keyword getGetKeyword_0() { return cGetKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//template=Template
		public Assignment getTemplateAssignment_2() { return cTemplateAssignment_2; }

		//Template
		public RuleCall getTemplateTemplateParserRuleCall_2_0() { return cTemplateTemplateParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"@"
		public Keyword getCommercialAtKeyword_4() { return cCommercialAtKeyword_4; }

		//target=Expression
		public Assignment getTargetAssignment_5() { return cTargetAssignment_5; }

		//Expression
		public RuleCall getTargetExpressionParserRuleCall_5_0() { return cTargetExpressionParserRuleCall_5_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class QueryActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QueryAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQueryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTemplateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTemplateTemplateParserRuleCall_2_0 = (RuleCall)cTemplateAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cCommercialAtKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTargetAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTargetExpressionParserRuleCall_5_0 = (RuleCall)cTargetAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//QueryAction:
		//	"query" "(" template=Template ")" "@" target=Expression ";";
		public ParserRule getRule() { return rule; }

		//"query" "(" template=Template ")" "@" target=Expression ";"
		public Group getGroup() { return cGroup; }

		//"query"
		public Keyword getQueryKeyword_0() { return cQueryKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//template=Template
		public Assignment getTemplateAssignment_2() { return cTemplateAssignment_2; }

		//Template
		public RuleCall getTemplateTemplateParserRuleCall_2_0() { return cTemplateTemplateParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"@"
		public Keyword getCommercialAtKeyword_4() { return cCommercialAtKeyword_4; }

		//target=Expression
		public Assignment getTargetAssignment_5() { return cTargetAssignment_5; }

		//Expression
		public RuleCall getTargetExpressionParserRuleCall_5_0() { return cTargetExpressionParserRuleCall_5_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class PutActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PutAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTupleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTupleTupleParserRuleCall_2_0 = (RuleCall)cTupleAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cCommercialAtKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTargetAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTargetExpressionParserRuleCall_5_0 = (RuleCall)cTargetAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//PutAction:
		//	"put" "(" tuple=Tuple ")" "@" target=Expression ";";
		public ParserRule getRule() { return rule; }

		//"put" "(" tuple=Tuple ")" "@" target=Expression ";"
		public Group getGroup() { return cGroup; }

		//"put"
		public Keyword getPutKeyword_0() { return cPutKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//tuple=Tuple
		public Assignment getTupleAssignment_2() { return cTupleAssignment_2; }

		//Tuple
		public RuleCall getTupleTupleParserRuleCall_2_0() { return cTupleTupleParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"@"
		public Keyword getCommercialAtKeyword_4() { return cCommercialAtKeyword_4; }

		//target=Expression
		public Assignment getTargetAssignment_5() { return cTargetAssignment_5; }

		//Expression
		public RuleCall getTargetExpressionParserRuleCall_5_0() { return cTargetExpressionParserRuleCall_5_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class ExecActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExecAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExecKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgExpressionParserRuleCall_2_0 = (RuleCall)cArgAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ExecAction:
		//	"exec" "(" arg=Expression ")" ";";
		public ParserRule getRule() { return rule; }

		//"exec" "(" arg=Expression ")" ";"
		public Group getGroup() { return cGroup; }

		//"exec"
		public Keyword getExecKeyword_0() { return cExecKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//arg=Expression
		public Assignment getArgAssignment_2() { return cArgAssignment_2; }

		//Expression
		public RuleCall getArgExpressionParserRuleCall_2_0() { return cArgExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class TupleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Tuple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFieldsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFieldsExpressionParserRuleCall_0_0 = (RuleCall)cFieldsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFieldsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFieldsExpressionParserRuleCall_1_1_0 = (RuleCall)cFieldsAssignment_1_1.eContents().get(0);
		
		//Tuple:
		//	fields+=Expression ("," fields+=Expression)*;
		public ParserRule getRule() { return rule; }

		//fields+=Expression ("," fields+=Expression)*
		public Group getGroup() { return cGroup; }

		//fields+=Expression
		public Assignment getFieldsAssignment_0() { return cFieldsAssignment_0; }

		//Expression
		public RuleCall getFieldsExpressionParserRuleCall_0_0() { return cFieldsExpressionParserRuleCall_0_0; }

		//("," fields+=Expression)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//fields+=Expression
		public Assignment getFieldsAssignment_1_1() { return cFieldsAssignment_1_1; }

		//Expression
		public RuleCall getFieldsExpressionParserRuleCall_1_1_0() { return cFieldsExpressionParserRuleCall_1_1_0; }
	}

	public class TemplateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Template");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFieldsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFieldsTemplateFieldParserRuleCall_0_0 = (RuleCall)cFieldsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFieldsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFieldsTemplateFieldParserRuleCall_1_1_0 = (RuleCall)cFieldsAssignment_1_1.eContents().get(0);
		
		//Template:
		//	fields+=TemplateField ("," fields+=TemplateField)*;
		public ParserRule getRule() { return rule; }

		//fields+=TemplateField ("," fields+=TemplateField)*
		public Group getGroup() { return cGroup; }

		//fields+=TemplateField
		public Assignment getFieldsAssignment_0() { return cFieldsAssignment_0; }

		//TemplateField
		public RuleCall getFieldsTemplateFieldParserRuleCall_0_0() { return cFieldsTemplateFieldParserRuleCall_0_0; }

		//("," fields+=TemplateField)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//fields+=TemplateField
		public Assignment getFieldsAssignment_1_1() { return cFieldsAssignment_1_1; }

		//TemplateField
		public RuleCall getFieldsTemplateFieldParserRuleCall_1_1_0() { return cFieldsTemplateFieldParserRuleCall_1_1_0; }
	}

	public class TemplateFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TemplateField");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAnyFormalFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFormalFieldParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cActualFieldParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTypedFormalFieldParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//TemplateField:
		//	AnyFormalField | FormalField | ActualField | TypedFormalField;
		public ParserRule getRule() { return rule; }

		//AnyFormalField | FormalField | ActualField | TypedFormalField
		public Alternatives getAlternatives() { return cAlternatives; }

		//AnyFormalField
		public RuleCall getAnyFormalFieldParserRuleCall_0() { return cAnyFormalFieldParserRuleCall_0; }

		//FormalField
		public RuleCall getFormalFieldParserRuleCall_1() { return cFormalFieldParserRuleCall_1; }

		//ActualField
		public RuleCall getActualFieldParserRuleCall_2() { return cActualFieldParserRuleCall_2; }

		//TypedFormalField
		public RuleCall getTypedFormalFieldParserRuleCall_3() { return cTypedFormalFieldParserRuleCall_3; }
	}

	public class AnyFormalFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnyFormalField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAnyFormalFieldAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//AnyFormalField:
		//	{AnyFormalField} "*";
		public ParserRule getRule() { return rule; }

		//{AnyFormalField} "*"
		public Group getGroup() { return cGroup; }

		//{AnyFormalField}
		public Action getAnyFormalFieldAction_0() { return cAnyFormalFieldAction_0; }

		//"*"
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}

	public class TypedFormalFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypedFormalField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TypedFormalField:
		//	"(" type=Type ")";
		public ParserRule getRule() { return rule; }

		//"(" type=Type ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeEnumRuleCall_1_0() { return cTypeTypeEnumRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class FormalFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormalField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cStandardFormalFieldAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cReferenceAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final CrossReference cReferenceVariableCrossReference_1_0_1_0 = (CrossReference)cReferenceAssignment_1_0_1.eContents().get(0);
		private final RuleCall cReferenceVariableIDTerminalRuleCall_1_0_1_0_1 = (RuleCall)cReferenceVariableCrossReference_1_0_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cFormalFieldWithDeclarationAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cVariableAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cVariableVariableParserRuleCall_1_1_2_0 = (RuleCall)cVariableAssignment_1_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		
		//FormalField:
		//	"?" ({StandardFormalField} reference=[Variable] | {FormalFieldWithDeclaration} "[" variable=Variable "]");
		public ParserRule getRule() { return rule; }

		//"?" ({StandardFormalField} reference=[Variable] | {FormalFieldWithDeclaration} "[" variable=Variable "]")
		public Group getGroup() { return cGroup; }

		//"?"
		public Keyword getQuestionMarkKeyword_0() { return cQuestionMarkKeyword_0; }

		//{StandardFormalField} reference=[Variable] | {FormalFieldWithDeclaration} "[" variable=Variable "]"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{StandardFormalField} reference=[Variable]
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{StandardFormalField}
		public Action getStandardFormalFieldAction_1_0_0() { return cStandardFormalFieldAction_1_0_0; }

		//reference=[Variable]
		public Assignment getReferenceAssignment_1_0_1() { return cReferenceAssignment_1_0_1; }

		//[Variable]
		public CrossReference getReferenceVariableCrossReference_1_0_1_0() { return cReferenceVariableCrossReference_1_0_1_0; }

		//ID
		public RuleCall getReferenceVariableIDTerminalRuleCall_1_0_1_0_1() { return cReferenceVariableIDTerminalRuleCall_1_0_1_0_1; }

		//{FormalFieldWithDeclaration} "[" variable=Variable "]"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{FormalFieldWithDeclaration}
		public Action getFormalFieldWithDeclarationAction_1_1_0() { return cFormalFieldWithDeclarationAction_1_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_1() { return cLeftSquareBracketKeyword_1_1_1; }

		//variable=Variable
		public Assignment getVariableAssignment_1_1_2() { return cVariableAssignment_1_1_2; }

		//Variable
		public RuleCall getVariableVariableParserRuleCall_1_1_2_0() { return cVariableVariableParserRuleCall_1_1_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_3() { return cRightSquareBracketKeyword_1_1_3; }
	}

	public class ActualFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActualField");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ActualField:
		//	value=Expression;
		public ParserRule getRule() { return rule; }

		//value=Expression
		public Assignment getValueAssignment() { return cValueAssignment; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_0() { return cValueExpressionParserRuleCall_0; }
	}

	public class WhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "While");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGuardAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGuardExpressionParserRuleCall_2_0 = (RuleCall)cGuardAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyCommandParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//While:
		//	"while" "(" guard=Expression ")" body=Command;
		public ParserRule getRule() { return rule; }

		//"while" "(" guard=Expression ")" body=Command
		public Group getGroup() { return cGroup; }

		//"while"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//guard=Expression
		public Assignment getGuardAssignment_2() { return cGuardAssignment_2; }

		//Expression
		public RuleCall getGuardExpressionParserRuleCall_2_0() { return cGuardExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//body=Command
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }

		//Command
		public RuleCall getBodyCommandParserRuleCall_4_0() { return cBodyCommandParserRuleCall_4_0; }
	}

	public class IfThenElseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfThenElse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGuardAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGuardExpressionParserRuleCall_2_0 = (RuleCall)cGuardAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenBranchAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenBranchCommandParserRuleCall_4_0 = (RuleCall)cThenBranchAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseBranchAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseBranchCommandParserRuleCall_5_1_0 = (RuleCall)cElseBranchAssignment_5_1.eContents().get(0);
		
		/// * 
		//For:
		//	'for' name=ID 'from' init=Expression  'to' end=Expression body=Command
		//;
		// * / IfThenElse:
		//	"if" "(" guard=Expression ")" thenBranch=Command ("else" elseBranch=Command)?;
		public ParserRule getRule() { return rule; }

		//"if" "(" guard=Expression ")" thenBranch=Command ("else" elseBranch=Command)?
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//guard=Expression
		public Assignment getGuardAssignment_2() { return cGuardAssignment_2; }

		//Expression
		public RuleCall getGuardExpressionParserRuleCall_2_0() { return cGuardExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//thenBranch=Command
		public Assignment getThenBranchAssignment_4() { return cThenBranchAssignment_4; }

		//Command
		public RuleCall getThenBranchCommandParserRuleCall_4_0() { return cThenBranchCommandParserRuleCall_4_0; }

		//(=> "else" elseBranch=Command)?
		public Group getGroup_5() { return cGroup_5; }

		//=> "else"
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }

		//elseBranch=Command
		public Assignment getElseBranchAssignment_5_1() { return cElseBranchAssignment_5_1; }

		//Command
		public RuleCall getElseBranchCommandParserRuleCall_5_1_0() { return cElseBranchCommandParserRuleCall_5_1_0; }
	}

	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommandsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommandsCommandParserRuleCall_1_0 = (RuleCall)cCommandsAssignment_1.eContents().get(0);
		
		//Block:
		//	{Block} commands+=Command*;
		public ParserRule getRule() { return rule; }

		//{Block} commands+=Command*
		public Group getGroup() { return cGroup; }

		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }

		//commands+=Command*
		public Assignment getCommandsAssignment_1() { return cCommandsAssignment_1; }

		//Command
		public RuleCall getCommandsCommandParserRuleCall_1_0() { return cCommandsCommandParserRuleCall_1_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cDisjunctionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	Disjunction;
		public ParserRule getRule() { return rule; }

		//Disjunction
		public RuleCall getDisjunctionParserRuleCall() { return cDisjunctionParserRuleCall; }
	}

	public class DisjunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Disjunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConjunctionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cDisjunctionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightDisjunctionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Disjunction returns Expression:
		//	Conjunction ({Disjunction.left=current} "|" right=Disjunction)?;
		public ParserRule getRule() { return rule; }

		//Conjunction ({Disjunction.left=current} "|" right=Disjunction)?
		public Group getGroup() { return cGroup; }

		//Conjunction
		public RuleCall getConjunctionParserRuleCall_0() { return cConjunctionParserRuleCall_0; }

		//({Disjunction.left=current} "|" right=Disjunction)?
		public Group getGroup_1() { return cGroup_1; }

		//{Disjunction.left=current}
		public Action getDisjunctionLeftAction_1_0() { return cDisjunctionLeftAction_1_0; }

		//"|"
		public Keyword getVerticalLineKeyword_1_1() { return cVerticalLineKeyword_1_1; }

		//right=Disjunction
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Disjunction
		public RuleCall getRightDisjunctionParserRuleCall_1_2_0() { return cRightDisjunctionParserRuleCall_1_2_0; }
	}

	public class ConjunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Conjunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNegationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cConjunctionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightConjunctionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Conjunction returns Expression:
		//	Negation ({Conjunction.left=current} "&" right=Conjunction)?;
		public ParserRule getRule() { return rule; }

		//Negation ({Conjunction.left=current} "&" right=Conjunction)?
		public Group getGroup() { return cGroup; }

		//Negation
		public RuleCall getNegationParserRuleCall_0() { return cNegationParserRuleCall_0; }

		//({Conjunction.left=current} "&" right=Conjunction)?
		public Group getGroup_1() { return cGroup_1; }

		//{Conjunction.left=current}
		public Action getConjunctionLeftAction_1_0() { return cConjunctionLeftAction_1_0; }

		//"&"
		public Keyword getAmpersandKeyword_1_1() { return cAmpersandKeyword_1_1; }

		//right=Conjunction
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Conjunction
		public RuleCall getRightConjunctionParserRuleCall_1_2_0() { return cRightConjunctionParserRuleCall_1_2_0; }
	}

	public class NegationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Negation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Action cNegationAction_0_1 = (Action)cGroup_0.eContents().get(1);
		private final Assignment cArgAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cArgRelationParserRuleCall_0_2_0 = (RuleCall)cArgAssignment_0_2.eContents().get(0);
		private final RuleCall cRelationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Negation returns Expression:
		//	"!" {Negation} arg=Relation | Relation;
		public ParserRule getRule() { return rule; }

		//"!" {Negation} arg=Relation | Relation
		public Alternatives getAlternatives() { return cAlternatives; }

		//"!" {Negation} arg=Relation
		public Group getGroup_0() { return cGroup_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_0_0() { return cExclamationMarkKeyword_0_0; }

		//{Negation}
		public Action getNegationAction_0_1() { return cNegationAction_0_1; }

		//arg=Relation
		public Assignment getArgAssignment_0_2() { return cArgAssignment_0_2; }

		//Relation
		public RuleCall getArgRelationParserRuleCall_0_2_0() { return cArgRelationParserRuleCall_0_2_0; }

		//Relation
		public RuleCall getRelationParserRuleCall_1() { return cRelationParserRuleCall_1; }
	}

	public class RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Relation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSummationSubtractionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cRelationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cRelAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRelRelationSymbolEnumRuleCall_1_1_0 = (RuleCall)cRelAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightRelationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Relation returns Expression:
		//	SummationSubtraction ({Relation.left=current} rel=RelationSymbol right=Relation)?;
		public ParserRule getRule() { return rule; }

		//SummationSubtraction ({Relation.left=current} rel=RelationSymbol right=Relation)?
		public Group getGroup() { return cGroup; }

		//SummationSubtraction
		public RuleCall getSummationSubtractionParserRuleCall_0() { return cSummationSubtractionParserRuleCall_0; }

		//({Relation.left=current} rel=RelationSymbol right=Relation)?
		public Group getGroup_1() { return cGroup_1; }

		//{Relation.left=current}
		public Action getRelationLeftAction_1_0() { return cRelationLeftAction_1_0; }

		//rel=RelationSymbol
		public Assignment getRelAssignment_1_1() { return cRelAssignment_1_1; }

		//RelationSymbol
		public RuleCall getRelRelationSymbolEnumRuleCall_1_1_0() { return cRelRelationSymbolEnumRuleCall_1_1_0; }

		//right=Relation
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Relation
		public RuleCall getRightRelationParserRuleCall_1_2_0() { return cRightRelationParserRuleCall_1_2_0; }
	}

	public class SummationSubtractionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SummationSubtraction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationDivisionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cSummationSubtractionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightSummationSubtractionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//SummationSubtraction returns Expression:
		//	MultiplicationDivision ({SummationSubtraction.left=current} op=("+" | "-") right=SummationSubtraction)?;
		public ParserRule getRule() { return rule; }

		//MultiplicationDivision ({SummationSubtraction.left=current} op=("+" | "-") right=SummationSubtraction)?
		public Group getGroup() { return cGroup; }

		//MultiplicationDivision
		public RuleCall getMultiplicationDivisionParserRuleCall_0() { return cMultiplicationDivisionParserRuleCall_0; }

		//({SummationSubtraction.left=current} op=("+" | "-") right=SummationSubtraction)?
		public Group getGroup_1() { return cGroup_1; }

		//{SummationSubtraction.left=current}
		public Action getSummationSubtractionLeftAction_1_0() { return cSummationSubtractionLeftAction_1_0; }

		//op=("+" | "-")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"+" | "-"
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"+"
		public Keyword getOpPlusSignKeyword_1_1_0_0() { return cOpPlusSignKeyword_1_1_0_0; }

		//"-"
		public Keyword getOpHyphenMinusKeyword_1_1_0_1() { return cOpHyphenMinusKeyword_1_1_0_1; }

		//right=SummationSubtraction
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//SummationSubtraction
		public RuleCall getRightSummationSubtractionParserRuleCall_1_2_0() { return cRightSummationSubtractionParserRuleCall_1_2_0; }
	}

	public class MultiplicationDivisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicationDivision");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBaseExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiplicationDivisionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicationDivisionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MultiplicationDivision returns Expression:
		//	BaseExpression ({MultiplicationDivision.left=current} op=("*" | "/") right=MultiplicationDivision)?;
		public ParserRule getRule() { return rule; }

		//BaseExpression ({MultiplicationDivision.left=current} op=("*" | "/") right=MultiplicationDivision)?
		public Group getGroup() { return cGroup; }

		//BaseExpression
		public RuleCall getBaseExpressionParserRuleCall_0() { return cBaseExpressionParserRuleCall_0; }

		//({MultiplicationDivision.left=current} op=("*" | "/") right=MultiplicationDivision)?
		public Group getGroup_1() { return cGroup_1; }

		//{MultiplicationDivision.left=current}
		public Action getMultiplicationDivisionLeftAction_1_0() { return cMultiplicationDivisionLeftAction_1_0; }

		//op=("*" | "/")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"*" | "/"
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"*"
		public Keyword getOpAsteriskKeyword_1_1_0_0() { return cOpAsteriskKeyword_1_1_0_0; }

		//"/"
		public Keyword getOpSolidusKeyword_1_1_0_1() { return cOpSolidusKeyword_1_1_0_1; }

		//right=MultiplicationDivision
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//MultiplicationDivision
		public RuleCall getRightMultiplicationDivisionParserRuleCall_1_2_0() { return cRightMultiplicationDivisionParserRuleCall_1_2_0; }
	}

	public class BaseExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BaseExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cTrueKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Action cTrueExpressionAction_0_1 = (Action)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFalseKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cFalseExpressionAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Action cIfThenElseExpressionGuardAction_2_2_0 = (Action)cGroup_2_2.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_2_2_1 = (Keyword)cGroup_2_2.eContents().get(1);
		private final Assignment cThenBranchAssignment_2_2_2 = (Assignment)cGroup_2_2.eContents().get(2);
		private final RuleCall cThenBranchExpressionParserRuleCall_2_2_2_0 = (RuleCall)cThenBranchAssignment_2_2_2.eContents().get(0);
		private final Keyword cColonKeyword_2_2_3 = (Keyword)cGroup_2_2.eContents().get(3);
		private final Assignment cElseBranchAssignment_2_2_4 = (Assignment)cGroup_2_2.eContents().get(4);
		private final RuleCall cElseBranchExpressionParserRuleCall_2_2_4_0 = (RuleCall)cElseBranchAssignment_2_2_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final RuleCall cStringLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNumberLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cMinExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cMaxExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cFloorExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cCeilExpressionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cPowExpressionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cModExpressionParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cLogExpressionParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cFactorialExpressionParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cSinExpressionParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cCosExpressionParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cTanExpressionParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cASinExpressionParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cACosExpressionParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cATanExpressionParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cSelfExpressionParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cReferenceCallAccessParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		
		//BaseExpression returns Expression:
		//	"true" {TrueExpression} | "false" {FalseExpression} | "(" Expression ({IfThenElseExpression.guard=current} "?"
		//	thenBranch=Expression ":" elseBranch=Expression)? ")" | StringLiteral | NumberLiteral | MinExpression | MaxExpression
		//	| FloorExpression | CeilExpression | PowExpression | ModExpression | LogExpression | FactorialExpression |
		//	SinExpression | CosExpression | TanExpression | ASinExpression | ACosExpression | ATanExpression | SelfExpression |
		//	ReferenceCallAccess;
		public ParserRule getRule() { return rule; }

		//"true" {TrueExpression} | "false" {FalseExpression} | "(" Expression ({IfThenElseExpression.guard=current} "?"
		//thenBranch=Expression ":" elseBranch=Expression)? ")" | StringLiteral | NumberLiteral | MinExpression | MaxExpression |
		//FloorExpression | CeilExpression | PowExpression | ModExpression | LogExpression | FactorialExpression | SinExpression
		//| CosExpression | TanExpression | ASinExpression | ACosExpression | ATanExpression | SelfExpression |
		//ReferenceCallAccess
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true" {TrueExpression}
		public Group getGroup_0() { return cGroup_0; }

		//"true"
		public Keyword getTrueKeyword_0_0() { return cTrueKeyword_0_0; }

		//{TrueExpression}
		public Action getTrueExpressionAction_0_1() { return cTrueExpressionAction_0_1; }

		//"false" {FalseExpression}
		public Group getGroup_1() { return cGroup_1; }

		//"false"
		public Keyword getFalseKeyword_1_0() { return cFalseKeyword_1_0; }

		//{FalseExpression}
		public Action getFalseExpressionAction_1_1() { return cFalseExpressionAction_1_1; }

		//"(" Expression ({IfThenElseExpression.guard=current} "?" thenBranch=Expression ":" elseBranch=Expression)? ")"
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_2_1() { return cExpressionParserRuleCall_2_1; }

		//({IfThenElseExpression.guard=current} "?" thenBranch=Expression ":" elseBranch=Expression)?
		public Group getGroup_2_2() { return cGroup_2_2; }

		//{IfThenElseExpression.guard=current}
		public Action getIfThenElseExpressionGuardAction_2_2_0() { return cIfThenElseExpressionGuardAction_2_2_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_2_2_1() { return cQuestionMarkKeyword_2_2_1; }

		//thenBranch=Expression
		public Assignment getThenBranchAssignment_2_2_2() { return cThenBranchAssignment_2_2_2; }

		//Expression
		public RuleCall getThenBranchExpressionParserRuleCall_2_2_2_0() { return cThenBranchExpressionParserRuleCall_2_2_2_0; }

		//":"
		public Keyword getColonKeyword_2_2_3() { return cColonKeyword_2_2_3; }

		//elseBranch=Expression
		public Assignment getElseBranchAssignment_2_2_4() { return cElseBranchAssignment_2_2_4; }

		//Expression
		public RuleCall getElseBranchExpressionParserRuleCall_2_2_4_0() { return cElseBranchExpressionParserRuleCall_2_2_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_3() { return cStringLiteralParserRuleCall_3; }

		//NumberLiteral
		public RuleCall getNumberLiteralParserRuleCall_4() { return cNumberLiteralParserRuleCall_4; }

		//MinExpression
		public RuleCall getMinExpressionParserRuleCall_5() { return cMinExpressionParserRuleCall_5; }

		//MaxExpression
		public RuleCall getMaxExpressionParserRuleCall_6() { return cMaxExpressionParserRuleCall_6; }

		//FloorExpression
		public RuleCall getFloorExpressionParserRuleCall_7() { return cFloorExpressionParserRuleCall_7; }

		//CeilExpression
		public RuleCall getCeilExpressionParserRuleCall_8() { return cCeilExpressionParserRuleCall_8; }

		//PowExpression
		public RuleCall getPowExpressionParserRuleCall_9() { return cPowExpressionParserRuleCall_9; }

		//ModExpression
		public RuleCall getModExpressionParserRuleCall_10() { return cModExpressionParserRuleCall_10; }

		//LogExpression
		public RuleCall getLogExpressionParserRuleCall_11() { return cLogExpressionParserRuleCall_11; }

		//FactorialExpression
		public RuleCall getFactorialExpressionParserRuleCall_12() { return cFactorialExpressionParserRuleCall_12; }

		//SinExpression
		public RuleCall getSinExpressionParserRuleCall_13() { return cSinExpressionParserRuleCall_13; }

		//CosExpression
		public RuleCall getCosExpressionParserRuleCall_14() { return cCosExpressionParserRuleCall_14; }

		//TanExpression
		public RuleCall getTanExpressionParserRuleCall_15() { return cTanExpressionParserRuleCall_15; }

		//ASinExpression
		public RuleCall getASinExpressionParserRuleCall_16() { return cASinExpressionParserRuleCall_16; }

		//ACosExpression
		public RuleCall getACosExpressionParserRuleCall_17() { return cACosExpressionParserRuleCall_17; }

		//ATanExpression
		public RuleCall getATanExpressionParserRuleCall_18() { return cATanExpressionParserRuleCall_18; }

		//SelfExpression
		public RuleCall getSelfExpressionParserRuleCall_19() { return cSelfExpressionParserRuleCall_19; }

		//ReferenceCallAccess
		public RuleCall getReferenceCallAccessParserRuleCall_20() { return cReferenceCallAccessParserRuleCall_20; }
	}

	public class SelfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSelfExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSelfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		////CountExpression:
		////	'#' arg=BaseExpression
		////;
		//SelfExpression:
		//	{SelfExpression} "self";
		public ParserRule getRule() { return rule; }

		//{SelfExpression} "self"
		public Group getGroup() { return cGroup; }

		//{SelfExpression}
		public Action getSelfExpressionAction_0() { return cSelfExpressionAction_0; }

		//"self"
		public Keyword getSelfKeyword_1() { return cSelfKeyword_1; }
	}

	public class IdAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IdAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIdExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIdKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//IdAttribute:
		//	{IdExpression} "id";
		public ParserRule getRule() { return rule; }

		//{IdExpression} "id"
		public Group getGroup() { return cGroup; }

		//{IdExpression}
		public Action getIdExpressionAction_0() { return cIdExpressionAction_0; }

		//"id"
		public Keyword getIdKeyword_1() { return cIdKeyword_1; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class ReferenceCallAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReferenceCallAccess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cReferenceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cCallFunctionAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Assignment cArgsAssignment_1_0_2_0 = (Assignment)cGroup_1_0_2.eContents().get(0);
		private final RuleCall cArgsExpressionParserRuleCall_1_0_2_0_0 = (RuleCall)cArgsAssignment_1_0_2_0.eContents().get(0);
		private final Group cGroup_1_0_2_1 = (Group)cGroup_1_0_2.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_2_1_0 = (Keyword)cGroup_1_0_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_0_2_1_1 = (Assignment)cGroup_1_0_2_1.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_1_0_2_1_1_0 = (RuleCall)cArgsAssignment_1_0_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		
		//ReferenceCallAccess returns Expression:
		//	Reference => ({Call.function=current} "(" (args+=Expression ("," args+=Expression)*)? ")")?;
		public ParserRule getRule() { return rule; }

		//Reference => ({Call.function=current} "(" (args+=Expression ("," args+=Expression)*)? ")")?
		public Group getGroup() { return cGroup; }

		//Reference
		public RuleCall getReferenceParserRuleCall_0() { return cReferenceParserRuleCall_0; }

		//=> ({Call.function=current} "(" (args+=Expression ("," args+=Expression)*)? ")")?
		public Group getGroup_1() { return cGroup_1; }

		//{Call.function=current} "(" (args+=Expression ("," args+=Expression)*)? ")"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Call.function=current}
		public Action getCallFunctionAction_1_0_0() { return cCallFunctionAction_1_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0_1() { return cLeftParenthesisKeyword_1_0_1; }

		//(args+=Expression ("," args+=Expression)*)?
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//args+=Expression
		public Assignment getArgsAssignment_1_0_2_0() { return cArgsAssignment_1_0_2_0; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_1_0_2_0_0() { return cArgsExpressionParserRuleCall_1_0_2_0_0; }

		//("," args+=Expression)*
		public Group getGroup_1_0_2_1() { return cGroup_1_0_2_1; }

		//","
		public Keyword getCommaKeyword_1_0_2_1_0() { return cCommaKeyword_1_0_2_1_0; }

		//args+=Expression
		public Assignment getArgsAssignment_1_0_2_1_1() { return cArgsAssignment_1_0_2_1_1; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_1_0_2_1_1_0() { return cArgsExpressionParserRuleCall_1_0_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_0_3() { return cRightParenthesisKeyword_1_0_3; }
	}

	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reference");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRefReferenceableElementsCrossReference_0 = (CrossReference)cRefAssignment.eContents().get(0);
		private final RuleCall cRefReferenceableElementsIDTerminalRuleCall_0_1 = (RuleCall)cRefReferenceableElementsCrossReference_0.eContents().get(1);
		
		//Reference:
		//	ref=[ReferenceableElements];
		public ParserRule getRule() { return rule; }

		//ref=[ReferenceableElements]
		public Assignment getRefAssignment() { return cRefAssignment; }

		//[ReferenceableElements]
		public CrossReference getRefReferenceableElementsCrossReference_0() { return cRefReferenceableElementsCrossReference_0; }

		//ID
		public RuleCall getRefReferenceableElementsIDTerminalRuleCall_0_1() { return cRefReferenceableElementsIDTerminalRuleCall_0_1; }
	}

	public class NumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIntpartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIntpartINTTerminalRuleCall_0_0 = (RuleCall)cIntpartAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cIsDoubleAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cIsDoubleFullStopKeyword_1_0_0 = (Keyword)cIsDoubleAssignment_1_0.eContents().get(0);
		private final Assignment cDecimalAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDecimalINTTerminalRuleCall_1_1_0 = (RuleCall)cDecimalAssignment_1_1.eContents().get(0);
		
		//NumberLiteral hidden():
		//	intpart=INT (isDouble?="." decimal=INT)?;
		public ParserRule getRule() { return rule; }

		//intpart=INT (isDouble?="." decimal=INT)?
		public Group getGroup() { return cGroup; }

		//intpart=INT
		public Assignment getIntpartAssignment_0() { return cIntpartAssignment_0; }

		//INT
		public RuleCall getIntpartINTTerminalRuleCall_0_0() { return cIntpartINTTerminalRuleCall_0_0; }

		//(isDouble?="." decimal=INT)?
		public Group getGroup_1() { return cGroup_1; }

		//isDouble?="."
		public Assignment getIsDoubleAssignment_1_0() { return cIsDoubleAssignment_1_0; }

		//"."
		public Keyword getIsDoubleFullStopKeyword_1_0_0() { return cIsDoubleFullStopKeyword_1_0_0; }

		//decimal=INT
		public Assignment getDecimalAssignment_1_1() { return cDecimalAssignment_1_1; }

		//INT
		public RuleCall getDecimalINTTerminalRuleCall_1_1_0() { return cDecimalINTTerminalRuleCall_1_1_0; }
	}

	public class FactorialExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FactorialExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFactorialKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgExpressionParserRuleCall_2_0 = (RuleCall)cArgAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FactorialExpression:
		//	"factorial" "(" arg=Expression ")";
		public ParserRule getRule() { return rule; }

		//"factorial" "(" arg=Expression ")"
		public Group getGroup() { return cGroup; }

		//"factorial"
		public Keyword getFactorialKeyword_0() { return cFactorialKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//arg=Expression
		public Assignment getArgAssignment_2() { return cArgAssignment_2; }

		//Expression
		public RuleCall getArgExpressionParserRuleCall_2_0() { return cArgExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class LogExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgExpressionParserRuleCall_2_0 = (RuleCall)cArgAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LogExpression:
		//	"ln" "(" arg=Expression ")";
		public ParserRule getRule() { return rule; }

		//"ln" "(" arg=Expression ")"
		public Group getGroup() { return cGroup; }

		//"ln"
		public Keyword getLnKeyword_0() { return cLnKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//arg=Expression
		public Assignment getArgAssignment_2() { return cArgAssignment_2; }

		//Expression
		public RuleCall getArgExpressionParserRuleCall_2_0() { return cArgExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ModExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgExpressionParserRuleCall_2_0 = (RuleCall)cArgAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cModAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cModExpressionParserRuleCall_4_0 = (RuleCall)cModAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ModExpression:
		//	"mod" "(" arg=Expression "," mod=Expression ")";
		public ParserRule getRule() { return rule; }

		//"mod" "(" arg=Expression "," mod=Expression ")"
		public Group getGroup() { return cGroup; }

		//"mod"
		public Keyword getModKeyword_0() { return cModKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//arg=Expression
		public Assignment getArgAssignment_2() { return cArgAssignment_2; }

		//Expression
		public RuleCall getArgExpressionParserRuleCall_2_0() { return cArgExpressionParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//mod=Expression
		public Assignment getModAssignment_4() { return cModAssignment_4; }

		//Expression
		public RuleCall getModExpressionParserRuleCall_4_0() { return cModExpressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class PowExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PowExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBaseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBaseExpressionParserRuleCall_2_0 = (RuleCall)cBaseAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpExpressionParserRuleCall_4_0 = (RuleCall)cExpAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PowExpression:
		//	"pow" "(" base=Expression "," exp=Expression ")";
		public ParserRule getRule() { return rule; }

		//"pow" "(" base=Expression "," exp=Expression ")"
		public Group getGroup() { return cGroup; }

		//"pow"
		public Keyword getPowKeyword_0() { return cPowKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//base=Expression
		public Assignment getBaseAssignment_2() { return cBaseAssignment_2; }

		//Expression
		public RuleCall getBaseExpressionParserRuleCall_2_0() { return cBaseExpressionParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//exp=Expression
		public Assignment getExpAssignment_4() { return cExpAssignment_4; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_4_0() { return cExpExpressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class FloorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FloorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFloorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgExpressionParserRuleCall_2_0 = (RuleCall)cArgAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FloorExpression:
		//	"floor" "(" arg=Expression ")";
		public ParserRule getRule() { return rule; }

		//"floor" "(" arg=Expression ")"
		public Group getGroup() { return cGroup; }

		//"floor"
		public Keyword getFloorKeyword_0() { return cFloorKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//arg=Expression
		public Assignment getArgAssignment_2() { return cArgAssignment_2; }

		//Expression
		public RuleCall getArgExpressionParserRuleCall_2_0() { return cArgExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class CeilExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CeilExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCeilKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgExpressionParserRuleCall_2_0 = (RuleCall)cArgAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CeilExpression:
		//	"ceil" "(" arg=Expression ")";
		public ParserRule getRule() { return rule; }

		//"ceil" "(" arg=Expression ")"
		public Group getGroup() { return cGroup; }

		//"ceil"
		public Keyword getCeilKeyword_0() { return cCeilKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//arg=Expression
		public Assignment getArgAssignment_2() { return cArgAssignment_2; }

		//Expression
		public RuleCall getArgExpressionParserRuleCall_2_0() { return cArgExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class MinExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MinExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMinKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLeftAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftExpressionParserRuleCall_2_0 = (RuleCall)cLeftAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightExpressionParserRuleCall_4_0 = (RuleCall)cRightAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//MinExpression:
		//	"min" "(" left=Expression "," right=Expression ")";
		public ParserRule getRule() { return rule; }

		//"min" "(" left=Expression "," right=Expression ")"
		public Group getGroup() { return cGroup; }

		//"min"
		public Keyword getMinKeyword_0() { return cMinKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//left=Expression
		public Assignment getLeftAssignment_2() { return cLeftAssignment_2; }

		//Expression
		public RuleCall getLeftExpressionParserRuleCall_2_0() { return cLeftExpressionParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//right=Expression
		public Assignment getRightAssignment_4() { return cRightAssignment_4; }

		//Expression
		public RuleCall getRightExpressionParserRuleCall_4_0() { return cRightExpressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class MaxExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MaxExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cManKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLeftAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftExpressionParserRuleCall_2_0 = (RuleCall)cLeftAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightExpressionParserRuleCall_4_0 = (RuleCall)cRightAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//MaxExpression:
		//	"man" "(" left=Expression "," right=Expression ")";
		public ParserRule getRule() { return rule; }

		//"man" "(" left=Expression "," right=Expression ")"
		public Group getGroup() { return cGroup; }

		//"man"
		public Keyword getManKeyword_0() { return cManKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//left=Expression
		public Assignment getLeftAssignment_2() { return cLeftAssignment_2; }

		//Expression
		public RuleCall getLeftExpressionParserRuleCall_2_0() { return cLeftExpressionParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//right=Expression
		public Assignment getRightAssignment_4() { return cRightAssignment_4; }

		//Expression
		public RuleCall getRightExpressionParserRuleCall_4_0() { return cRightExpressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class SinExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SinExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSinKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgExpressionParserRuleCall_2_0 = (RuleCall)cArgAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SinExpression:
		//	"sin" "(" arg=Expression ")";
		public ParserRule getRule() { return rule; }

		//"sin" "(" arg=Expression ")"
		public Group getGroup() { return cGroup; }

		//"sin"
		public Keyword getSinKeyword_0() { return cSinKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//arg=Expression
		public Assignment getArgAssignment_2() { return cArgAssignment_2; }

		//Expression
		public RuleCall getArgExpressionParserRuleCall_2_0() { return cArgExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class CosExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CosExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCosKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgExpressionParserRuleCall_2_0 = (RuleCall)cArgAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CosExpression:
		//	"cos" "(" arg=Expression ")";
		public ParserRule getRule() { return rule; }

		//"cos" "(" arg=Expression ")"
		public Group getGroup() { return cGroup; }

		//"cos"
		public Keyword getCosKeyword_0() { return cCosKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//arg=Expression
		public Assignment getArgAssignment_2() { return cArgAssignment_2; }

		//Expression
		public RuleCall getArgExpressionParserRuleCall_2_0() { return cArgExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class TanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TanExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTanKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgExpressionParserRuleCall_2_0 = (RuleCall)cArgAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TanExpression:
		//	"tan" "(" arg=Expression ")";
		public ParserRule getRule() { return rule; }

		//"tan" "(" arg=Expression ")"
		public Group getGroup() { return cGroup; }

		//"tan"
		public Keyword getTanKeyword_0() { return cTanKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//arg=Expression
		public Assignment getArgAssignment_2() { return cArgAssignment_2; }

		//Expression
		public RuleCall getArgExpressionParserRuleCall_2_0() { return cArgExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ATanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ATanExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAtanKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgExpressionParserRuleCall_2_0 = (RuleCall)cArgAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ATanExpression:
		//	"atan" "(" arg=Expression ")";
		public ParserRule getRule() { return rule; }

		//"atan" "(" arg=Expression ")"
		public Group getGroup() { return cGroup; }

		//"atan"
		public Keyword getAtanKeyword_0() { return cAtanKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//arg=Expression
		public Assignment getArgAssignment_2() { return cArgAssignment_2; }

		//Expression
		public RuleCall getArgExpressionParserRuleCall_2_0() { return cArgExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ASinExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ASinExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsinKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgExpressionParserRuleCall_2_0 = (RuleCall)cArgAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ASinExpression:
		//	"asin" "(" arg=Expression ")";
		public ParserRule getRule() { return rule; }

		//"asin" "(" arg=Expression ")"
		public Group getGroup() { return cGroup; }

		//"asin"
		public Keyword getAsinKeyword_0() { return cAsinKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//arg=Expression
		public Assignment getArgAssignment_2() { return cArgAssignment_2; }

		//Expression
		public RuleCall getArgExpressionParserRuleCall_2_0() { return cArgExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ACosExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ACosExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAcosKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgExpressionParserRuleCall_2_0 = (RuleCall)cArgAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ACosExpression:
		//	"acos" "(" arg=Expression ")";
		public ParserRule getRule() { return rule; }

		//"acos" "(" arg=Expression ")"
		public Group getGroup() { return cGroup; }

		//"acos"
		public Keyword getAcosKeyword_0() { return cAcosKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//arg=Expression
		public Assignment getArgAssignment_2() { return cArgAssignment_2; }

		//Expression
		public RuleCall getArgExpressionParserRuleCall_2_0() { return cArgExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class SystemDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SystemDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsComponentExpressionParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cVerticalLineVerticalLineKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cElementsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cElementsComponentExpressionParserRuleCall_4_1_0 = (RuleCall)cElementsAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		/// *
		// * A system consists of a sequence of componenets:
		// * / SystemDeclaration:
		//	"system" name=ID "=" elements+=ComponentExpression ("||" elements+=ComponentExpression)* ";";
		public ParserRule getRule() { return rule; }

		//"system" name=ID "=" elements+=ComponentExpression ("||" elements+=ComponentExpression)* ";"
		public Group getGroup() { return cGroup; }

		//"system"
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//elements+=ComponentExpression
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }

		//ComponentExpression
		public RuleCall getElementsComponentExpressionParserRuleCall_3_0() { return cElementsComponentExpressionParserRuleCall_3_0; }

		//("||" elements+=ComponentExpression)*
		public Group getGroup_4() { return cGroup_4; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_4_0() { return cVerticalLineVerticalLineKeyword_4_0; }

		//elements+=ComponentExpression
		public Assignment getElementsAssignment_4_1() { return cElementsAssignment_4_1; }

		//ComponentExpression
		public RuleCall getElementsComponentExpressionParserRuleCall_4_1_0() { return cElementsComponentExpressionParserRuleCall_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	
	
	public class TypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSBOOLEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSBOOLBoolKeyword_0_0 = (Keyword)cSBOOLEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSINTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSINTIntKeyword_1_0 = (Keyword)cSINTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSDOUBLEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSDOUBLEDoubleKeyword_2_0 = (Keyword)cSDOUBLEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSSTRINGEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSSTRINGStringKeyword_3_0 = (Keyword)cSSTRINGEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Type:
		//	SBOOL="bool" | SINT="int" | SDOUBLE="double" | SSTRING="string";
		public EnumRule getRule() { return rule; }

		//SBOOL="bool" | SINT="int" | SDOUBLE="double" | SSTRING="string"
		public Alternatives getAlternatives() { return cAlternatives; }

		//SBOOL="bool"
		public EnumLiteralDeclaration getSBOOLEnumLiteralDeclaration_0() { return cSBOOLEnumLiteralDeclaration_0; }

		//"bool"
		public Keyword getSBOOLBoolKeyword_0_0() { return cSBOOLBoolKeyword_0_0; }

		//SINT="int"
		public EnumLiteralDeclaration getSINTEnumLiteralDeclaration_1() { return cSINTEnumLiteralDeclaration_1; }

		//"int"
		public Keyword getSINTIntKeyword_1_0() { return cSINTIntKeyword_1_0; }

		//SDOUBLE="double"
		public EnumLiteralDeclaration getSDOUBLEEnumLiteralDeclaration_2() { return cSDOUBLEEnumLiteralDeclaration_2; }

		//"double"
		public Keyword getSDOUBLEDoubleKeyword_2_0() { return cSDOUBLEDoubleKeyword_2_0; }

		//SSTRING="string"
		public EnumLiteralDeclaration getSSTRINGEnumLiteralDeclaration_3() { return cSSTRINGEnumLiteralDeclaration_3; }

		//"string"
		public Keyword getSSTRINGStringKeyword_3_0() { return cSSTRINGStringKeyword_3_0; }
	}

	public class RelationSymbolElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "RelationSymbol");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQEqualsSignKeyword_0_0 = (Keyword)cEQEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNEQEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNEQExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cNEQEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLESEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLESLessThanSignKeyword_2_0 = (Keyword)cLESEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLEQEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLEQLessThanSignEqualsSignKeyword_3_0 = (Keyword)cLEQEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGEQEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGEQGreaterThanSignEqualsSignKeyword_4_0 = (Keyword)cGEQEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cGTREnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cGTRGreaterThanSignKeyword_5_0 = (Keyword)cGTREnumLiteralDeclaration_5.eContents().get(0);
		
		//enum RelationSymbol:
		//	EQ="=" | NEQ="!=" | LES="<" | LEQ="<=" | GEQ=">=" | GTR=">";
		public EnumRule getRule() { return rule; }

		//EQ="=" | NEQ="!=" | LES="<" | LEQ="<=" | GEQ=">=" | GTR=">"
		public Alternatives getAlternatives() { return cAlternatives; }

		//EQ="="
		public EnumLiteralDeclaration getEQEnumLiteralDeclaration_0() { return cEQEnumLiteralDeclaration_0; }

		//"="
		public Keyword getEQEqualsSignKeyword_0_0() { return cEQEqualsSignKeyword_0_0; }

		//NEQ="!="
		public EnumLiteralDeclaration getNEQEnumLiteralDeclaration_1() { return cNEQEnumLiteralDeclaration_1; }

		//"!="
		public Keyword getNEQExclamationMarkEqualsSignKeyword_1_0() { return cNEQExclamationMarkEqualsSignKeyword_1_0; }

		//LES="<"
		public EnumLiteralDeclaration getLESEnumLiteralDeclaration_2() { return cLESEnumLiteralDeclaration_2; }

		//"<"
		public Keyword getLESLessThanSignKeyword_2_0() { return cLESLessThanSignKeyword_2_0; }

		//LEQ="<="
		public EnumLiteralDeclaration getLEQEnumLiteralDeclaration_3() { return cLEQEnumLiteralDeclaration_3; }

		//"<="
		public Keyword getLEQLessThanSignEqualsSignKeyword_3_0() { return cLEQLessThanSignEqualsSignKeyword_3_0; }

		//GEQ=">="
		public EnumLiteralDeclaration getGEQEnumLiteralDeclaration_4() { return cGEQEnumLiteralDeclaration_4; }

		//">="
		public Keyword getGEQGreaterThanSignEqualsSignKeyword_4_0() { return cGEQGreaterThanSignEqualsSignKeyword_4_0; }

		//GTR=">"
		public EnumLiteralDeclaration getGTREnumLiteralDeclaration_5() { return cGTREnumLiteralDeclaration_5; }

		//">"
		public Keyword getGTRGreaterThanSignKeyword_5_0() { return cGTRGreaterThanSignKeyword_5_0; }
	}
	
	private ModelElements pModel;
	private AttributeDeclarationElements pAttributeDeclaration;
	private ProjectionDeclarationElements pProjectionDeclaration;
	private ProjectionExpressionElements pProjectionExpression;
	private ConstantDeclarationElements pConstantDeclaration;
	private ComponentDeclarationElements pComponentDeclaration;
	private ComponentExpressionElements pComponentExpression;
	private ComponentReferenceElements pComponentReference;
	private ComponentConstantElements pComponentConstant;
	private ProcessExpressionElements pProcessExpression;
	private KnowledgeElements pKnowledge;
	private InterfaceElements pInterface;
	private IdAttributeDefinitionElements pIdAttributeDefinition;
	private AttributeInstantiationElements pAttributeInstantiation;
	private FunctionDeclarationElements pFunctionDeclaration;
	private ProcessDeclarationElements pProcessDeclaration;
	private VariableElements pVariable;
	private ReferenceableElementsElements pReferenceableElements;
	private CommandElements pCommand;
	private VariableDeclarationElements pVariableDeclaration;
	private ActionElements pAction;
	private ReplaceActionElements pReplaceAction;
	private GetActionElements pGetAction;
	private QueryActionElements pQueryAction;
	private PutActionElements pPutAction;
	private ExecActionElements pExecAction;
	private TupleElements pTuple;
	private TemplateElements pTemplate;
	private TemplateFieldElements pTemplateField;
	private AnyFormalFieldElements pAnyFormalField;
	private TypedFormalFieldElements pTypedFormalField;
	private FormalFieldElements pFormalField;
	private ActualFieldElements pActualField;
	private WhileElements pWhile;
	private IfThenElseElements pIfThenElse;
	private BlockElements pBlock;
	private TypeElements unknownRuleType;
	private ExpressionElements pExpression;
	private DisjunctionElements pDisjunction;
	private ConjunctionElements pConjunction;
	private NegationElements pNegation;
	private RelationElements pRelation;
	private SummationSubtractionElements pSummationSubtraction;
	private MultiplicationDivisionElements pMultiplicationDivision;
	private BaseExpressionElements pBaseExpression;
	private SelfExpressionElements pSelfExpression;
	private IdAttributeElements pIdAttribute;
	private StringLiteralElements pStringLiteral;
	private ReferenceCallAccessElements pReferenceCallAccess;
	private ReferenceElements pReference;
	private NumberLiteralElements pNumberLiteral;
	private FactorialExpressionElements pFactorialExpression;
	private LogExpressionElements pLogExpression;
	private ModExpressionElements pModExpression;
	private PowExpressionElements pPowExpression;
	private FloorExpressionElements pFloorExpression;
	private CeilExpressionElements pCeilExpression;
	private MinExpressionElements pMinExpression;
	private MaxExpressionElements pMaxExpression;
	private SinExpressionElements pSinExpression;
	private CosExpressionElements pCosExpression;
	private TanExpressionElements pTanExpression;
	private ATanExpressionElements pATanExpression;
	private ASinExpressionElements pASinExpression;
	private ACosExpressionElements pACosExpression;
	private RelationSymbolElements unknownRuleRelationSymbol;
	private SystemDeclarationElements pSystemDeclaration;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ScelLightGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.cmg.resp.xtext.scellight.ScelLight".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	(constants+=ConstantDeclaration | projections+=ProjectionDeclaration | functions+=FunctionDeclaration |
	//	attributes+=AttributeDeclaration | processes+=ProcessDeclaration | components+=ComponentDeclaration |
	//	systems+=SystemDeclaration)*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//AttributeDeclaration:
	//	"attribute" name=ID ":" type=Type ";";
	public AttributeDeclarationElements getAttributeDeclarationAccess() {
		return (pAttributeDeclaration != null) ? pAttributeDeclaration : (pAttributeDeclaration = new AttributeDeclarationElements());
	}
	
	public ParserRule getAttributeDeclarationRule() {
		return getAttributeDeclarationAccess().getRule();
	}

	/// * Attribute declaration:
	// * - name is the attribute name;
	// * - templates is a list containing the templates used to query data from the knowledge
	// * - exp is the expression associated to the attribute. This expression may contain variables
	// * that are bound by the templates.
	// * 
	// * To compute the value of an attribute first all the templates are queried from the local knowledge,
	// * then the expression is evaluated.
	// * / ProjectionDeclaration:
	//	"projection" name=ID "=" projection=ProjectionExpression ";";
	public ProjectionDeclarationElements getProjectionDeclarationAccess() {
		return (pProjectionDeclaration != null) ? pProjectionDeclaration : (pProjectionDeclaration = new ProjectionDeclarationElements());
	}
	
	public ParserRule getProjectionDeclarationRule() {
		return getProjectionDeclarationAccess().getRule();
	}

	//ProjectionExpression:
	//	("[" template=Template "]" "->" value=Expression ":")? default=Expression;
	public ProjectionExpressionElements getProjectionExpressionAccess() {
		return (pProjectionExpression != null) ? pProjectionExpression : (pProjectionExpression = new ProjectionExpressionElements());
	}
	
	public ParserRule getProjectionExpressionRule() {
		return getProjectionExpressionAccess().getRule();
	}

	//ConstantDeclaration:
	//	"const" type=Type name=ID "=" value=Expression ";";
	public ConstantDeclarationElements getConstantDeclarationAccess() {
		return (pConstantDeclaration != null) ? pConstantDeclaration : (pConstantDeclaration = new ConstantDeclarationElements());
	}
	
	public ParserRule getConstantDeclarationRule() {
		return getConstantDeclarationAccess().getRule();
	}

	/// *
	// * Declares the id associate to components in the system. 
	// * / ComponentDeclaration:
	//	"component" name=ID "(" (parameters+=Variable ("," parameters+=Variable)*)? ")" "=" component=ComponentExpression ";";
	public ComponentDeclarationElements getComponentDeclarationAccess() {
		return (pComponentDeclaration != null) ? pComponentDeclaration : (pComponentDeclaration = new ComponentDeclarationElements());
	}
	
	public ParserRule getComponentDeclarationRule() {
		return getComponentDeclarationAccess().getRule();
	}

	//ComponentExpression:
	//	ComponentConstant | ComponentReference;
	public ComponentExpressionElements getComponentExpressionAccess() {
		return (pComponentExpression != null) ? pComponentExpression : (pComponentExpression = new ComponentExpressionElements());
	}
	
	public ParserRule getComponentExpressionRule() {
		return getComponentExpressionAccess().getRule();
	}

	//ComponentReference:
	//	reference=[ComponentDeclaration] "(" (arguments+=Expression ("," arguments+=Expression)*)? ")";
	public ComponentReferenceElements getComponentReferenceAccess() {
		return (pComponentReference != null) ? pComponentReference : (pComponentReference = new ComponentReferenceElements());
	}
	
	public ParserRule getComponentReferenceRule() {
		return getComponentReferenceAccess().getRule();
	}

	//ComponentConstant:
	//	"{" interface=Interface "}" "[" (knowledge=Knowledge ",")? (processes+=ProcessExpression ("|"
	//	processes+=ProcessExpression)*) "]";
	public ComponentConstantElements getComponentConstantAccess() {
		return (pComponentConstant != null) ? pComponentConstant : (pComponentConstant = new ComponentConstantElements());
	}
	
	public ParserRule getComponentConstantRule() {
		return getComponentConstantAccess().getRule();
	}

	//ProcessExpression:
	//	{ProcessReference} reference=[ProcessDeclaration] "(" (arguments+=Expression ("," arguments+=Expression)*)? ")" |
	//	{EmptyProcess} "nil";
	public ProcessExpressionElements getProcessExpressionAccess() {
		return (pProcessExpression != null) ? pProcessExpression : (pProcessExpression = new ProcessExpressionElements());
	}
	
	public ParserRule getProcessExpressionRule() {
		return getProcessExpressionAccess().getRule();
	}

	//Knowledge:
	//	"<" tuples+=Tuple ">" ("|" "<" tuples+=Tuple ">")*;
	public KnowledgeElements getKnowledgeAccess() {
		return (pKnowledge != null) ? pKnowledge : (pKnowledge = new KnowledgeElements());
	}
	
	public ParserRule getKnowledgeRule() {
		return getKnowledgeAccess().getRule();
	}

	//Interface:
	//	attributes+=(IdAttributeDefinition | AttributeInstantiation) ("," attributes+=(IdAttributeDefinition |
	//	AttributeInstantiation))*;
	public InterfaceElements getInterfaceAccess() {
		return (pInterface != null) ? pInterface : (pInterface = new InterfaceElements());
	}
	
	public ParserRule getInterfaceRule() {
		return getInterfaceAccess().getRule();
	}

	//IdAttributeDefinition:
	//	"id" "=" componentId=STRING;
	public IdAttributeDefinitionElements getIdAttributeDefinitionAccess() {
		return (pIdAttributeDefinition != null) ? pIdAttributeDefinition : (pIdAttributeDefinition = new IdAttributeDefinitionElements());
	}
	
	public ParserRule getIdAttributeDefinitionRule() {
		return getIdAttributeDefinitionAccess().getRule();
	}

	//AttributeInstantiation:
	//	attribute=[AttributeDeclaration] "=" value=Expression;
	public AttributeInstantiationElements getAttributeInstantiationAccess() {
		return (pAttributeInstantiation != null) ? pAttributeInstantiation : (pAttributeInstantiation = new AttributeInstantiationElements());
	}
	
	public ParserRule getAttributeInstantiationRule() {
		return getAttributeInstantiationAccess().getRule();
	}

	//FunctionDeclaration:
	//	"function" returnType=Type name=ID "(" (parameters+=Variable ("," parameters+=Variable)*)? ")" "=" body=Expression
	//	";";
	public FunctionDeclarationElements getFunctionDeclarationAccess() {
		return (pFunctionDeclaration != null) ? pFunctionDeclaration : (pFunctionDeclaration = new FunctionDeclarationElements());
	}
	
	public ParserRule getFunctionDeclarationRule() {
		return getFunctionDeclarationAccess().getRule();
	}

	//ProcessDeclaration:
	//	"process" name=ID "(" (parameters+=Variable ("," parameters+=Variable)*)? ")" "{" body=Block "}";
	public ProcessDeclarationElements getProcessDeclarationAccess() {
		return (pProcessDeclaration != null) ? pProcessDeclaration : (pProcessDeclaration = new ProcessDeclarationElements());
	}
	
	public ParserRule getProcessDeclarationRule() {
		return getProcessDeclarationAccess().getRule();
	}

	//Variable:
	//	type=Type name=ID;
	public VariableElements getVariableAccess() {
		return (pVariable != null) ? pVariable : (pVariable = new VariableElements());
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//ReferenceableElements:
	//	Variable | ConstantDeclaration | FunctionDeclaration | AttributeDeclaration | ProjectionDeclaration;
	public ReferenceableElementsElements getReferenceableElementsAccess() {
		return (pReferenceableElements != null) ? pReferenceableElements : (pReferenceableElements = new ReferenceableElementsElements());
	}
	
	public ParserRule getReferenceableElementsRule() {
		return getReferenceableElementsAccess().getRule();
	}

	//Command:
	//	Action | IfThenElse | While | VariableDeclaration | ProcessExpression | "{" Block "}";
	public CommandElements getCommandAccess() {
		return (pCommand != null) ? pCommand : (pCommand = new CommandElements());
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}

	//VariableDeclaration:
	//	declaredVariable=Variable ("=" init=Expression)? ";";
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return (pVariableDeclaration != null) ? pVariableDeclaration : (pVariableDeclaration = new VariableDeclarationElements());
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//Action:
	//	PutAction | GetAction | QueryAction | ReplaceAction;
	public ActionElements getActionAccess() {
		return (pAction != null) ? pAction : (pAction = new ActionElements());
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//ReplaceAction:
	//	"replace" "[" template=Template "->" tuple=Tuple "]" ";";
	public ReplaceActionElements getReplaceActionAccess() {
		return (pReplaceAction != null) ? pReplaceAction : (pReplaceAction = new ReplaceActionElements());
	}
	
	public ParserRule getReplaceActionRule() {
		return getReplaceActionAccess().getRule();
	}

	//GetAction:
	//	"get" "(" template=Template ")" "@" target=Expression ";";
	public GetActionElements getGetActionAccess() {
		return (pGetAction != null) ? pGetAction : (pGetAction = new GetActionElements());
	}
	
	public ParserRule getGetActionRule() {
		return getGetActionAccess().getRule();
	}

	//QueryAction:
	//	"query" "(" template=Template ")" "@" target=Expression ";";
	public QueryActionElements getQueryActionAccess() {
		return (pQueryAction != null) ? pQueryAction : (pQueryAction = new QueryActionElements());
	}
	
	public ParserRule getQueryActionRule() {
		return getQueryActionAccess().getRule();
	}

	//PutAction:
	//	"put" "(" tuple=Tuple ")" "@" target=Expression ";";
	public PutActionElements getPutActionAccess() {
		return (pPutAction != null) ? pPutAction : (pPutAction = new PutActionElements());
	}
	
	public ParserRule getPutActionRule() {
		return getPutActionAccess().getRule();
	}

	//ExecAction:
	//	"exec" "(" arg=Expression ")" ";";
	public ExecActionElements getExecActionAccess() {
		return (pExecAction != null) ? pExecAction : (pExecAction = new ExecActionElements());
	}
	
	public ParserRule getExecActionRule() {
		return getExecActionAccess().getRule();
	}

	//Tuple:
	//	fields+=Expression ("," fields+=Expression)*;
	public TupleElements getTupleAccess() {
		return (pTuple != null) ? pTuple : (pTuple = new TupleElements());
	}
	
	public ParserRule getTupleRule() {
		return getTupleAccess().getRule();
	}

	//Template:
	//	fields+=TemplateField ("," fields+=TemplateField)*;
	public TemplateElements getTemplateAccess() {
		return (pTemplate != null) ? pTemplate : (pTemplate = new TemplateElements());
	}
	
	public ParserRule getTemplateRule() {
		return getTemplateAccess().getRule();
	}

	//TemplateField:
	//	AnyFormalField | FormalField | ActualField | TypedFormalField;
	public TemplateFieldElements getTemplateFieldAccess() {
		return (pTemplateField != null) ? pTemplateField : (pTemplateField = new TemplateFieldElements());
	}
	
	public ParserRule getTemplateFieldRule() {
		return getTemplateFieldAccess().getRule();
	}

	//AnyFormalField:
	//	{AnyFormalField} "*";
	public AnyFormalFieldElements getAnyFormalFieldAccess() {
		return (pAnyFormalField != null) ? pAnyFormalField : (pAnyFormalField = new AnyFormalFieldElements());
	}
	
	public ParserRule getAnyFormalFieldRule() {
		return getAnyFormalFieldAccess().getRule();
	}

	//TypedFormalField:
	//	"(" type=Type ")";
	public TypedFormalFieldElements getTypedFormalFieldAccess() {
		return (pTypedFormalField != null) ? pTypedFormalField : (pTypedFormalField = new TypedFormalFieldElements());
	}
	
	public ParserRule getTypedFormalFieldRule() {
		return getTypedFormalFieldAccess().getRule();
	}

	//FormalField:
	//	"?" ({StandardFormalField} reference=[Variable] | {FormalFieldWithDeclaration} "[" variable=Variable "]");
	public FormalFieldElements getFormalFieldAccess() {
		return (pFormalField != null) ? pFormalField : (pFormalField = new FormalFieldElements());
	}
	
	public ParserRule getFormalFieldRule() {
		return getFormalFieldAccess().getRule();
	}

	//ActualField:
	//	value=Expression;
	public ActualFieldElements getActualFieldAccess() {
		return (pActualField != null) ? pActualField : (pActualField = new ActualFieldElements());
	}
	
	public ParserRule getActualFieldRule() {
		return getActualFieldAccess().getRule();
	}

	//While:
	//	"while" "(" guard=Expression ")" body=Command;
	public WhileElements getWhileAccess() {
		return (pWhile != null) ? pWhile : (pWhile = new WhileElements());
	}
	
	public ParserRule getWhileRule() {
		return getWhileAccess().getRule();
	}

	/// * 
	//For:
	//	'for' name=ID 'from' init=Expression  'to' end=Expression body=Command
	//;
	// * / IfThenElse:
	//	"if" "(" guard=Expression ")" thenBranch=Command ("else" elseBranch=Command)?;
	public IfThenElseElements getIfThenElseAccess() {
		return (pIfThenElse != null) ? pIfThenElse : (pIfThenElse = new IfThenElseElements());
	}
	
	public ParserRule getIfThenElseRule() {
		return getIfThenElseAccess().getRule();
	}

	//Block:
	//	{Block} commands+=Command*;
	public BlockElements getBlockAccess() {
		return (pBlock != null) ? pBlock : (pBlock = new BlockElements());
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	//enum Type:
	//	SBOOL="bool" | SINT="int" | SDOUBLE="double" | SSTRING="string";
	public TypeElements getTypeAccess() {
		return (unknownRuleType != null) ? unknownRuleType : (unknownRuleType = new TypeElements());
	}
	
	public EnumRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Expression:
	//	Disjunction;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Disjunction returns Expression:
	//	Conjunction ({Disjunction.left=current} "|" right=Disjunction)?;
	public DisjunctionElements getDisjunctionAccess() {
		return (pDisjunction != null) ? pDisjunction : (pDisjunction = new DisjunctionElements());
	}
	
	public ParserRule getDisjunctionRule() {
		return getDisjunctionAccess().getRule();
	}

	//Conjunction returns Expression:
	//	Negation ({Conjunction.left=current} "&" right=Conjunction)?;
	public ConjunctionElements getConjunctionAccess() {
		return (pConjunction != null) ? pConjunction : (pConjunction = new ConjunctionElements());
	}
	
	public ParserRule getConjunctionRule() {
		return getConjunctionAccess().getRule();
	}

	//Negation returns Expression:
	//	"!" {Negation} arg=Relation | Relation;
	public NegationElements getNegationAccess() {
		return (pNegation != null) ? pNegation : (pNegation = new NegationElements());
	}
	
	public ParserRule getNegationRule() {
		return getNegationAccess().getRule();
	}

	//Relation returns Expression:
	//	SummationSubtraction ({Relation.left=current} rel=RelationSymbol right=Relation)?;
	public RelationElements getRelationAccess() {
		return (pRelation != null) ? pRelation : (pRelation = new RelationElements());
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}

	//SummationSubtraction returns Expression:
	//	MultiplicationDivision ({SummationSubtraction.left=current} op=("+" | "-") right=SummationSubtraction)?;
	public SummationSubtractionElements getSummationSubtractionAccess() {
		return (pSummationSubtraction != null) ? pSummationSubtraction : (pSummationSubtraction = new SummationSubtractionElements());
	}
	
	public ParserRule getSummationSubtractionRule() {
		return getSummationSubtractionAccess().getRule();
	}

	//MultiplicationDivision returns Expression:
	//	BaseExpression ({MultiplicationDivision.left=current} op=("*" | "/") right=MultiplicationDivision)?;
	public MultiplicationDivisionElements getMultiplicationDivisionAccess() {
		return (pMultiplicationDivision != null) ? pMultiplicationDivision : (pMultiplicationDivision = new MultiplicationDivisionElements());
	}
	
	public ParserRule getMultiplicationDivisionRule() {
		return getMultiplicationDivisionAccess().getRule();
	}

	//BaseExpression returns Expression:
	//	"true" {TrueExpression} | "false" {FalseExpression} | "(" Expression ({IfThenElseExpression.guard=current} "?"
	//	thenBranch=Expression ":" elseBranch=Expression)? ")" | StringLiteral | NumberLiteral | MinExpression | MaxExpression
	//	| FloorExpression | CeilExpression | PowExpression | ModExpression | LogExpression | FactorialExpression |
	//	SinExpression | CosExpression | TanExpression | ASinExpression | ACosExpression | ATanExpression | SelfExpression |
	//	ReferenceCallAccess;
	public BaseExpressionElements getBaseExpressionAccess() {
		return (pBaseExpression != null) ? pBaseExpression : (pBaseExpression = new BaseExpressionElements());
	}
	
	public ParserRule getBaseExpressionRule() {
		return getBaseExpressionAccess().getRule();
	}

	////CountExpression:
	////	'#' arg=BaseExpression
	////;
	//SelfExpression:
	//	{SelfExpression} "self";
	public SelfExpressionElements getSelfExpressionAccess() {
		return (pSelfExpression != null) ? pSelfExpression : (pSelfExpression = new SelfExpressionElements());
	}
	
	public ParserRule getSelfExpressionRule() {
		return getSelfExpressionAccess().getRule();
	}

	//IdAttribute:
	//	{IdExpression} "id";
	public IdAttributeElements getIdAttributeAccess() {
		return (pIdAttribute != null) ? pIdAttribute : (pIdAttribute = new IdAttributeElements());
	}
	
	public ParserRule getIdAttributeRule() {
		return getIdAttributeAccess().getRule();
	}

	//StringLiteral:
	//	value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return (pStringLiteral != null) ? pStringLiteral : (pStringLiteral = new StringLiteralElements());
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//ReferenceCallAccess returns Expression:
	//	Reference => ({Call.function=current} "(" (args+=Expression ("," args+=Expression)*)? ")")?;
	public ReferenceCallAccessElements getReferenceCallAccessAccess() {
		return (pReferenceCallAccess != null) ? pReferenceCallAccess : (pReferenceCallAccess = new ReferenceCallAccessElements());
	}
	
	public ParserRule getReferenceCallAccessRule() {
		return getReferenceCallAccessAccess().getRule();
	}

	//Reference:
	//	ref=[ReferenceableElements];
	public ReferenceElements getReferenceAccess() {
		return (pReference != null) ? pReference : (pReference = new ReferenceElements());
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}

	//NumberLiteral hidden():
	//	intpart=INT (isDouble?="." decimal=INT)?;
	public NumberLiteralElements getNumberLiteralAccess() {
		return (pNumberLiteral != null) ? pNumberLiteral : (pNumberLiteral = new NumberLiteralElements());
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}

	//FactorialExpression:
	//	"factorial" "(" arg=Expression ")";
	public FactorialExpressionElements getFactorialExpressionAccess() {
		return (pFactorialExpression != null) ? pFactorialExpression : (pFactorialExpression = new FactorialExpressionElements());
	}
	
	public ParserRule getFactorialExpressionRule() {
		return getFactorialExpressionAccess().getRule();
	}

	//LogExpression:
	//	"ln" "(" arg=Expression ")";
	public LogExpressionElements getLogExpressionAccess() {
		return (pLogExpression != null) ? pLogExpression : (pLogExpression = new LogExpressionElements());
	}
	
	public ParserRule getLogExpressionRule() {
		return getLogExpressionAccess().getRule();
	}

	//ModExpression:
	//	"mod" "(" arg=Expression "," mod=Expression ")";
	public ModExpressionElements getModExpressionAccess() {
		return (pModExpression != null) ? pModExpression : (pModExpression = new ModExpressionElements());
	}
	
	public ParserRule getModExpressionRule() {
		return getModExpressionAccess().getRule();
	}

	//PowExpression:
	//	"pow" "(" base=Expression "," exp=Expression ")";
	public PowExpressionElements getPowExpressionAccess() {
		return (pPowExpression != null) ? pPowExpression : (pPowExpression = new PowExpressionElements());
	}
	
	public ParserRule getPowExpressionRule() {
		return getPowExpressionAccess().getRule();
	}

	//FloorExpression:
	//	"floor" "(" arg=Expression ")";
	public FloorExpressionElements getFloorExpressionAccess() {
		return (pFloorExpression != null) ? pFloorExpression : (pFloorExpression = new FloorExpressionElements());
	}
	
	public ParserRule getFloorExpressionRule() {
		return getFloorExpressionAccess().getRule();
	}

	//CeilExpression:
	//	"ceil" "(" arg=Expression ")";
	public CeilExpressionElements getCeilExpressionAccess() {
		return (pCeilExpression != null) ? pCeilExpression : (pCeilExpression = new CeilExpressionElements());
	}
	
	public ParserRule getCeilExpressionRule() {
		return getCeilExpressionAccess().getRule();
	}

	//MinExpression:
	//	"min" "(" left=Expression "," right=Expression ")";
	public MinExpressionElements getMinExpressionAccess() {
		return (pMinExpression != null) ? pMinExpression : (pMinExpression = new MinExpressionElements());
	}
	
	public ParserRule getMinExpressionRule() {
		return getMinExpressionAccess().getRule();
	}

	//MaxExpression:
	//	"man" "(" left=Expression "," right=Expression ")";
	public MaxExpressionElements getMaxExpressionAccess() {
		return (pMaxExpression != null) ? pMaxExpression : (pMaxExpression = new MaxExpressionElements());
	}
	
	public ParserRule getMaxExpressionRule() {
		return getMaxExpressionAccess().getRule();
	}

	//SinExpression:
	//	"sin" "(" arg=Expression ")";
	public SinExpressionElements getSinExpressionAccess() {
		return (pSinExpression != null) ? pSinExpression : (pSinExpression = new SinExpressionElements());
	}
	
	public ParserRule getSinExpressionRule() {
		return getSinExpressionAccess().getRule();
	}

	//CosExpression:
	//	"cos" "(" arg=Expression ")";
	public CosExpressionElements getCosExpressionAccess() {
		return (pCosExpression != null) ? pCosExpression : (pCosExpression = new CosExpressionElements());
	}
	
	public ParserRule getCosExpressionRule() {
		return getCosExpressionAccess().getRule();
	}

	//TanExpression:
	//	"tan" "(" arg=Expression ")";
	public TanExpressionElements getTanExpressionAccess() {
		return (pTanExpression != null) ? pTanExpression : (pTanExpression = new TanExpressionElements());
	}
	
	public ParserRule getTanExpressionRule() {
		return getTanExpressionAccess().getRule();
	}

	//ATanExpression:
	//	"atan" "(" arg=Expression ")";
	public ATanExpressionElements getATanExpressionAccess() {
		return (pATanExpression != null) ? pATanExpression : (pATanExpression = new ATanExpressionElements());
	}
	
	public ParserRule getATanExpressionRule() {
		return getATanExpressionAccess().getRule();
	}

	//ASinExpression:
	//	"asin" "(" arg=Expression ")";
	public ASinExpressionElements getASinExpressionAccess() {
		return (pASinExpression != null) ? pASinExpression : (pASinExpression = new ASinExpressionElements());
	}
	
	public ParserRule getASinExpressionRule() {
		return getASinExpressionAccess().getRule();
	}

	//ACosExpression:
	//	"acos" "(" arg=Expression ")";
	public ACosExpressionElements getACosExpressionAccess() {
		return (pACosExpression != null) ? pACosExpression : (pACosExpression = new ACosExpressionElements());
	}
	
	public ParserRule getACosExpressionRule() {
		return getACosExpressionAccess().getRule();
	}

	//enum RelationSymbol:
	//	EQ="=" | NEQ="!=" | LES="<" | LEQ="<=" | GEQ=">=" | GTR=">";
	public RelationSymbolElements getRelationSymbolAccess() {
		return (unknownRuleRelationSymbol != null) ? unknownRuleRelationSymbol : (unknownRuleRelationSymbol = new RelationSymbolElements());
	}
	
	public EnumRule getRelationSymbolRule() {
		return getRelationSymbolAccess().getRule();
	}

	/// *
	// * A system consists of a sequence of componenets:
	// * / SystemDeclaration:
	//	"system" name=ID "=" elements+=ComponentExpression ("||" elements+=ComponentExpression)* ";";
	public SystemDeclarationElements getSystemDeclarationAccess() {
		return (pSystemDeclaration != null) ? pSystemDeclaration : (pSystemDeclaration = new SystemDeclarationElements());
	}
	
	public ParserRule getSystemDeclarationRule() {
		return getSystemDeclarationAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
