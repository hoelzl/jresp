/*
* generated by Xtext
*/
grammar InternalScelLight;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.cmg.resp.xtext.scellight.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.cmg.resp.xtext.scellight.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.cmg.resp.xtext.scellight.services.ScelLightGrammarAccess;

}

@parser::members {

 	private ScelLightGrammarAccess grammarAccess;
 	
    public InternalScelLightParser(TokenStream input, ScelLightGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected ScelLightGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getConstantsConstantDeclarationParserRuleCall_0_0()); 
	    }
		lv_constants_0_0=ruleConstantDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"constants",
        		lv_constants_0_0, 
        		"ConstantDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getProjectionsProjectionDeclarationParserRuleCall_1_0()); 
	    }
		lv_projections_1_0=ruleProjectionDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"projections",
        		lv_projections_1_0, 
        		"ProjectionDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getFunctionsFunctionDeclarationParserRuleCall_2_0()); 
	    }
		lv_functions_2_0=ruleFunctionDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"functions",
        		lv_functions_2_0, 
        		"FunctionDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getAttributesAttributeDeclarationParserRuleCall_3_0()); 
	    }
		lv_attributes_3_0=ruleAttributeDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_3_0, 
        		"AttributeDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getProcessesProcessDeclarationParserRuleCall_4_0()); 
	    }
		lv_processes_4_0=ruleProcessDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"processes",
        		lv_processes_4_0, 
        		"ProcessDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getComponentsComponentDeclarationParserRuleCall_5_0()); 
	    }
		lv_components_5_0=ruleComponentDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"components",
        		lv_components_5_0, 
        		"ComponentDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getSystemsSystemDeclarationParserRuleCall_6_0()); 
	    }
		lv_systems_6_0=ruleSystemDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"systems",
        		lv_systems_6_0, 
        		"SystemDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*
;





// Entry rule entryRuleAttributeDeclaration
entryRuleAttributeDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeDeclarationRule()); }
	 iv_ruleAttributeDeclaration=ruleAttributeDeclaration 
	 { $current=$iv_ruleAttributeDeclaration.current; } 
	 EOF 
;

// Rule AttributeDeclaration
ruleAttributeDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='attribute' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAttributeDeclarationAccess().getAttributeKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getAttributeDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAttributeDeclarationAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeDeclarationAccess().getTypeTypeEnumRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAttributeDeclarationAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleProjectionDeclaration
entryRuleProjectionDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProjectionDeclarationRule()); }
	 iv_ruleProjectionDeclaration=ruleProjectionDeclaration 
	 { $current=$iv_ruleProjectionDeclaration.current; } 
	 EOF 
;

// Rule ProjectionDeclaration
ruleProjectionDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='projection' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProjectionDeclarationAccess().getProjectionKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getProjectionDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProjectionDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getProjectionDeclarationAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProjectionDeclarationAccess().getProjectionProjectionExpressionParserRuleCall_3_0()); 
	    }
		lv_projection_3_0=ruleProjectionExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProjectionDeclarationRule());
	        }
       		set(
       			$current, 
       			"projection",
        		lv_projection_3_0, 
        		"ProjectionExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getProjectionDeclarationAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleProjectionExpression
entryRuleProjectionExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProjectionExpressionRule()); }
	 iv_ruleProjectionExpression=ruleProjectionExpression 
	 { $current=$iv_ruleProjectionExpression.current; } 
	 EOF 
;

// Rule ProjectionExpression
ruleProjectionExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProjectionExpressionAccess().getLeftSquareBracketKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProjectionExpressionAccess().getTemplateTemplateParserRuleCall_0_1_0()); 
	    }
		lv_template_1_0=ruleTemplate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProjectionExpressionRule());
	        }
       		set(
       			$current, 
       			"template",
        		lv_template_1_0, 
        		"Template");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getProjectionExpressionAccess().getRightSquareBracketKeyword_0_2());
    }
	otherlv_3='->' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getProjectionExpressionAccess().getHyphenMinusGreaterThanSignKeyword_0_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProjectionExpressionAccess().getValueExpressionParserRuleCall_0_4_0()); 
	    }
		lv_value_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProjectionExpressionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=':' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getProjectionExpressionAccess().getColonKeyword_0_5());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getProjectionExpressionAccess().getDefaultExpressionParserRuleCall_1_0()); 
	    }
		lv_default_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProjectionExpressionRule());
	        }
       		set(
       			$current, 
       			"default",
        		lv_default_6_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleConstantDeclaration
entryRuleConstantDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantDeclarationRule()); }
	 iv_ruleConstantDeclaration=ruleConstantDeclaration 
	 { $current=$iv_ruleConstantDeclaration.current; } 
	 EOF 
;

// Rule ConstantDeclaration
ruleConstantDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='const' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConstantDeclarationAccess().getConstKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantDeclarationAccess().getTypeTypeEnumRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getConstantDeclarationAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConstantDeclarationAccess().getEqualsSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantDeclarationAccess().getValueExpressionParserRuleCall_4_0()); 
	    }
		lv_value_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantDeclarationRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getConstantDeclarationAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleComponentDeclaration
entryRuleComponentDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComponentDeclarationRule()); }
	 iv_ruleComponentDeclaration=ruleComponentDeclaration 
	 { $current=$iv_ruleComponentDeclaration.current; } 
	 EOF 
;

// Rule ComponentDeclaration
ruleComponentDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='component' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getComponentDeclarationAccess().getComponentKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getComponentDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComponentDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getComponentDeclarationAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getComponentDeclarationAccess().getParametersVariableParserRuleCall_3_0_0()); 
	    }
		lv_parameters_3_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentDeclarationRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_3_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getComponentDeclarationAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentDeclarationAccess().getParametersVariableParserRuleCall_3_1_1_0()); 
	    }
		lv_parameters_5_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentDeclarationRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_5_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getComponentDeclarationAccess().getRightParenthesisKeyword_4());
    }
	otherlv_7='=' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getComponentDeclarationAccess().getEqualsSignKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentDeclarationAccess().getComponentComponentExpressionParserRuleCall_6_0()); 
	    }
		lv_component_8_0=ruleComponentExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentDeclarationRule());
	        }
       		set(
       			$current, 
       			"component",
        		lv_component_8_0, 
        		"ComponentExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9=';' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getComponentDeclarationAccess().getSemicolonKeyword_7());
    }
)
;





// Entry rule entryRuleComponentExpression
entryRuleComponentExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComponentExpressionRule()); }
	 iv_ruleComponentExpression=ruleComponentExpression 
	 { $current=$iv_ruleComponentExpression.current; } 
	 EOF 
;

// Rule ComponentExpression
ruleComponentExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getComponentExpressionAccess().getComponentConstantParserRuleCall_0()); 
    }
    this_ComponentConstant_0=ruleComponentConstant
    { 
        $current = $this_ComponentConstant_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getComponentExpressionAccess().getComponentReferenceParserRuleCall_1()); 
    }
    this_ComponentReference_1=ruleComponentReference
    { 
        $current = $this_ComponentReference_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleComponentReference
entryRuleComponentReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComponentReferenceRule()); }
	 iv_ruleComponentReference=ruleComponentReference 
	 { $current=$iv_ruleComponentReference.current; } 
	 EOF 
;

// Rule ComponentReference
ruleComponentReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getComponentReferenceRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getComponentReferenceAccess().getReferenceComponentDeclarationCrossReference_0_0()); 
	}

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getComponentReferenceAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getComponentReferenceAccess().getArgumentsExpressionParserRuleCall_2_0_0()); 
	    }
		lv_arguments_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentReferenceRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getComponentReferenceAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentReferenceAccess().getArgumentsExpressionParserRuleCall_2_1_1_0()); 
	    }
		lv_arguments_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentReferenceRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getComponentReferenceAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleComponentConstant
entryRuleComponentConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComponentConstantRule()); }
	 iv_ruleComponentConstant=ruleComponentConstant 
	 { $current=$iv_ruleComponentConstant.current; } 
	 EOF 
;

// Rule ComponentConstant
ruleComponentConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getComponentConstantAccess().getLeftCurlyBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentConstantAccess().getInterfaceInterfaceParserRuleCall_1_0()); 
	    }
		lv_interface_1_0=ruleInterface		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentConstantRule());
	        }
       		set(
       			$current, 
       			"interface",
        		lv_interface_1_0, 
        		"Interface");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='}' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getComponentConstantAccess().getRightCurlyBracketKeyword_2());
    }
	otherlv_3='[' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getComponentConstantAccess().getLeftSquareBracketKeyword_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getComponentConstantAccess().getKnowledgeKnowledgeParserRuleCall_4_0_0()); 
	    }
		lv_knowledge_4_0=ruleKnowledge		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentConstantRule());
	        }
       		set(
       			$current, 
       			"knowledge",
        		lv_knowledge_4_0, 
        		"Knowledge");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getComponentConstantAccess().getCommaKeyword_4_1());
    }
)?((
(
		{ 
	        newCompositeNode(grammarAccess.getComponentConstantAccess().getProcessesProcessExpressionParserRuleCall_5_0_0()); 
	    }
		lv_processes_6_0=ruleProcessExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentConstantRule());
	        }
       		add(
       			$current, 
       			"processes",
        		lv_processes_6_0, 
        		"ProcessExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7='|' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getComponentConstantAccess().getVerticalLineKeyword_5_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentConstantAccess().getProcessesProcessExpressionParserRuleCall_5_1_1_0()); 
	    }
		lv_processes_8_0=ruleProcessExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentConstantRule());
	        }
       		add(
       			$current, 
       			"processes",
        		lv_processes_8_0, 
        		"ProcessExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)	otherlv_9=']' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getComponentConstantAccess().getRightSquareBracketKeyword_6());
    }
)
;





// Entry rule entryRuleProcessExpression
entryRuleProcessExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProcessExpressionRule()); }
	 iv_ruleProcessExpression=ruleProcessExpression 
	 { $current=$iv_ruleProcessExpression.current; } 
	 EOF 
;

// Rule ProcessExpression
ruleProcessExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getProcessExpressionAccess().getProcessReferenceAction_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcessExpressionRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getProcessExpressionAccess().getReferenceProcessDeclarationCrossReference_0_1_0()); 
	}

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getProcessExpressionAccess().getLeftParenthesisKeyword_0_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getProcessExpressionAccess().getArgumentsExpressionParserRuleCall_0_3_0_0()); 
	    }
		lv_arguments_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcessExpressionRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getProcessExpressionAccess().getCommaKeyword_0_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcessExpressionAccess().getArgumentsExpressionParserRuleCall_0_3_1_1_0()); 
	    }
		lv_arguments_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcessExpressionRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getProcessExpressionAccess().getRightParenthesisKeyword_0_4());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getProcessExpressionAccess().getEmptyProcessAction_1_0(),
            $current);
    }
)	otherlv_8='nil' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getProcessExpressionAccess().getNilKeyword_1_1());
    }
))
;





// Entry rule entryRuleKnowledge
entryRuleKnowledge returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKnowledgeRule()); }
	 iv_ruleKnowledge=ruleKnowledge 
	 { $current=$iv_ruleKnowledge.current; } 
	 EOF 
;

// Rule Knowledge
ruleKnowledge returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='<' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getKnowledgeAccess().getLessThanSignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKnowledgeAccess().getTuplesTupleParserRuleCall_1_0()); 
	    }
		lv_tuples_1_0=ruleTuple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKnowledgeRule());
	        }
       		add(
       			$current, 
       			"tuples",
        		lv_tuples_1_0, 
        		"Tuple");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='>' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getKnowledgeAccess().getGreaterThanSignKeyword_2());
    }
(	otherlv_3='|' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getKnowledgeAccess().getVerticalLineKeyword_3_0());
    }
	otherlv_4='<' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getKnowledgeAccess().getLessThanSignKeyword_3_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKnowledgeAccess().getTuplesTupleParserRuleCall_3_2_0()); 
	    }
		lv_tuples_5_0=ruleTuple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKnowledgeRule());
	        }
       		add(
       			$current, 
       			"tuples",
        		lv_tuples_5_0, 
        		"Tuple");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='>' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getKnowledgeAccess().getGreaterThanSignKeyword_3_3());
    }
)*)
;





// Entry rule entryRuleInterface
entryRuleInterface returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceRule()); }
	 iv_ruleInterface=ruleInterface 
	 { $current=$iv_ruleInterface.current; } 
	 EOF 
;

// Rule Interface
ruleInterface returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceAccess().getAttributesIdAttributeDefinitionParserRuleCall_0_0_0()); 
	    }
		lv_attributes_0_1=ruleIdAttributeDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_0_1, 
        		"IdAttributeDefinition");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getInterfaceAccess().getAttributesAttributeInstantiationParserRuleCall_0_0_1()); 
	    }
		lv_attributes_0_2=ruleAttributeInstantiation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_0_2, 
        		"AttributeInstantiation");
	        afterParserOrEnumRuleCall();
	    }

)

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInterfaceAccess().getCommaKeyword_1_0());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceAccess().getAttributesIdAttributeDefinitionParserRuleCall_1_1_0_0()); 
	    }
		lv_attributes_2_1=ruleIdAttributeDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_2_1, 
        		"IdAttributeDefinition");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getInterfaceAccess().getAttributesAttributeInstantiationParserRuleCall_1_1_0_1()); 
	    }
		lv_attributes_2_2=ruleAttributeInstantiation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_2_2, 
        		"AttributeInstantiation");
	        afterParserOrEnumRuleCall();
	    }

)

)
))*)
;





// Entry rule entryRuleIdAttributeDefinition
entryRuleIdAttributeDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdAttributeDefinitionRule()); }
	 iv_ruleIdAttributeDefinition=ruleIdAttributeDefinition 
	 { $current=$iv_ruleIdAttributeDefinition.current; } 
	 EOF 
;

// Rule IdAttributeDefinition
ruleIdAttributeDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='id' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIdAttributeDefinitionAccess().getIdKeyword_0());
    }
	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIdAttributeDefinitionAccess().getEqualsSignKeyword_1());
    }
(
(
		lv_componentId_2_0=RULE_STRING
		{
			newLeafNode(lv_componentId_2_0, grammarAccess.getIdAttributeDefinitionAccess().getComponentIdSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIdAttributeDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"componentId",
        		lv_componentId_2_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleAttributeInstantiation
entryRuleAttributeInstantiation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeInstantiationRule()); }
	 iv_ruleAttributeInstantiation=ruleAttributeInstantiation 
	 { $current=$iv_ruleAttributeInstantiation.current; } 
	 EOF 
;

// Rule AttributeInstantiation
ruleAttributeInstantiation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeInstantiationRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getAttributeInstantiationAccess().getAttributeAttributeDeclarationCrossReference_0_0()); 
	}

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAttributeInstantiationAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeInstantiationAccess().getValueExpressionParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeInstantiationRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFunctionDeclaration
entryRuleFunctionDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionDeclarationRule()); }
	 iv_ruleFunctionDeclaration=ruleFunctionDeclaration 
	 { $current=$iv_ruleFunctionDeclaration.current; } 
	 EOF 
;

// Rule FunctionDeclaration
ruleFunctionDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='function' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFunctionDeclarationAccess().getFunctionKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getReturnTypeTypeEnumRuleCall_1_0()); 
	    }
		lv_returnType_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		set(
       			$current, 
       			"returnType",
        		lv_returnType_1_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getFunctionDeclarationAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionDeclarationAccess().getLeftParenthesisKeyword_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getParametersVariableParserRuleCall_4_0_0()); 
	    }
		lv_parameters_4_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_4_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFunctionDeclarationAccess().getCommaKeyword_4_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getParametersVariableParserRuleCall_4_1_1_0()); 
	    }
		lv_parameters_6_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_6_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFunctionDeclarationAccess().getRightParenthesisKeyword_5());
    }
	otherlv_8='=' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getFunctionDeclarationAccess().getEqualsSignKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getBodyExpressionParserRuleCall_7_0()); 
	    }
		lv_body_9_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_9_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_10=';' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getFunctionDeclarationAccess().getSemicolonKeyword_8());
    }
)
;





// Entry rule entryRuleProcessDeclaration
entryRuleProcessDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProcessDeclarationRule()); }
	 iv_ruleProcessDeclaration=ruleProcessDeclaration 
	 { $current=$iv_ruleProcessDeclaration.current; } 
	 EOF 
;

// Rule ProcessDeclaration
ruleProcessDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='process' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProcessDeclarationAccess().getProcessKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getProcessDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcessDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getProcessDeclarationAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getProcessDeclarationAccess().getParametersVariableParserRuleCall_3_0_0()); 
	    }
		lv_parameters_3_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcessDeclarationRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_3_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getProcessDeclarationAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcessDeclarationAccess().getParametersVariableParserRuleCall_3_1_1_0()); 
	    }
		lv_parameters_5_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcessDeclarationRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_5_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getProcessDeclarationAccess().getRightParenthesisKeyword_4());
    }
	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getProcessDeclarationAccess().getLeftCurlyBracketKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcessDeclarationAccess().getBodyBlockParserRuleCall_6_0()); 
	    }
		lv_body_8_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcessDeclarationRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_8_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getProcessDeclarationAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAccess().getTypeTypeEnumRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;







// Entry rule entryRuleCommand
entryRuleCommand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommandRule()); }
	 iv_ruleCommand=ruleCommand 
	 { $current=$iv_ruleCommand.current; } 
	 EOF 
;

// Rule Command
ruleCommand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getActionParserRuleCall_0()); 
    }
    this_Action_0=ruleAction
    { 
        $current = $this_Action_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getIfThenElseParserRuleCall_1()); 
    }
    this_IfThenElse_1=ruleIfThenElse
    { 
        $current = $this_IfThenElse_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getWhileParserRuleCall_2()); 
    }
    this_While_2=ruleWhile
    { 
        $current = $this_While_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getVariableDeclarationParserRuleCall_3()); 
    }
    this_VariableDeclaration_3=ruleVariableDeclaration
    { 
        $current = $this_VariableDeclaration_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getProcessExpressionParserRuleCall_4()); 
    }
    this_ProcessExpression_4=ruleProcessExpression
    { 
        $current = $this_ProcessExpression_4.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCommandAccess().getLeftCurlyBracketKeyword_5_0());
    }

    { 
        newCompositeNode(grammarAccess.getCommandAccess().getBlockParserRuleCall_5_1()); 
    }
    this_Block_6=ruleBlock
    { 
        $current = $this_Block_6.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getCommandAccess().getRightCurlyBracketKeyword_5_2());
    }
))
;





// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	 iv_ruleVariableDeclaration=ruleVariableDeclaration 
	 { $current=$iv_ruleVariableDeclaration.current; } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getDeclaredVariableVariableParserRuleCall_0_0()); 
	    }
		lv_declaredVariable_0_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"declaredVariable",
        		lv_declaredVariable_0_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getInitExpressionParserRuleCall_1_1_0()); 
	    }
		lv_init_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"init",
        		lv_init_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVariableDeclarationAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	 iv_ruleAction=ruleAction 
	 { $current=$iv_ruleAction.current; } 
	 EOF 
;

// Rule Action
ruleAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getActionAccess().getPutActionParserRuleCall_0()); 
    }
    this_PutAction_0=rulePutAction
    { 
        $current = $this_PutAction_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getActionAccess().getGetActionParserRuleCall_1()); 
    }
    this_GetAction_1=ruleGetAction
    { 
        $current = $this_GetAction_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getActionAccess().getQueryActionParserRuleCall_2()); 
    }
    this_QueryAction_2=ruleQueryAction
    { 
        $current = $this_QueryAction_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getActionAccess().getReplaceActionParserRuleCall_3()); 
    }
    this_ReplaceAction_3=ruleReplaceAction
    { 
        $current = $this_ReplaceAction_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleReplaceAction
entryRuleReplaceAction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReplaceActionRule()); }
	 iv_ruleReplaceAction=ruleReplaceAction 
	 { $current=$iv_ruleReplaceAction.current; } 
	 EOF 
;

// Rule ReplaceAction
ruleReplaceAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='replace' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getReplaceActionAccess().getReplaceKeyword_0());
    }
	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getReplaceActionAccess().getLeftSquareBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReplaceActionAccess().getTemplateTemplateParserRuleCall_2_0()); 
	    }
		lv_template_2_0=ruleTemplate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReplaceActionRule());
	        }
       		set(
       			$current, 
       			"template",
        		lv_template_2_0, 
        		"Template");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='->' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getReplaceActionAccess().getHyphenMinusGreaterThanSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReplaceActionAccess().getTupleTupleParserRuleCall_4_0()); 
	    }
		lv_tuple_4_0=ruleTuple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReplaceActionRule());
	        }
       		set(
       			$current, 
       			"tuple",
        		lv_tuple_4_0, 
        		"Tuple");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getReplaceActionAccess().getRightSquareBracketKeyword_5());
    }
	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getReplaceActionAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleGetAction
entryRuleGetAction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGetActionRule()); }
	 iv_ruleGetAction=ruleGetAction 
	 { $current=$iv_ruleGetAction.current; } 
	 EOF 
;

// Rule GetAction
ruleGetAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='get' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGetActionAccess().getGetKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGetActionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGetActionAccess().getTemplateTemplateParserRuleCall_2_0()); 
	    }
		lv_template_2_0=ruleTemplate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGetActionRule());
	        }
       		set(
       			$current, 
       			"template",
        		lv_template_2_0, 
        		"Template");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getGetActionAccess().getRightParenthesisKeyword_3());
    }
	otherlv_4='@' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getGetActionAccess().getCommercialAtKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGetActionAccess().getTargetExpressionParserRuleCall_5_0()); 
	    }
		lv_target_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGetActionRule());
	        }
       		set(
       			$current, 
       			"target",
        		lv_target_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getGetActionAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleQueryAction
entryRuleQueryAction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQueryActionRule()); }
	 iv_ruleQueryAction=ruleQueryAction 
	 { $current=$iv_ruleQueryAction.current; } 
	 EOF 
;

// Rule QueryAction
ruleQueryAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='query' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getQueryActionAccess().getQueryKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getQueryActionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQueryActionAccess().getTemplateTemplateParserRuleCall_2_0()); 
	    }
		lv_template_2_0=ruleTemplate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQueryActionRule());
	        }
       		set(
       			$current, 
       			"template",
        		lv_template_2_0, 
        		"Template");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getQueryActionAccess().getRightParenthesisKeyword_3());
    }
	otherlv_4='@' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getQueryActionAccess().getCommercialAtKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQueryActionAccess().getTargetExpressionParserRuleCall_5_0()); 
	    }
		lv_target_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQueryActionRule());
	        }
       		set(
       			$current, 
       			"target",
        		lv_target_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getQueryActionAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRulePutAction
entryRulePutAction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPutActionRule()); }
	 iv_rulePutAction=rulePutAction 
	 { $current=$iv_rulePutAction.current; } 
	 EOF 
;

// Rule PutAction
rulePutAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='put' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPutActionAccess().getPutKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPutActionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPutActionAccess().getTupleTupleParserRuleCall_2_0()); 
	    }
		lv_tuple_2_0=ruleTuple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPutActionRule());
	        }
       		set(
       			$current, 
       			"tuple",
        		lv_tuple_2_0, 
        		"Tuple");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPutActionAccess().getRightParenthesisKeyword_3());
    }
	otherlv_4='@' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPutActionAccess().getCommercialAtKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPutActionAccess().getTargetExpressionParserRuleCall_5_0()); 
	    }
		lv_target_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPutActionRule());
	        }
       		set(
       			$current, 
       			"target",
        		lv_target_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getPutActionAccess().getSemicolonKeyword_6());
    }
)
;







// Entry rule entryRuleTuple
entryRuleTuple returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTupleRule()); }
	 iv_ruleTuple=ruleTuple 
	 { $current=$iv_ruleTuple.current; } 
	 EOF 
;

// Rule Tuple
ruleTuple returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTupleAccess().getFieldsExpressionParserRuleCall_0_0()); 
	    }
		lv_fields_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTupleRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTupleAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTupleAccess().getFieldsExpressionParserRuleCall_1_1_0()); 
	    }
		lv_fields_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTupleRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleTemplate
entryRuleTemplate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTemplateRule()); }
	 iv_ruleTemplate=ruleTemplate 
	 { $current=$iv_ruleTemplate.current; } 
	 EOF 
;

// Rule Template
ruleTemplate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTemplateAccess().getFieldsTemplateFieldParserRuleCall_0_0()); 
	    }
		lv_fields_0_0=ruleTemplateField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemplateRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_0_0, 
        		"TemplateField");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTemplateAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTemplateAccess().getFieldsTemplateFieldParserRuleCall_1_1_0()); 
	    }
		lv_fields_2_0=ruleTemplateField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemplateRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_2_0, 
        		"TemplateField");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleTemplateField
entryRuleTemplateField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTemplateFieldRule()); }
	 iv_ruleTemplateField=ruleTemplateField 
	 { $current=$iv_ruleTemplateField.current; } 
	 EOF 
;

// Rule TemplateField
ruleTemplateField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTemplateFieldAccess().getAnyFormalFieldParserRuleCall_0()); 
    }
    this_AnyFormalField_0=ruleAnyFormalField
    { 
        $current = $this_AnyFormalField_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTemplateFieldAccess().getFormalFieldParserRuleCall_1()); 
    }
    this_FormalField_1=ruleFormalField
    { 
        $current = $this_FormalField_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTemplateFieldAccess().getActualFieldParserRuleCall_2()); 
    }
    this_ActualField_2=ruleActualField
    { 
        $current = $this_ActualField_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTemplateFieldAccess().getTypedFormalFieldParserRuleCall_3()); 
    }
    this_TypedFormalField_3=ruleTypedFormalField
    { 
        $current = $this_TypedFormalField_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAnyFormalField
entryRuleAnyFormalField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnyFormalFieldRule()); }
	 iv_ruleAnyFormalField=ruleAnyFormalField 
	 { $current=$iv_ruleAnyFormalField.current; } 
	 EOF 
;

// Rule AnyFormalField
ruleAnyFormalField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAnyFormalFieldAccess().getAnyFormalFieldAction_0(),
            $current);
    }
)	otherlv_1='*' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAnyFormalFieldAccess().getAsteriskKeyword_1());
    }
)
;





// Entry rule entryRuleTypedFormalField
entryRuleTypedFormalField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypedFormalFieldRule()); }
	 iv_ruleTypedFormalField=ruleTypedFormalField 
	 { $current=$iv_ruleTypedFormalField.current; } 
	 EOF 
;

// Rule TypedFormalField
ruleTypedFormalField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTypedFormalFieldAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypedFormalFieldAccess().getTypeTypeEnumRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedFormalFieldRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypedFormalFieldAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleFormalField
entryRuleFormalField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFormalFieldRule()); }
	 iv_ruleFormalField=ruleFormalField 
	 { $current=$iv_ruleFormalField.current; } 
	 EOF 
;

// Rule FormalField
ruleFormalField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='?' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFormalFieldAccess().getQuestionMarkKeyword_0());
    }
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFormalFieldAccess().getStandardFormalFieldAction_1_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFormalFieldRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getFormalFieldAccess().getReferenceVariableCrossReference_1_0_1_0()); 
	}

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFormalFieldAccess().getFormalFieldWithDeclarationAction_1_1_0(),
            $current);
    }
)	otherlv_4='[' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFormalFieldAccess().getLeftSquareBracketKeyword_1_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFormalFieldAccess().getVariableVariableParserRuleCall_1_1_2_0()); 
	    }
		lv_variable_5_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormalFieldRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_5_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFormalFieldAccess().getRightSquareBracketKeyword_1_1_3());
    }
)))
;





// Entry rule entryRuleActualField
entryRuleActualField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActualFieldRule()); }
	 iv_ruleActualField=ruleActualField 
	 { $current=$iv_ruleActualField.current; } 
	 EOF 
;

// Rule ActualField
ruleActualField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getActualFieldAccess().getValueExpressionParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActualFieldRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleWhile
entryRuleWhile returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWhileRule()); }
	 iv_ruleWhile=ruleWhile 
	 { $current=$iv_ruleWhile.current; } 
	 EOF 
;

// Rule While
ruleWhile returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='while' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWhileAccess().getWhileKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getWhileAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileAccess().getGuardExpressionParserRuleCall_2_0()); 
	    }
		lv_guard_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileRule());
	        }
       		set(
       			$current, 
       			"guard",
        		lv_guard_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getWhileAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileAccess().getBodyCommandParserRuleCall_4_0()); 
	    }
		lv_body_4_0=ruleCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_4_0, 
        		"Command");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleIfThenElse
entryRuleIfThenElse returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfThenElseRule()); }
	 iv_ruleIfThenElse=ruleIfThenElse 
	 { $current=$iv_ruleIfThenElse.current; } 
	 EOF 
;

// Rule IfThenElse
ruleIfThenElse returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfThenElseAccess().getIfKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIfThenElseAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfThenElseAccess().getGuardExpressionParserRuleCall_2_0()); 
	    }
		lv_guard_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfThenElseRule());
	        }
       		set(
       			$current, 
       			"guard",
        		lv_guard_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIfThenElseAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfThenElseAccess().getThenBranchCommandParserRuleCall_4_0()); 
	    }
		lv_thenBranch_4_0=ruleCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfThenElseRule());
	        }
       		set(
       			$current, 
       			"thenBranch",
        		lv_thenBranch_4_0, 
        		"Command");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'else' 
)=>	otherlv_5='else' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getIfThenElseAccess().getElseKeyword_5_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIfThenElseAccess().getElseBranchCommandParserRuleCall_5_1_0()); 
	    }
		lv_elseBranch_6_0=ruleCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfThenElseRule());
	        }
       		set(
       			$current, 
       			"elseBranch",
        		lv_elseBranch_6_0, 
        		"Command");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	 iv_ruleBlock=ruleBlock 
	 { $current=$iv_ruleBlock.current; } 
	 EOF 
;

// Rule Block
ruleBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBlockAccess().getBlockAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBlockAccess().getCommandsCommandParserRuleCall_1_0()); 
	    }
		lv_commands_1_0=ruleCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockRule());
	        }
       		add(
       			$current, 
       			"commands",
        		lv_commands_1_0, 
        		"Command");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getDisjunctionParserRuleCall()); 
    }
    this_Disjunction_0=ruleDisjunction
    { 
        $current = $this_Disjunction_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleDisjunction
entryRuleDisjunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDisjunctionRule()); }
	 iv_ruleDisjunction=ruleDisjunction 
	 { $current=$iv_ruleDisjunction.current; } 
	 EOF 
;

// Rule Disjunction
ruleDisjunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDisjunctionAccess().getConjunctionParserRuleCall_0()); 
    }
    this_Conjunction_0=ruleConjunction
    { 
        $current = $this_Conjunction_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getDisjunctionAccess().getDisjunctionLeftAction_1_0(),
            $current);
    }
)	otherlv_2='|' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDisjunctionAccess().getVerticalLineKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDisjunctionAccess().getRightDisjunctionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleDisjunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDisjunctionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Disjunction");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleConjunction
entryRuleConjunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConjunctionRule()); }
	 iv_ruleConjunction=ruleConjunction 
	 { $current=$iv_ruleConjunction.current; } 
	 EOF 
;

// Rule Conjunction
ruleConjunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getConjunctionAccess().getNegationParserRuleCall_0()); 
    }
    this_Negation_0=ruleNegation
    { 
        $current = $this_Negation_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getConjunctionAccess().getConjunctionLeftAction_1_0(),
            $current);
    }
)	otherlv_2='&' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConjunctionAccess().getAmpersandKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConjunctionAccess().getRightConjunctionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleConjunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConjunctionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Conjunction");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleNegation
entryRuleNegation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNegationRule()); }
	 iv_ruleNegation=ruleNegation 
	 { $current=$iv_ruleNegation.current; } 
	 EOF 
;

// Rule Negation
ruleNegation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='!' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNegationAccess().getExclamationMarkKeyword_0_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getNegationAccess().getNegationAction_0_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNegationAccess().getArgRelationParserRuleCall_0_2_0()); 
	    }
		lv_arg_2_0=ruleRelation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNegationRule());
	        }
       		set(
       			$current, 
       			"arg",
        		lv_arg_2_0, 
        		"Relation");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getNegationAccess().getRelationParserRuleCall_1()); 
    }
    this_Relation_3=ruleRelation
    { 
        $current = $this_Relation_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRelation
entryRuleRelation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationRule()); }
	 iv_ruleRelation=ruleRelation 
	 { $current=$iv_ruleRelation.current; } 
	 EOF 
;

// Rule Relation
ruleRelation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRelationAccess().getSummationSubtractionParserRuleCall_0()); 
    }
    this_SummationSubtraction_0=ruleSummationSubtraction
    { 
        $current = $this_SummationSubtraction_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationAccess().getRelationLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationAccess().getRelRelationSymbolEnumRuleCall_1_1_0()); 
	    }
		lv_rel_2_0=ruleRelationSymbol		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationRule());
	        }
       		set(
       			$current, 
       			"rel",
        		lv_rel_2_0, 
        		"RelationSymbol");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationAccess().getRightRelationParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleRelation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Relation");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleSummationSubtraction
entryRuleSummationSubtraction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSummationSubtractionRule()); }
	 iv_ruleSummationSubtraction=ruleSummationSubtraction 
	 { $current=$iv_ruleSummationSubtraction.current; } 
	 EOF 
;

// Rule SummationSubtraction
ruleSummationSubtraction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSummationSubtractionAccess().getMultiplicationDivisionParserRuleCall_0()); 
    }
    this_MultiplicationDivision_0=ruleMultiplicationDivision
    { 
        $current = $this_MultiplicationDivision_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getSummationSubtractionAccess().getSummationSubtractionLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'+' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getSummationSubtractionAccess().getOpPlusSignKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSummationSubtractionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'-' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getSummationSubtractionAccess().getOpHyphenMinusKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSummationSubtractionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSummationSubtractionAccess().getRightSummationSubtractionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleSummationSubtraction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSummationSubtractionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"SummationSubtraction");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleMultiplicationDivision
entryRuleMultiplicationDivision returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicationDivisionRule()); }
	 iv_ruleMultiplicationDivision=ruleMultiplicationDivision 
	 { $current=$iv_ruleMultiplicationDivision.current; } 
	 EOF 
;

// Rule MultiplicationDivision
ruleMultiplicationDivision returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMultiplicationDivisionAccess().getBaseExpressionParserRuleCall_0()); 
    }
    this_BaseExpression_0=ruleBaseExpression
    { 
        $current = $this_BaseExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicationDivisionAccess().getMultiplicationDivisionLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'*' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getMultiplicationDivisionAccess().getOpAsteriskKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplicationDivisionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'/' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getMultiplicationDivisionAccess().getOpSolidusKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplicationDivisionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicationDivisionAccess().getRightMultiplicationDivisionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleMultiplicationDivision		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicationDivisionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"MultiplicationDivision");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleBaseExpression
entryRuleBaseExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBaseExpressionRule()); }
	 iv_ruleBaseExpression=ruleBaseExpression 
	 { $current=$iv_ruleBaseExpression.current; } 
	 EOF 
;

// Rule BaseExpression
ruleBaseExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='true' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBaseExpressionAccess().getTrueKeyword_0_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getBaseExpressionAccess().getTrueExpressionAction_0_1(),
            $current);
    }
))
    |(	otherlv_2='false' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBaseExpressionAccess().getFalseKeyword_1_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getBaseExpressionAccess().getFalseExpressionAction_1_1(),
            $current);
    }
))
    |(	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBaseExpressionAccess().getLeftParenthesisKeyword_2_0());
    }

    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getExpressionParserRuleCall_2_1()); 
    }
    this_Expression_5=ruleExpression
    { 
        $current = $this_Expression_5.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBaseExpressionAccess().getIfThenElseExpressionGuardAction_2_2_0(),
            $current);
    }
)	otherlv_7='?' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getBaseExpressionAccess().getQuestionMarkKeyword_2_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBaseExpressionAccess().getThenBranchExpressionParserRuleCall_2_2_2_0()); 
	    }
		lv_thenBranch_8_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBaseExpressionRule());
	        }
       		set(
       			$current, 
       			"thenBranch",
        		lv_thenBranch_8_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9=':' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getBaseExpressionAccess().getColonKeyword_2_2_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBaseExpressionAccess().getElseBranchExpressionParserRuleCall_2_2_4_0()); 
	    }
		lv_elseBranch_10_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBaseExpressionRule());
	        }
       		set(
       			$current, 
       			"elseBranch",
        		lv_elseBranch_10_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_11=')' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getBaseExpressionAccess().getRightParenthesisKeyword_2_3());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getStringLiteralParserRuleCall_3()); 
    }
    this_StringLiteral_12=ruleStringLiteral
    { 
        $current = $this_StringLiteral_12.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getNumberLiteralParserRuleCall_4()); 
    }
    this_NumberLiteral_13=ruleNumberLiteral
    { 
        $current = $this_NumberLiteral_13.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getMinExpressionParserRuleCall_5()); 
    }
    this_MinExpression_14=ruleMinExpression
    { 
        $current = $this_MinExpression_14.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getMaxExpressionParserRuleCall_6()); 
    }
    this_MaxExpression_15=ruleMaxExpression
    { 
        $current = $this_MaxExpression_15.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getFloorExpressionParserRuleCall_7()); 
    }
    this_FloorExpression_16=ruleFloorExpression
    { 
        $current = $this_FloorExpression_16.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getCeilExpressionParserRuleCall_8()); 
    }
    this_CeilExpression_17=ruleCeilExpression
    { 
        $current = $this_CeilExpression_17.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getPowExpressionParserRuleCall_9()); 
    }
    this_PowExpression_18=rulePowExpression
    { 
        $current = $this_PowExpression_18.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getModExpressionParserRuleCall_10()); 
    }
    this_ModExpression_19=ruleModExpression
    { 
        $current = $this_ModExpression_19.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getLogExpressionParserRuleCall_11()); 
    }
    this_LogExpression_20=ruleLogExpression
    { 
        $current = $this_LogExpression_20.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getFactorialExpressionParserRuleCall_12()); 
    }
    this_FactorialExpression_21=ruleFactorialExpression
    { 
        $current = $this_FactorialExpression_21.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getSinExpressionParserRuleCall_13()); 
    }
    this_SinExpression_22=ruleSinExpression
    { 
        $current = $this_SinExpression_22.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getCosExpressionParserRuleCall_14()); 
    }
    this_CosExpression_23=ruleCosExpression
    { 
        $current = $this_CosExpression_23.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getTanExpressionParserRuleCall_15()); 
    }
    this_TanExpression_24=ruleTanExpression
    { 
        $current = $this_TanExpression_24.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getASinExpressionParserRuleCall_16()); 
    }
    this_ASinExpression_25=ruleASinExpression
    { 
        $current = $this_ASinExpression_25.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getACosExpressionParserRuleCall_17()); 
    }
    this_ACosExpression_26=ruleACosExpression
    { 
        $current = $this_ACosExpression_26.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getATanExpressionParserRuleCall_18()); 
    }
    this_ATanExpression_27=ruleATanExpression
    { 
        $current = $this_ATanExpression_27.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getSelfExpressionParserRuleCall_19()); 
    }
    this_SelfExpression_28=ruleSelfExpression
    { 
        $current = $this_SelfExpression_28.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getReferenceCallAccessParserRuleCall_20()); 
    }
    this_ReferenceCallAccess_29=ruleReferenceCallAccess
    { 
        $current = $this_ReferenceCallAccess_29.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSelfExpression
entryRuleSelfExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSelfExpressionRule()); }
	 iv_ruleSelfExpression=ruleSelfExpression 
	 { $current=$iv_ruleSelfExpression.current; } 
	 EOF 
;

// Rule SelfExpression
ruleSelfExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSelfExpressionAccess().getSelfExpressionAction_0(),
            $current);
    }
)	otherlv_1='self' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSelfExpressionAccess().getSelfKeyword_1());
    }
)
;







// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current; } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_STRING
		{
			newLeafNode(lv_value_0_0, grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleReferenceCallAccess
entryRuleReferenceCallAccess returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReferenceCallAccessRule()); }
	 iv_ruleReferenceCallAccess=ruleReferenceCallAccess 
	 { $current=$iv_ruleReferenceCallAccess.current; } 
	 EOF 
;

// Rule ReferenceCallAccess
ruleReferenceCallAccess returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getReferenceCallAccessAccess().getReferenceParserRuleCall_0()); 
    }
    this_Reference_0=ruleReference
    { 
        $current = $this_Reference_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
)	'(' 
((
(
ruleExpression
)
)(	',' 
(
(
ruleExpression
)
))*)?	')' 
))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getReferenceCallAccessAccess().getCallFunctionAction_1_0_0(),
            $current);
    }
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getReferenceCallAccessAccess().getLeftParenthesisKeyword_1_0_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getReferenceCallAccessAccess().getArgsExpressionParserRuleCall_1_0_2_0_0()); 
	    }
		lv_args_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReferenceCallAccessRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getReferenceCallAccessAccess().getCommaKeyword_1_0_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReferenceCallAccessAccess().getArgsExpressionParserRuleCall_1_0_2_1_1_0()); 
	    }
		lv_args_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReferenceCallAccessRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getReferenceCallAccessAccess().getRightParenthesisKeyword_1_0_3());
    }
))?)
;





// Entry rule entryRuleReference
entryRuleReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReferenceRule()); }
	 iv_ruleReference=ruleReference 
	 { $current=$iv_ruleReference.current; } 
	 EOF 
;

// Rule Reference
ruleReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getReferenceRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getReferenceAccess().getRefReferenceableElementsCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getNumberLiteralRule()); }
	 iv_ruleNumberLiteral=ruleNumberLiteral 
	 { $current=$iv_ruleNumberLiteral.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule NumberLiteral
ruleNumberLiteral returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
((
(
		lv_intpart_0_0=RULE_INT
		{
			newLeafNode(lv_intpart_0_0, grammarAccess.getNumberLiteralAccess().getIntpartINTTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumberLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"intpart",
        		lv_intpart_0_0, 
        		"INT");
	    }

)
)((
(
		lv_isDouble_1_0=	'.' 
    {
        newLeafNode(lv_isDouble_1_0, grammarAccess.getNumberLiteralAccess().getIsDoubleFullStopKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumberLiteralRule());
	        }
       		setWithLastConsumed($current, "isDouble", true, ".");
	    }

)
)(
(
		lv_decimal_2_0=RULE_INT
		{
			newLeafNode(lv_decimal_2_0, grammarAccess.getNumberLiteralAccess().getDecimalINTTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumberLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"decimal",
        		lv_decimal_2_0, 
        		"INT");
	    }

)
))?)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleFactorialExpression
entryRuleFactorialExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFactorialExpressionRule()); }
	 iv_ruleFactorialExpression=ruleFactorialExpression 
	 { $current=$iv_ruleFactorialExpression.current; } 
	 EOF 
;

// Rule FactorialExpression
ruleFactorialExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='factorial' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFactorialExpressionAccess().getFactorialKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFactorialExpressionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFactorialExpressionAccess().getArgExpressionParserRuleCall_2_0()); 
	    }
		lv_arg_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactorialExpressionRule());
	        }
       		set(
       			$current, 
       			"arg",
        		lv_arg_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFactorialExpressionAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleLogExpression
entryRuleLogExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogExpressionRule()); }
	 iv_ruleLogExpression=ruleLogExpression 
	 { $current=$iv_ruleLogExpression.current; } 
	 EOF 
;

// Rule LogExpression
ruleLogExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='ln' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLogExpressionAccess().getLnKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLogExpressionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLogExpressionAccess().getArgExpressionParserRuleCall_2_0()); 
	    }
		lv_arg_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogExpressionRule());
	        }
       		set(
       			$current, 
       			"arg",
        		lv_arg_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLogExpressionAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleModExpression
entryRuleModExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModExpressionRule()); }
	 iv_ruleModExpression=ruleModExpression 
	 { $current=$iv_ruleModExpression.current; } 
	 EOF 
;

// Rule ModExpression
ruleModExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='mod' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getModExpressionAccess().getModKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModExpressionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModExpressionAccess().getArgExpressionParserRuleCall_2_0()); 
	    }
		lv_arg_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModExpressionRule());
	        }
       		set(
       			$current, 
       			"arg",
        		lv_arg_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getModExpressionAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModExpressionAccess().getModExpressionParserRuleCall_4_0()); 
	    }
		lv_mod_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModExpressionRule());
	        }
       		set(
       			$current, 
       			"mod",
        		lv_mod_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getModExpressionAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRulePowExpression
entryRulePowExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPowExpressionRule()); }
	 iv_rulePowExpression=rulePowExpression 
	 { $current=$iv_rulePowExpression.current; } 
	 EOF 
;

// Rule PowExpression
rulePowExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='pow' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPowExpressionAccess().getPowKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPowExpressionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPowExpressionAccess().getBaseExpressionParserRuleCall_2_0()); 
	    }
		lv_base_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowExpressionRule());
	        }
       		set(
       			$current, 
       			"base",
        		lv_base_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPowExpressionAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPowExpressionAccess().getExpExpressionParserRuleCall_4_0()); 
	    }
		lv_exp_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowExpressionRule());
	        }
       		set(
       			$current, 
       			"exp",
        		lv_exp_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPowExpressionAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleFloorExpression
entryRuleFloorExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFloorExpressionRule()); }
	 iv_ruleFloorExpression=ruleFloorExpression 
	 { $current=$iv_ruleFloorExpression.current; } 
	 EOF 
;

// Rule FloorExpression
ruleFloorExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='floor' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFloorExpressionAccess().getFloorKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFloorExpressionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFloorExpressionAccess().getArgExpressionParserRuleCall_2_0()); 
	    }
		lv_arg_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFloorExpressionRule());
	        }
       		set(
       			$current, 
       			"arg",
        		lv_arg_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFloorExpressionAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleCeilExpression
entryRuleCeilExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCeilExpressionRule()); }
	 iv_ruleCeilExpression=ruleCeilExpression 
	 { $current=$iv_ruleCeilExpression.current; } 
	 EOF 
;

// Rule CeilExpression
ruleCeilExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='ceil' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCeilExpressionAccess().getCeilKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCeilExpressionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCeilExpressionAccess().getArgExpressionParserRuleCall_2_0()); 
	    }
		lv_arg_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCeilExpressionRule());
	        }
       		set(
       			$current, 
       			"arg",
        		lv_arg_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCeilExpressionAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleMinExpression
entryRuleMinExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMinExpressionRule()); }
	 iv_ruleMinExpression=ruleMinExpression 
	 { $current=$iv_ruleMinExpression.current; } 
	 EOF 
;

// Rule MinExpression
ruleMinExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='min' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMinExpressionAccess().getMinKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMinExpressionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMinExpressionAccess().getLeftExpressionParserRuleCall_2_0()); 
	    }
		lv_left_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMinExpressionRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMinExpressionAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMinExpressionAccess().getRightExpressionParserRuleCall_4_0()); 
	    }
		lv_right_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMinExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMinExpressionAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleMaxExpression
entryRuleMaxExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMaxExpressionRule()); }
	 iv_ruleMaxExpression=ruleMaxExpression 
	 { $current=$iv_ruleMaxExpression.current; } 
	 EOF 
;

// Rule MaxExpression
ruleMaxExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='man' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMaxExpressionAccess().getManKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMaxExpressionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMaxExpressionAccess().getLeftExpressionParserRuleCall_2_0()); 
	    }
		lv_left_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMaxExpressionRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMaxExpressionAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMaxExpressionAccess().getRightExpressionParserRuleCall_4_0()); 
	    }
		lv_right_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMaxExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMaxExpressionAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleSinExpression
entryRuleSinExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSinExpressionRule()); }
	 iv_ruleSinExpression=ruleSinExpression 
	 { $current=$iv_ruleSinExpression.current; } 
	 EOF 
;

// Rule SinExpression
ruleSinExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='sin' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSinExpressionAccess().getSinKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSinExpressionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSinExpressionAccess().getArgExpressionParserRuleCall_2_0()); 
	    }
		lv_arg_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSinExpressionRule());
	        }
       		set(
       			$current, 
       			"arg",
        		lv_arg_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSinExpressionAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleCosExpression
entryRuleCosExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCosExpressionRule()); }
	 iv_ruleCosExpression=ruleCosExpression 
	 { $current=$iv_ruleCosExpression.current; } 
	 EOF 
;

// Rule CosExpression
ruleCosExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='cos' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCosExpressionAccess().getCosKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCosExpressionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCosExpressionAccess().getArgExpressionParserRuleCall_2_0()); 
	    }
		lv_arg_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCosExpressionRule());
	        }
       		set(
       			$current, 
       			"arg",
        		lv_arg_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCosExpressionAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleTanExpression
entryRuleTanExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTanExpressionRule()); }
	 iv_ruleTanExpression=ruleTanExpression 
	 { $current=$iv_ruleTanExpression.current; } 
	 EOF 
;

// Rule TanExpression
ruleTanExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='tan' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTanExpressionAccess().getTanKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTanExpressionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTanExpressionAccess().getArgExpressionParserRuleCall_2_0()); 
	    }
		lv_arg_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTanExpressionRule());
	        }
       		set(
       			$current, 
       			"arg",
        		lv_arg_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTanExpressionAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleATanExpression
entryRuleATanExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getATanExpressionRule()); }
	 iv_ruleATanExpression=ruleATanExpression 
	 { $current=$iv_ruleATanExpression.current; } 
	 EOF 
;

// Rule ATanExpression
ruleATanExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='atan' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getATanExpressionAccess().getAtanKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getATanExpressionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getATanExpressionAccess().getArgExpressionParserRuleCall_2_0()); 
	    }
		lv_arg_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getATanExpressionRule());
	        }
       		set(
       			$current, 
       			"arg",
        		lv_arg_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getATanExpressionAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleASinExpression
entryRuleASinExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getASinExpressionRule()); }
	 iv_ruleASinExpression=ruleASinExpression 
	 { $current=$iv_ruleASinExpression.current; } 
	 EOF 
;

// Rule ASinExpression
ruleASinExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='asin' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getASinExpressionAccess().getAsinKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getASinExpressionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getASinExpressionAccess().getArgExpressionParserRuleCall_2_0()); 
	    }
		lv_arg_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getASinExpressionRule());
	        }
       		set(
       			$current, 
       			"arg",
        		lv_arg_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getASinExpressionAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleACosExpression
entryRuleACosExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getACosExpressionRule()); }
	 iv_ruleACosExpression=ruleACosExpression 
	 { $current=$iv_ruleACosExpression.current; } 
	 EOF 
;

// Rule ACosExpression
ruleACosExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='acos' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getACosExpressionAccess().getAcosKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getACosExpressionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getACosExpressionAccess().getArgExpressionParserRuleCall_2_0()); 
	    }
		lv_arg_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getACosExpressionRule());
	        }
       		set(
       			$current, 
       			"arg",
        		lv_arg_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getACosExpressionAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleSystemDeclaration
entryRuleSystemDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSystemDeclarationRule()); }
	 iv_ruleSystemDeclaration=ruleSystemDeclaration 
	 { $current=$iv_ruleSystemDeclaration.current; } 
	 EOF 
;

// Rule SystemDeclaration
ruleSystemDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='system' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSystemDeclarationAccess().getSystemKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSystemDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSystemDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSystemDeclarationAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSystemDeclarationAccess().getElementsComponentExpressionParserRuleCall_3_0()); 
	    }
		lv_elements_3_0=ruleComponentExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSystemDeclarationRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_3_0, 
        		"ComponentExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4='||' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSystemDeclarationAccess().getVerticalLineVerticalLineKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSystemDeclarationAccess().getElementsComponentExpressionParserRuleCall_4_1_0()); 
	    }
		lv_elements_5_0=ruleComponentExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSystemDeclarationRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_5_0, 
        		"ComponentExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSystemDeclarationAccess().getSemicolonKeyword_5());
    }
)
;





// Rule Type
ruleType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='bool' 
	{
        $current = grammarAccess.getTypeAccess().getSBOOLEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getTypeAccess().getSBOOLEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='int' 
	{
        $current = grammarAccess.getTypeAccess().getSINTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getTypeAccess().getSINTEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='double' 
	{
        $current = grammarAccess.getTypeAccess().getSDOUBLEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getTypeAccess().getSDOUBLEEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='string' 
	{
        $current = grammarAccess.getTypeAccess().getSSTRINGEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getTypeAccess().getSSTRINGEnumLiteralDeclaration_3()); 
    }
));



// Rule RelationSymbol
ruleRelationSymbol returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='=' 
	{
        $current = grammarAccess.getRelationSymbolAccess().getEQEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getRelationSymbolAccess().getEQEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='!=' 
	{
        $current = grammarAccess.getRelationSymbolAccess().getNEQEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getRelationSymbolAccess().getNEQEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='<' 
	{
        $current = grammarAccess.getRelationSymbolAccess().getLESEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getRelationSymbolAccess().getLESEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='<=' 
	{
        $current = grammarAccess.getRelationSymbolAccess().getLEQEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getRelationSymbolAccess().getLEQEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='>=' 
	{
        $current = grammarAccess.getRelationSymbolAccess().getGEQEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getRelationSymbolAccess().getGEQEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='>' 
	{
        $current = grammarAccess.getRelationSymbolAccess().getGTREnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getRelationSymbolAccess().getGTREnumLiteralDeclaration_5()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


