/*
* generated by Xtext
*/
package org.cmg.resp.xtext.scellight.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.cmg.resp.xtext.scellight.services.ScelLightGrammarAccess;

public class ScelLightParser extends AbstractContentAssistParser {
	
	@Inject
	private ScelLightGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.cmg.resp.xtext.scellight.ui.contentassist.antlr.internal.InternalScelLightParser createParser() {
		org.cmg.resp.xtext.scellight.ui.contentassist.antlr.internal.InternalScelLightParser result = new org.cmg.resp.xtext.scellight.ui.contentassist.antlr.internal.InternalScelLightParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModelAccess().getAlternatives(), "rule__Model__Alternatives");
					put(grammarAccess.getComponentExpressionAccess().getAlternatives(), "rule__ComponentExpression__Alternatives");
					put(grammarAccess.getProcessExpressionAccess().getAlternatives(), "rule__ProcessExpression__Alternatives");
					put(grammarAccess.getInterfaceAccess().getAttributesAlternatives_0_0(), "rule__Interface__AttributesAlternatives_0_0");
					put(grammarAccess.getInterfaceAccess().getAttributesAlternatives_1_1_0(), "rule__Interface__AttributesAlternatives_1_1_0");
					put(grammarAccess.getReferenceableElementsAccess().getAlternatives(), "rule__ReferenceableElements__Alternatives");
					put(grammarAccess.getCommandAccess().getAlternatives(), "rule__Command__Alternatives");
					put(grammarAccess.getActionAccess().getAlternatives(), "rule__Action__Alternatives");
					put(grammarAccess.getTemplateFieldAccess().getAlternatives(), "rule__TemplateField__Alternatives");
					put(grammarAccess.getFormalFieldAccess().getAlternatives_1(), "rule__FormalField__Alternatives_1");
					put(grammarAccess.getNegationAccess().getAlternatives(), "rule__Negation__Alternatives");
					put(grammarAccess.getSummationSubtractionAccess().getOpAlternatives_1_1_0(), "rule__SummationSubtraction__OpAlternatives_1_1_0");
					put(grammarAccess.getMultiplicationDivisionAccess().getOpAlternatives_1_1_0(), "rule__MultiplicationDivision__OpAlternatives_1_1_0");
					put(grammarAccess.getBaseExpressionAccess().getAlternatives(), "rule__BaseExpression__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getRelationSymbolAccess().getAlternatives(), "rule__RelationSymbol__Alternatives");
					put(grammarAccess.getAttributeDeclarationAccess().getGroup(), "rule__AttributeDeclaration__Group__0");
					put(grammarAccess.getProjectionDeclarationAccess().getGroup(), "rule__ProjectionDeclaration__Group__0");
					put(grammarAccess.getProjectionExpressionAccess().getGroup(), "rule__ProjectionExpression__Group__0");
					put(grammarAccess.getProjectionExpressionAccess().getGroup_0(), "rule__ProjectionExpression__Group_0__0");
					put(grammarAccess.getConstantDeclarationAccess().getGroup(), "rule__ConstantDeclaration__Group__0");
					put(grammarAccess.getComponentDeclarationAccess().getGroup(), "rule__ComponentDeclaration__Group__0");
					put(grammarAccess.getComponentDeclarationAccess().getGroup_3(), "rule__ComponentDeclaration__Group_3__0");
					put(grammarAccess.getComponentDeclarationAccess().getGroup_3_1(), "rule__ComponentDeclaration__Group_3_1__0");
					put(grammarAccess.getComponentReferenceAccess().getGroup(), "rule__ComponentReference__Group__0");
					put(grammarAccess.getComponentReferenceAccess().getGroup_2(), "rule__ComponentReference__Group_2__0");
					put(grammarAccess.getComponentReferenceAccess().getGroup_2_1(), "rule__ComponentReference__Group_2_1__0");
					put(grammarAccess.getComponentConstantAccess().getGroup(), "rule__ComponentConstant__Group__0");
					put(grammarAccess.getComponentConstantAccess().getGroup_4(), "rule__ComponentConstant__Group_4__0");
					put(grammarAccess.getComponentConstantAccess().getGroup_5(), "rule__ComponentConstant__Group_5__0");
					put(grammarAccess.getComponentConstantAccess().getGroup_5_1(), "rule__ComponentConstant__Group_5_1__0");
					put(grammarAccess.getProcessExpressionAccess().getGroup_0(), "rule__ProcessExpression__Group_0__0");
					put(grammarAccess.getProcessExpressionAccess().getGroup_0_3(), "rule__ProcessExpression__Group_0_3__0");
					put(grammarAccess.getProcessExpressionAccess().getGroup_0_3_1(), "rule__ProcessExpression__Group_0_3_1__0");
					put(grammarAccess.getProcessExpressionAccess().getGroup_1(), "rule__ProcessExpression__Group_1__0");
					put(grammarAccess.getKnowledgeAccess().getGroup(), "rule__Knowledge__Group__0");
					put(grammarAccess.getKnowledgeAccess().getGroup_3(), "rule__Knowledge__Group_3__0");
					put(grammarAccess.getInterfaceAccess().getGroup(), "rule__Interface__Group__0");
					put(grammarAccess.getInterfaceAccess().getGroup_1(), "rule__Interface__Group_1__0");
					put(grammarAccess.getIdAttributeDefinitionAccess().getGroup(), "rule__IdAttributeDefinition__Group__0");
					put(grammarAccess.getAttributeInstantiationAccess().getGroup(), "rule__AttributeInstantiation__Group__0");
					put(grammarAccess.getFunctionDeclarationAccess().getGroup(), "rule__FunctionDeclaration__Group__0");
					put(grammarAccess.getFunctionDeclarationAccess().getGroup_4(), "rule__FunctionDeclaration__Group_4__0");
					put(grammarAccess.getFunctionDeclarationAccess().getGroup_4_1(), "rule__FunctionDeclaration__Group_4_1__0");
					put(grammarAccess.getProcessDeclarationAccess().getGroup(), "rule__ProcessDeclaration__Group__0");
					put(grammarAccess.getProcessDeclarationAccess().getGroup_3(), "rule__ProcessDeclaration__Group_3__0");
					put(grammarAccess.getProcessDeclarationAccess().getGroup_3_1(), "rule__ProcessDeclaration__Group_3_1__0");
					put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
					put(grammarAccess.getCommandAccess().getGroup_5(), "rule__Command__Group_5__0");
					put(grammarAccess.getVariableDeclarationAccess().getGroup(), "rule__VariableDeclaration__Group__0");
					put(grammarAccess.getVariableDeclarationAccess().getGroup_1(), "rule__VariableDeclaration__Group_1__0");
					put(grammarAccess.getReplaceActionAccess().getGroup(), "rule__ReplaceAction__Group__0");
					put(grammarAccess.getGetActionAccess().getGroup(), "rule__GetAction__Group__0");
					put(grammarAccess.getQueryActionAccess().getGroup(), "rule__QueryAction__Group__0");
					put(grammarAccess.getPutActionAccess().getGroup(), "rule__PutAction__Group__0");
					put(grammarAccess.getExecActionAccess().getGroup(), "rule__ExecAction__Group__0");
					put(grammarAccess.getTupleAccess().getGroup(), "rule__Tuple__Group__0");
					put(grammarAccess.getTupleAccess().getGroup_1(), "rule__Tuple__Group_1__0");
					put(grammarAccess.getTemplateAccess().getGroup(), "rule__Template__Group__0");
					put(grammarAccess.getTemplateAccess().getGroup_1(), "rule__Template__Group_1__0");
					put(grammarAccess.getAnyFormalFieldAccess().getGroup(), "rule__AnyFormalField__Group__0");
					put(grammarAccess.getTypedFormalFieldAccess().getGroup(), "rule__TypedFormalField__Group__0");
					put(grammarAccess.getFormalFieldAccess().getGroup(), "rule__FormalField__Group__0");
					put(grammarAccess.getFormalFieldAccess().getGroup_1_0(), "rule__FormalField__Group_1_0__0");
					put(grammarAccess.getFormalFieldAccess().getGroup_1_1(), "rule__FormalField__Group_1_1__0");
					put(grammarAccess.getWhileAccess().getGroup(), "rule__While__Group__0");
					put(grammarAccess.getIfThenElseAccess().getGroup(), "rule__IfThenElse__Group__0");
					put(grammarAccess.getIfThenElseAccess().getGroup_5(), "rule__IfThenElse__Group_5__0");
					put(grammarAccess.getBlockAccess().getGroup(), "rule__Block__Group__0");
					put(grammarAccess.getDisjunctionAccess().getGroup(), "rule__Disjunction__Group__0");
					put(grammarAccess.getDisjunctionAccess().getGroup_1(), "rule__Disjunction__Group_1__0");
					put(grammarAccess.getConjunctionAccess().getGroup(), "rule__Conjunction__Group__0");
					put(grammarAccess.getConjunctionAccess().getGroup_1(), "rule__Conjunction__Group_1__0");
					put(grammarAccess.getNegationAccess().getGroup_0(), "rule__Negation__Group_0__0");
					put(grammarAccess.getRelationAccess().getGroup(), "rule__Relation__Group__0");
					put(grammarAccess.getRelationAccess().getGroup_1(), "rule__Relation__Group_1__0");
					put(grammarAccess.getSummationSubtractionAccess().getGroup(), "rule__SummationSubtraction__Group__0");
					put(grammarAccess.getSummationSubtractionAccess().getGroup_1(), "rule__SummationSubtraction__Group_1__0");
					put(grammarAccess.getMultiplicationDivisionAccess().getGroup(), "rule__MultiplicationDivision__Group__0");
					put(grammarAccess.getMultiplicationDivisionAccess().getGroup_1(), "rule__MultiplicationDivision__Group_1__0");
					put(grammarAccess.getBaseExpressionAccess().getGroup_0(), "rule__BaseExpression__Group_0__0");
					put(grammarAccess.getBaseExpressionAccess().getGroup_1(), "rule__BaseExpression__Group_1__0");
					put(grammarAccess.getBaseExpressionAccess().getGroup_2(), "rule__BaseExpression__Group_2__0");
					put(grammarAccess.getBaseExpressionAccess().getGroup_2_2(), "rule__BaseExpression__Group_2_2__0");
					put(grammarAccess.getSelfExpressionAccess().getGroup(), "rule__SelfExpression__Group__0");
					put(grammarAccess.getIdAttributeAccess().getGroup(), "rule__IdAttribute__Group__0");
					put(grammarAccess.getReferenceCallAccessAccess().getGroup(), "rule__ReferenceCallAccess__Group__0");
					put(grammarAccess.getReferenceCallAccessAccess().getGroup_1(), "rule__ReferenceCallAccess__Group_1__0");
					put(grammarAccess.getReferenceCallAccessAccess().getGroup_1_0(), "rule__ReferenceCallAccess__Group_1_0__0");
					put(grammarAccess.getReferenceCallAccessAccess().getGroup_1_0_2(), "rule__ReferenceCallAccess__Group_1_0_2__0");
					put(grammarAccess.getReferenceCallAccessAccess().getGroup_1_0_2_1(), "rule__ReferenceCallAccess__Group_1_0_2_1__0");
					put(grammarAccess.getNumberLiteralAccess().getGroup(), "rule__NumberLiteral__Group__0");
					put(grammarAccess.getNumberLiteralAccess().getGroup_1(), "rule__NumberLiteral__Group_1__0");
					put(grammarAccess.getFactorialExpressionAccess().getGroup(), "rule__FactorialExpression__Group__0");
					put(grammarAccess.getLogExpressionAccess().getGroup(), "rule__LogExpression__Group__0");
					put(grammarAccess.getModExpressionAccess().getGroup(), "rule__ModExpression__Group__0");
					put(grammarAccess.getPowExpressionAccess().getGroup(), "rule__PowExpression__Group__0");
					put(grammarAccess.getFloorExpressionAccess().getGroup(), "rule__FloorExpression__Group__0");
					put(grammarAccess.getCeilExpressionAccess().getGroup(), "rule__CeilExpression__Group__0");
					put(grammarAccess.getMinExpressionAccess().getGroup(), "rule__MinExpression__Group__0");
					put(grammarAccess.getMaxExpressionAccess().getGroup(), "rule__MaxExpression__Group__0");
					put(grammarAccess.getSinExpressionAccess().getGroup(), "rule__SinExpression__Group__0");
					put(grammarAccess.getCosExpressionAccess().getGroup(), "rule__CosExpression__Group__0");
					put(grammarAccess.getTanExpressionAccess().getGroup(), "rule__TanExpression__Group__0");
					put(grammarAccess.getATanExpressionAccess().getGroup(), "rule__ATanExpression__Group__0");
					put(grammarAccess.getASinExpressionAccess().getGroup(), "rule__ASinExpression__Group__0");
					put(grammarAccess.getACosExpressionAccess().getGroup(), "rule__ACosExpression__Group__0");
					put(grammarAccess.getSystemDeclarationAccess().getGroup(), "rule__SystemDeclaration__Group__0");
					put(grammarAccess.getSystemDeclarationAccess().getGroup_4(), "rule__SystemDeclaration__Group_4__0");
					put(grammarAccess.getModelAccess().getConstantsAssignment_0(), "rule__Model__ConstantsAssignment_0");
					put(grammarAccess.getModelAccess().getProjectionsAssignment_1(), "rule__Model__ProjectionsAssignment_1");
					put(grammarAccess.getModelAccess().getFunctionsAssignment_2(), "rule__Model__FunctionsAssignment_2");
					put(grammarAccess.getModelAccess().getAttributesAssignment_3(), "rule__Model__AttributesAssignment_3");
					put(grammarAccess.getModelAccess().getProcessesAssignment_4(), "rule__Model__ProcessesAssignment_4");
					put(grammarAccess.getModelAccess().getComponentsAssignment_5(), "rule__Model__ComponentsAssignment_5");
					put(grammarAccess.getModelAccess().getSystemsAssignment_6(), "rule__Model__SystemsAssignment_6");
					put(grammarAccess.getAttributeDeclarationAccess().getNameAssignment_1(), "rule__AttributeDeclaration__NameAssignment_1");
					put(grammarAccess.getAttributeDeclarationAccess().getTypeAssignment_3(), "rule__AttributeDeclaration__TypeAssignment_3");
					put(grammarAccess.getProjectionDeclarationAccess().getNameAssignment_1(), "rule__ProjectionDeclaration__NameAssignment_1");
					put(grammarAccess.getProjectionDeclarationAccess().getProjectionAssignment_3(), "rule__ProjectionDeclaration__ProjectionAssignment_3");
					put(grammarAccess.getProjectionExpressionAccess().getTemplateAssignment_0_1(), "rule__ProjectionExpression__TemplateAssignment_0_1");
					put(grammarAccess.getProjectionExpressionAccess().getValueAssignment_0_4(), "rule__ProjectionExpression__ValueAssignment_0_4");
					put(grammarAccess.getProjectionExpressionAccess().getDefaultAssignment_1(), "rule__ProjectionExpression__DefaultAssignment_1");
					put(grammarAccess.getConstantDeclarationAccess().getTypeAssignment_1(), "rule__ConstantDeclaration__TypeAssignment_1");
					put(grammarAccess.getConstantDeclarationAccess().getNameAssignment_2(), "rule__ConstantDeclaration__NameAssignment_2");
					put(grammarAccess.getConstantDeclarationAccess().getValueAssignment_4(), "rule__ConstantDeclaration__ValueAssignment_4");
					put(grammarAccess.getComponentDeclarationAccess().getNameAssignment_1(), "rule__ComponentDeclaration__NameAssignment_1");
					put(grammarAccess.getComponentDeclarationAccess().getParametersAssignment_3_0(), "rule__ComponentDeclaration__ParametersAssignment_3_0");
					put(grammarAccess.getComponentDeclarationAccess().getParametersAssignment_3_1_1(), "rule__ComponentDeclaration__ParametersAssignment_3_1_1");
					put(grammarAccess.getComponentDeclarationAccess().getComponentAssignment_6(), "rule__ComponentDeclaration__ComponentAssignment_6");
					put(grammarAccess.getComponentReferenceAccess().getReferenceAssignment_0(), "rule__ComponentReference__ReferenceAssignment_0");
					put(grammarAccess.getComponentReferenceAccess().getArgumentsAssignment_2_0(), "rule__ComponentReference__ArgumentsAssignment_2_0");
					put(grammarAccess.getComponentReferenceAccess().getArgumentsAssignment_2_1_1(), "rule__ComponentReference__ArgumentsAssignment_2_1_1");
					put(grammarAccess.getComponentConstantAccess().getInterfaceAssignment_1(), "rule__ComponentConstant__InterfaceAssignment_1");
					put(grammarAccess.getComponentConstantAccess().getKnowledgeAssignment_4_0(), "rule__ComponentConstant__KnowledgeAssignment_4_0");
					put(grammarAccess.getComponentConstantAccess().getProcessesAssignment_5_0(), "rule__ComponentConstant__ProcessesAssignment_5_0");
					put(grammarAccess.getComponentConstantAccess().getProcessesAssignment_5_1_1(), "rule__ComponentConstant__ProcessesAssignment_5_1_1");
					put(grammarAccess.getProcessExpressionAccess().getReferenceAssignment_0_1(), "rule__ProcessExpression__ReferenceAssignment_0_1");
					put(grammarAccess.getProcessExpressionAccess().getArgumentsAssignment_0_3_0(), "rule__ProcessExpression__ArgumentsAssignment_0_3_0");
					put(grammarAccess.getProcessExpressionAccess().getArgumentsAssignment_0_3_1_1(), "rule__ProcessExpression__ArgumentsAssignment_0_3_1_1");
					put(grammarAccess.getKnowledgeAccess().getTuplesAssignment_1(), "rule__Knowledge__TuplesAssignment_1");
					put(grammarAccess.getKnowledgeAccess().getTuplesAssignment_3_2(), "rule__Knowledge__TuplesAssignment_3_2");
					put(grammarAccess.getInterfaceAccess().getAttributesAssignment_0(), "rule__Interface__AttributesAssignment_0");
					put(grammarAccess.getInterfaceAccess().getAttributesAssignment_1_1(), "rule__Interface__AttributesAssignment_1_1");
					put(grammarAccess.getIdAttributeDefinitionAccess().getComponentIdAssignment_2(), "rule__IdAttributeDefinition__ComponentIdAssignment_2");
					put(grammarAccess.getAttributeInstantiationAccess().getAttributeAssignment_0(), "rule__AttributeInstantiation__AttributeAssignment_0");
					put(grammarAccess.getAttributeInstantiationAccess().getValueAssignment_2(), "rule__AttributeInstantiation__ValueAssignment_2");
					put(grammarAccess.getFunctionDeclarationAccess().getReturnTypeAssignment_1(), "rule__FunctionDeclaration__ReturnTypeAssignment_1");
					put(grammarAccess.getFunctionDeclarationAccess().getNameAssignment_2(), "rule__FunctionDeclaration__NameAssignment_2");
					put(grammarAccess.getFunctionDeclarationAccess().getParametersAssignment_4_0(), "rule__FunctionDeclaration__ParametersAssignment_4_0");
					put(grammarAccess.getFunctionDeclarationAccess().getParametersAssignment_4_1_1(), "rule__FunctionDeclaration__ParametersAssignment_4_1_1");
					put(grammarAccess.getFunctionDeclarationAccess().getBodyAssignment_7(), "rule__FunctionDeclaration__BodyAssignment_7");
					put(grammarAccess.getProcessDeclarationAccess().getNameAssignment_1(), "rule__ProcessDeclaration__NameAssignment_1");
					put(grammarAccess.getProcessDeclarationAccess().getParametersAssignment_3_0(), "rule__ProcessDeclaration__ParametersAssignment_3_0");
					put(grammarAccess.getProcessDeclarationAccess().getParametersAssignment_3_1_1(), "rule__ProcessDeclaration__ParametersAssignment_3_1_1");
					put(grammarAccess.getProcessDeclarationAccess().getBodyAssignment_6(), "rule__ProcessDeclaration__BodyAssignment_6");
					put(grammarAccess.getVariableAccess().getTypeAssignment_0(), "rule__Variable__TypeAssignment_0");
					put(grammarAccess.getVariableAccess().getNameAssignment_1(), "rule__Variable__NameAssignment_1");
					put(grammarAccess.getVariableDeclarationAccess().getDeclaredVariableAssignment_0(), "rule__VariableDeclaration__DeclaredVariableAssignment_0");
					put(grammarAccess.getVariableDeclarationAccess().getInitAssignment_1_1(), "rule__VariableDeclaration__InitAssignment_1_1");
					put(grammarAccess.getReplaceActionAccess().getTemplateAssignment_2(), "rule__ReplaceAction__TemplateAssignment_2");
					put(grammarAccess.getReplaceActionAccess().getTupleAssignment_4(), "rule__ReplaceAction__TupleAssignment_4");
					put(grammarAccess.getGetActionAccess().getTemplateAssignment_2(), "rule__GetAction__TemplateAssignment_2");
					put(grammarAccess.getGetActionAccess().getTargetAssignment_5(), "rule__GetAction__TargetAssignment_5");
					put(grammarAccess.getQueryActionAccess().getTemplateAssignment_2(), "rule__QueryAction__TemplateAssignment_2");
					put(grammarAccess.getQueryActionAccess().getTargetAssignment_5(), "rule__QueryAction__TargetAssignment_5");
					put(grammarAccess.getPutActionAccess().getTupleAssignment_2(), "rule__PutAction__TupleAssignment_2");
					put(grammarAccess.getPutActionAccess().getTargetAssignment_5(), "rule__PutAction__TargetAssignment_5");
					put(grammarAccess.getExecActionAccess().getArgAssignment_2(), "rule__ExecAction__ArgAssignment_2");
					put(grammarAccess.getTupleAccess().getFieldsAssignment_0(), "rule__Tuple__FieldsAssignment_0");
					put(grammarAccess.getTupleAccess().getFieldsAssignment_1_1(), "rule__Tuple__FieldsAssignment_1_1");
					put(grammarAccess.getTemplateAccess().getFieldsAssignment_0(), "rule__Template__FieldsAssignment_0");
					put(grammarAccess.getTemplateAccess().getFieldsAssignment_1_1(), "rule__Template__FieldsAssignment_1_1");
					put(grammarAccess.getTypedFormalFieldAccess().getTypeAssignment_1(), "rule__TypedFormalField__TypeAssignment_1");
					put(grammarAccess.getFormalFieldAccess().getReferenceAssignment_1_0_1(), "rule__FormalField__ReferenceAssignment_1_0_1");
					put(grammarAccess.getFormalFieldAccess().getVariableAssignment_1_1_2(), "rule__FormalField__VariableAssignment_1_1_2");
					put(grammarAccess.getActualFieldAccess().getValueAssignment(), "rule__ActualField__ValueAssignment");
					put(grammarAccess.getWhileAccess().getGuardAssignment_2(), "rule__While__GuardAssignment_2");
					put(grammarAccess.getWhileAccess().getBodyAssignment_4(), "rule__While__BodyAssignment_4");
					put(grammarAccess.getIfThenElseAccess().getGuardAssignment_2(), "rule__IfThenElse__GuardAssignment_2");
					put(grammarAccess.getIfThenElseAccess().getThenBranchAssignment_4(), "rule__IfThenElse__ThenBranchAssignment_4");
					put(grammarAccess.getIfThenElseAccess().getElseBranchAssignment_5_1(), "rule__IfThenElse__ElseBranchAssignment_5_1");
					put(grammarAccess.getBlockAccess().getCommandsAssignment_1(), "rule__Block__CommandsAssignment_1");
					put(grammarAccess.getDisjunctionAccess().getRightAssignment_1_2(), "rule__Disjunction__RightAssignment_1_2");
					put(grammarAccess.getConjunctionAccess().getRightAssignment_1_2(), "rule__Conjunction__RightAssignment_1_2");
					put(grammarAccess.getNegationAccess().getArgAssignment_0_2(), "rule__Negation__ArgAssignment_0_2");
					put(grammarAccess.getRelationAccess().getRelAssignment_1_1(), "rule__Relation__RelAssignment_1_1");
					put(grammarAccess.getRelationAccess().getRightAssignment_1_2(), "rule__Relation__RightAssignment_1_2");
					put(grammarAccess.getSummationSubtractionAccess().getOpAssignment_1_1(), "rule__SummationSubtraction__OpAssignment_1_1");
					put(grammarAccess.getSummationSubtractionAccess().getRightAssignment_1_2(), "rule__SummationSubtraction__RightAssignment_1_2");
					put(grammarAccess.getMultiplicationDivisionAccess().getOpAssignment_1_1(), "rule__MultiplicationDivision__OpAssignment_1_1");
					put(grammarAccess.getMultiplicationDivisionAccess().getRightAssignment_1_2(), "rule__MultiplicationDivision__RightAssignment_1_2");
					put(grammarAccess.getBaseExpressionAccess().getThenBranchAssignment_2_2_2(), "rule__BaseExpression__ThenBranchAssignment_2_2_2");
					put(grammarAccess.getBaseExpressionAccess().getElseBranchAssignment_2_2_4(), "rule__BaseExpression__ElseBranchAssignment_2_2_4");
					put(grammarAccess.getStringLiteralAccess().getValueAssignment(), "rule__StringLiteral__ValueAssignment");
					put(grammarAccess.getReferenceCallAccessAccess().getArgsAssignment_1_0_2_0(), "rule__ReferenceCallAccess__ArgsAssignment_1_0_2_0");
					put(grammarAccess.getReferenceCallAccessAccess().getArgsAssignment_1_0_2_1_1(), "rule__ReferenceCallAccess__ArgsAssignment_1_0_2_1_1");
					put(grammarAccess.getReferenceAccess().getRefAssignment(), "rule__Reference__RefAssignment");
					put(grammarAccess.getNumberLiteralAccess().getIntpartAssignment_0(), "rule__NumberLiteral__IntpartAssignment_0");
					put(grammarAccess.getNumberLiteralAccess().getIsDoubleAssignment_1_0(), "rule__NumberLiteral__IsDoubleAssignment_1_0");
					put(grammarAccess.getNumberLiteralAccess().getDecimalAssignment_1_1(), "rule__NumberLiteral__DecimalAssignment_1_1");
					put(grammarAccess.getFactorialExpressionAccess().getArgAssignment_2(), "rule__FactorialExpression__ArgAssignment_2");
					put(grammarAccess.getLogExpressionAccess().getArgAssignment_2(), "rule__LogExpression__ArgAssignment_2");
					put(grammarAccess.getModExpressionAccess().getArgAssignment_2(), "rule__ModExpression__ArgAssignment_2");
					put(grammarAccess.getModExpressionAccess().getModAssignment_4(), "rule__ModExpression__ModAssignment_4");
					put(grammarAccess.getPowExpressionAccess().getBaseAssignment_2(), "rule__PowExpression__BaseAssignment_2");
					put(grammarAccess.getPowExpressionAccess().getExpAssignment_4(), "rule__PowExpression__ExpAssignment_4");
					put(grammarAccess.getFloorExpressionAccess().getArgAssignment_2(), "rule__FloorExpression__ArgAssignment_2");
					put(grammarAccess.getCeilExpressionAccess().getArgAssignment_2(), "rule__CeilExpression__ArgAssignment_2");
					put(grammarAccess.getMinExpressionAccess().getLeftAssignment_2(), "rule__MinExpression__LeftAssignment_2");
					put(grammarAccess.getMinExpressionAccess().getRightAssignment_4(), "rule__MinExpression__RightAssignment_4");
					put(grammarAccess.getMaxExpressionAccess().getLeftAssignment_2(), "rule__MaxExpression__LeftAssignment_2");
					put(grammarAccess.getMaxExpressionAccess().getRightAssignment_4(), "rule__MaxExpression__RightAssignment_4");
					put(grammarAccess.getSinExpressionAccess().getArgAssignment_2(), "rule__SinExpression__ArgAssignment_2");
					put(grammarAccess.getCosExpressionAccess().getArgAssignment_2(), "rule__CosExpression__ArgAssignment_2");
					put(grammarAccess.getTanExpressionAccess().getArgAssignment_2(), "rule__TanExpression__ArgAssignment_2");
					put(grammarAccess.getATanExpressionAccess().getArgAssignment_2(), "rule__ATanExpression__ArgAssignment_2");
					put(grammarAccess.getASinExpressionAccess().getArgAssignment_2(), "rule__ASinExpression__ArgAssignment_2");
					put(grammarAccess.getACosExpressionAccess().getArgAssignment_2(), "rule__ACosExpression__ArgAssignment_2");
					put(grammarAccess.getSystemDeclarationAccess().getNameAssignment_1(), "rule__SystemDeclaration__NameAssignment_1");
					put(grammarAccess.getSystemDeclarationAccess().getElementsAssignment_3(), "rule__SystemDeclaration__ElementsAssignment_3");
					put(grammarAccess.getSystemDeclarationAccess().getElementsAssignment_4_1(), "rule__SystemDeclaration__ElementsAssignment_4_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.cmg.resp.xtext.scellight.ui.contentassist.antlr.internal.InternalScelLightParser typedParser = (org.cmg.resp.xtext.scellight.ui.contentassist.antlr.internal.InternalScelLightParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ScelLightGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ScelLightGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
