/*
* generated by Xtext
*/
package org.cmg.resp.xtext.hlscel.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class HLScelGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsModelElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Model:
		//	elements+=ModelElement*;
		public ParserRule getRule() { return rule; }

		//elements+=ModelElement*
		public Assignment getElementsAssignment() { return cElementsAssignment; }

		//ModelElement
		public RuleCall getElementsModelElementParserRuleCall_0() { return cElementsModelElementParserRuleCall_0; }
	}

	public class ModelElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cProcessDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNodeDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ModelElement:
		//	ProcessDeclaration | NodeDeclaration;
		public ParserRule getRule() { return rule; }

		//ProcessDeclaration | NodeDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//ProcessDeclaration
		public RuleCall getProcessDeclarationParserRuleCall_0() { return cProcessDeclarationParserRuleCall_0; }

		//NodeDeclaration
		public RuleCall getNodeDeclarationParserRuleCall_1() { return cNodeDeclarationParserRuleCall_1; }
	}

	public class NodeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNodeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgsFullJvmFormalParameterParserRuleCall_3_0_0 = (RuleCall)cArgsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgsFullJvmFormalParameterParserRuleCall_3_1_1_0 = (RuleCall)cArgsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//NodeDeclaration:
		//	"node" name=ID "(" (args+=FullJvmFormalParameter ("," args+=FullJvmFormalParameter)*)? ")" "{" "}";
		public ParserRule getRule() { return rule; }

		//"node" name=ID "(" (args+=FullJvmFormalParameter ("," args+=FullJvmFormalParameter)*)? ")" "{" "}"
		public Group getGroup() { return cGroup; }

		//"node"
		public Keyword getNodeKeyword_0() { return cNodeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(args+=FullJvmFormalParameter ("," args+=FullJvmFormalParameter)*)?
		public Group getGroup_3() { return cGroup_3; }

		//args+=FullJvmFormalParameter
		public Assignment getArgsAssignment_3_0() { return cArgsAssignment_3_0; }

		//FullJvmFormalParameter
		public RuleCall getArgsFullJvmFormalParameterParserRuleCall_3_0_0() { return cArgsFullJvmFormalParameterParserRuleCall_3_0_0; }

		//("," args+=FullJvmFormalParameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//args+=FullJvmFormalParameter
		public Assignment getArgsAssignment_3_1_1() { return cArgsAssignment_3_1_1; }

		//FullJvmFormalParameter
		public RuleCall getArgsFullJvmFormalParameterParserRuleCall_3_1_1_0() { return cArgsFullJvmFormalParameterParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ProcessDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcessDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgsFullJvmFormalParameterParserRuleCall_3_0_0 = (RuleCall)cArgsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgsFullJvmFormalParameterParserRuleCall_3_1_1_0 = (RuleCall)cArgsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyXBlockExpressionParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		
		//ProcessDeclaration:
		//	"process" name=ID "(" (args+=FullJvmFormalParameter ("," args+=FullJvmFormalParameter)*)? ")" body=XBlockExpression;
		public ParserRule getRule() { return rule; }

		//"process" name=ID "(" (args+=FullJvmFormalParameter ("," args+=FullJvmFormalParameter)*)? ")" body=XBlockExpression
		public Group getGroup() { return cGroup; }

		//"process"
		public Keyword getProcessKeyword_0() { return cProcessKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(args+=FullJvmFormalParameter ("," args+=FullJvmFormalParameter)*)?
		public Group getGroup_3() { return cGroup_3; }

		//args+=FullJvmFormalParameter
		public Assignment getArgsAssignment_3_0() { return cArgsAssignment_3_0; }

		//FullJvmFormalParameter
		public RuleCall getArgsFullJvmFormalParameterParserRuleCall_3_0_0() { return cArgsFullJvmFormalParameterParserRuleCall_3_0_0; }

		//("," args+=FullJvmFormalParameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//args+=FullJvmFormalParameter
		public Assignment getArgsAssignment_3_1_1() { return cArgsAssignment_3_1_1; }

		//FullJvmFormalParameter
		public RuleCall getArgsFullJvmFormalParameterParserRuleCall_3_1_1_0() { return cArgsFullJvmFormalParameterParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//body=XBlockExpression
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }

		//XBlockExpression
		public RuleCall getBodyXBlockExpressionParserRuleCall_5_0() { return cBodyXBlockExpressionParserRuleCall_5_0; }
	}

	public class XPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXConstructorCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXBlockExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXSwitchExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXFeatureCallParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cXLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cXIfExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cXForLoopExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cXWhileExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cXDoWhileExpressionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cXThrowExpressionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cXReturnExpressionParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cXTryCatchFinallyExpressionParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cXParenthesizedExpressionParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cHLScelActionParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cHLScelPredicateParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		
		//XPrimaryExpression returns xbase::XExpression:
		//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression | XForLoopExpression
		//	| XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression | XTryCatchFinallyExpression |
		//	XParenthesizedExpression | HLScelAction | HLScelPredicate;
		public ParserRule getRule() { return rule; }

		//XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression | XForLoopExpression |
		//XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression | XTryCatchFinallyExpression |
		//XParenthesizedExpression | HLScelAction | HLScelPredicate
		public Alternatives getAlternatives() { return cAlternatives; }

		//XConstructorCall
		public RuleCall getXConstructorCallParserRuleCall_0() { return cXConstructorCallParserRuleCall_0; }

		//XBlockExpression
		public RuleCall getXBlockExpressionParserRuleCall_1() { return cXBlockExpressionParserRuleCall_1; }

		//XSwitchExpression
		public RuleCall getXSwitchExpressionParserRuleCall_2() { return cXSwitchExpressionParserRuleCall_2; }

		//XFeatureCall
		public RuleCall getXFeatureCallParserRuleCall_3() { return cXFeatureCallParserRuleCall_3; }

		//XLiteral
		public RuleCall getXLiteralParserRuleCall_4() { return cXLiteralParserRuleCall_4; }

		//XIfExpression
		public RuleCall getXIfExpressionParserRuleCall_5() { return cXIfExpressionParserRuleCall_5; }

		//XForLoopExpression
		public RuleCall getXForLoopExpressionParserRuleCall_6() { return cXForLoopExpressionParserRuleCall_6; }

		//XWhileExpression
		public RuleCall getXWhileExpressionParserRuleCall_7() { return cXWhileExpressionParserRuleCall_7; }

		//XDoWhileExpression
		public RuleCall getXDoWhileExpressionParserRuleCall_8() { return cXDoWhileExpressionParserRuleCall_8; }

		//XThrowExpression
		public RuleCall getXThrowExpressionParserRuleCall_9() { return cXThrowExpressionParserRuleCall_9; }

		//XReturnExpression
		public RuleCall getXReturnExpressionParserRuleCall_10() { return cXReturnExpressionParserRuleCall_10; }

		//XTryCatchFinallyExpression
		public RuleCall getXTryCatchFinallyExpressionParserRuleCall_11() { return cXTryCatchFinallyExpressionParserRuleCall_11; }

		//XParenthesizedExpression
		public RuleCall getXParenthesizedExpressionParserRuleCall_12() { return cXParenthesizedExpressionParserRuleCall_12; }

		//HLScelAction
		public RuleCall getHLScelActionParserRuleCall_13() { return cHLScelActionParserRuleCall_13; }

		//HLScelPredicate
		public RuleCall getHLScelPredicateParserRuleCall_14() { return cHLScelPredicateParserRuleCall_14; }
	}

	public class HLScelPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HLScelPredicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketVerticalLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpXExpressionParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Keyword cVerticalLineRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//HLScelPredicate:
		//	"[|" exp=XExpression "|]";
		public ParserRule getRule() { return rule; }

		//"[|" exp=XExpression "|]"
		public Group getGroup() { return cGroup; }

		//"[|"
		public Keyword getLeftSquareBracketVerticalLineKeyword_0() { return cLeftSquareBracketVerticalLineKeyword_0; }

		//exp=XExpression
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }

		//XExpression
		public RuleCall getExpXExpressionParserRuleCall_1_0() { return cExpXExpressionParserRuleCall_1_0; }

		//"|]"
		public Keyword getVerticalLineRightSquareBracketKeyword_2() { return cVerticalLineRightSquareBracketKeyword_2; }
	}

	public class XLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXCollectionLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXClosureParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXBooleanLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXNumberLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cXNullLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cXStringLiteralParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cXTypeLiteralParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSelfLiteralParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//XLiteral returns xbase::XExpression:
		//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral |
		//	SelfLiteral;
		public ParserRule getRule() { return rule; }

		//XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral |
		//SelfLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//XCollectionLiteral
		public RuleCall getXCollectionLiteralParserRuleCall_0() { return cXCollectionLiteralParserRuleCall_0; }

		//XClosure
		public RuleCall getXClosureParserRuleCall_1() { return cXClosureParserRuleCall_1; }

		//XBooleanLiteral
		public RuleCall getXBooleanLiteralParserRuleCall_2() { return cXBooleanLiteralParserRuleCall_2; }

		//XNumberLiteral
		public RuleCall getXNumberLiteralParserRuleCall_3() { return cXNumberLiteralParserRuleCall_3; }

		//XNullLiteral
		public RuleCall getXNullLiteralParserRuleCall_4() { return cXNullLiteralParserRuleCall_4; }

		//XStringLiteral
		public RuleCall getXStringLiteralParserRuleCall_5() { return cXStringLiteralParserRuleCall_5; }

		//XTypeLiteral
		public RuleCall getXTypeLiteralParserRuleCall_6() { return cXTypeLiteralParserRuleCall_6; }

		//SelfLiteral
		public RuleCall getSelfLiteralParserRuleCall_7() { return cSelfLiteralParserRuleCall_7; }
	}

	public class SelfLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelfLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSelfLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSelfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SelfLiteral returns xbase::XListLiteral:
		//	{SelfLiteral} "self";
		public ParserRule getRule() { return rule; }

		//{SelfLiteral} "self"
		public Group getGroup() { return cGroup; }

		//{SelfLiteral}
		public Action getSelfLiteralAction_0() { return cSelfLiteralAction_0; }

		//"self"
		public Keyword getSelfKeyword_1() { return cSelfKeyword_1; }
	}

	public class HLScelActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HLScelAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cHLScelPutActionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cPutKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cFeatureCallArgumentsAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cFeatureCallArgumentsXExpressionParserRuleCall_0_3_0 = (RuleCall)cFeatureCallArgumentsAssignment_0_3.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Keyword cCommaKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Assignment cFeatureCallArgumentsAssignment_0_4_1 = (Assignment)cGroup_0_4.eContents().get(1);
		private final RuleCall cFeatureCallArgumentsXExpressionParserRuleCall_0_4_1_0 = (RuleCall)cFeatureCallArgumentsAssignment_0_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Keyword cCommercialAtKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Assignment cTargetAssignment_0_7 = (Assignment)cGroup_0.eContents().get(7);
		private final RuleCall cTargetXExpressionParserRuleCall_0_7_0 = (RuleCall)cTargetAssignment_0_7.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cHLScelGetActionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cGetKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cFieldsAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cFieldsTemplateFieldParserRuleCall_1_3_0 = (RuleCall)cFieldsAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cCommaKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cFieldsAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cFieldsTemplateFieldParserRuleCall_1_4_1_0 = (RuleCall)cFieldsAssignment_1_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Keyword cCommercialAtKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Assignment cTargetAssignment_1_7 = (Assignment)cGroup_1.eContents().get(7);
		private final RuleCall cTargetXExpressionParserRuleCall_1_7_0 = (RuleCall)cTargetAssignment_1_7.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cHLScelQueryActionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cQueryKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cFieldsAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cFieldsTemplateFieldParserRuleCall_2_3_0 = (RuleCall)cFieldsAssignment_2_3.eContents().get(0);
		private final Group cGroup_2_4 = (Group)cGroup_2.eContents().get(4);
		private final Keyword cCommaKeyword_2_4_0 = (Keyword)cGroup_2_4.eContents().get(0);
		private final Assignment cFieldsAssignment_2_4_1 = (Assignment)cGroup_2_4.eContents().get(1);
		private final RuleCall cFieldsTemplateFieldParserRuleCall_2_4_1_0 = (RuleCall)cFieldsAssignment_2_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Keyword cCommercialAtKeyword_2_6 = (Keyword)cGroup_2.eContents().get(6);
		private final Assignment cTargetAssignment_2_7 = (Assignment)cGroup_2.eContents().get(7);
		private final RuleCall cTargetXExpressionParserRuleCall_2_7_0 = (RuleCall)cTargetAssignment_2_7.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cHLScelGetPActionAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cGetpKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cFieldsAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cFieldsTemplateFieldParserRuleCall_3_3_0 = (RuleCall)cFieldsAssignment_3_3.eContents().get(0);
		private final Group cGroup_3_4 = (Group)cGroup_3.eContents().get(4);
		private final Keyword cCommaKeyword_3_4_0 = (Keyword)cGroup_3_4.eContents().get(0);
		private final Assignment cFieldsAssignment_3_4_1 = (Assignment)cGroup_3_4.eContents().get(1);
		private final RuleCall cFieldsTemplateFieldParserRuleCall_3_4_1_0 = (RuleCall)cFieldsAssignment_3_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		private final Keyword cCommercialAtKeyword_3_6 = (Keyword)cGroup_3.eContents().get(6);
		private final Assignment cTargetAssignment_3_7 = (Assignment)cGroup_3.eContents().get(7);
		private final RuleCall cTargetXExpressionParserRuleCall_3_7_0 = (RuleCall)cTargetAssignment_3_7.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cHLScelQueryPActionAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cQuerypKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cFieldsAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cFieldsTemplateFieldParserRuleCall_4_3_0 = (RuleCall)cFieldsAssignment_4_3.eContents().get(0);
		private final Group cGroup_4_4 = (Group)cGroup_4.eContents().get(4);
		private final Keyword cCommaKeyword_4_4_0 = (Keyword)cGroup_4_4.eContents().get(0);
		private final Assignment cFieldsAssignment_4_4_1 = (Assignment)cGroup_4_4.eContents().get(1);
		private final RuleCall cFieldsTemplateFieldParserRuleCall_4_4_1_0 = (RuleCall)cFieldsAssignment_4_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_5 = (Keyword)cGroup_4.eContents().get(5);
		private final Keyword cCommercialAtKeyword_4_6 = (Keyword)cGroup_4.eContents().get(6);
		private final Assignment cTargetAssignment_4_7 = (Assignment)cGroup_4.eContents().get(7);
		private final RuleCall cTargetXExpressionParserRuleCall_4_7_0 = (RuleCall)cTargetAssignment_4_7.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cHLScelExecActionAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cExecKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cArgAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cArgXExpressionParserRuleCall_5_3_0 = (RuleCall)cArgAssignment_5_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Keyword cCommercialAtKeyword_5_5 = (Keyword)cGroup_5.eContents().get(5);
		private final Assignment cTargetAssignment_5_6 = (Assignment)cGroup_5.eContents().get(6);
		private final RuleCall cTargetXExpressionParserRuleCall_5_6_0 = (RuleCall)cTargetAssignment_5_6.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cHLScelCallActionAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cCallKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cArgAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cArgXExpressionParserRuleCall_6_3_0 = (RuleCall)cArgAssignment_6_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		
		//HLScelAction returns xbase::XExpression:
		//	{HLScelPutAction} "put" "(" featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)* ")" "@"
		//	target=XExpression | {HLScelGetAction} "get" "(" fields+=TemplateField ("," fields+=TemplateField)* ")" "@"
		//	target=XExpression | {HLScelQueryAction} "query" "(" fields+=TemplateField ("," fields+=TemplateField)* ")" "@"
		//	target=XExpression | {HLScelGetPAction} "getp" "(" fields+=TemplateField ("," fields+=TemplateField)* ")" "@"
		//	target=XExpression | {HLScelQueryPAction} "queryp" "(" fields+=TemplateField ("," fields+=TemplateField)* ")" "@"
		//	target=XExpression | {HLScelExecAction} "exec" "(" arg=XExpression ")" "@" target=XExpression | {HLScelCallAction}
		//	"call" "(" arg=XExpression ")";
		public ParserRule getRule() { return rule; }

		//{HLScelPutAction} "put" "(" featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)* ")" "@"
		//target=XExpression | {HLScelGetAction} "get" "(" fields+=TemplateField ("," fields+=TemplateField)* ")" "@"
		//target=XExpression | {HLScelQueryAction} "query" "(" fields+=TemplateField ("," fields+=TemplateField)* ")" "@"
		//target=XExpression | {HLScelGetPAction} "getp" "(" fields+=TemplateField ("," fields+=TemplateField)* ")" "@"
		//target=XExpression | {HLScelQueryPAction} "queryp" "(" fields+=TemplateField ("," fields+=TemplateField)* ")" "@"
		//target=XExpression | {HLScelExecAction} "exec" "(" arg=XExpression ")" "@" target=XExpression | {HLScelCallAction}
		//"call" "(" arg=XExpression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{HLScelPutAction} "put" "(" featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)* ")" "@"
		//target=XExpression
		public Group getGroup_0() { return cGroup_0; }

		//{HLScelPutAction}
		public Action getHLScelPutActionAction_0_0() { return cHLScelPutActionAction_0_0; }

		//"put"
		public Keyword getPutKeyword_0_1() { return cPutKeyword_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }

		//featureCallArguments+=XExpression
		public Assignment getFeatureCallArgumentsAssignment_0_3() { return cFeatureCallArgumentsAssignment_0_3; }

		//XExpression
		public RuleCall getFeatureCallArgumentsXExpressionParserRuleCall_0_3_0() { return cFeatureCallArgumentsXExpressionParserRuleCall_0_3_0; }

		//("," featureCallArguments+=XExpression)*
		public Group getGroup_0_4() { return cGroup_0_4; }

		//","
		public Keyword getCommaKeyword_0_4_0() { return cCommaKeyword_0_4_0; }

		//featureCallArguments+=XExpression
		public Assignment getFeatureCallArgumentsAssignment_0_4_1() { return cFeatureCallArgumentsAssignment_0_4_1; }

		//XExpression
		public RuleCall getFeatureCallArgumentsXExpressionParserRuleCall_0_4_1_0() { return cFeatureCallArgumentsXExpressionParserRuleCall_0_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_5() { return cRightParenthesisKeyword_0_5; }

		//"@"
		public Keyword getCommercialAtKeyword_0_6() { return cCommercialAtKeyword_0_6; }

		//target=XExpression
		public Assignment getTargetAssignment_0_7() { return cTargetAssignment_0_7; }

		//XExpression
		public RuleCall getTargetXExpressionParserRuleCall_0_7_0() { return cTargetXExpressionParserRuleCall_0_7_0; }

		//{HLScelGetAction} "get" "(" fields+=TemplateField ("," fields+=TemplateField)* ")" "@" target=XExpression
		public Group getGroup_1() { return cGroup_1; }

		//{HLScelGetAction}
		public Action getHLScelGetActionAction_1_0() { return cHLScelGetActionAction_1_0; }

		//"get"
		public Keyword getGetKeyword_1_1() { return cGetKeyword_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }

		//fields+=TemplateField
		public Assignment getFieldsAssignment_1_3() { return cFieldsAssignment_1_3; }

		//TemplateField
		public RuleCall getFieldsTemplateFieldParserRuleCall_1_3_0() { return cFieldsTemplateFieldParserRuleCall_1_3_0; }

		//("," fields+=TemplateField)*
		public Group getGroup_1_4() { return cGroup_1_4; }

		//","
		public Keyword getCommaKeyword_1_4_0() { return cCommaKeyword_1_4_0; }

		//fields+=TemplateField
		public Assignment getFieldsAssignment_1_4_1() { return cFieldsAssignment_1_4_1; }

		//TemplateField
		public RuleCall getFieldsTemplateFieldParserRuleCall_1_4_1_0() { return cFieldsTemplateFieldParserRuleCall_1_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }

		//"@"
		public Keyword getCommercialAtKeyword_1_6() { return cCommercialAtKeyword_1_6; }

		//target=XExpression
		public Assignment getTargetAssignment_1_7() { return cTargetAssignment_1_7; }

		//XExpression
		public RuleCall getTargetXExpressionParserRuleCall_1_7_0() { return cTargetXExpressionParserRuleCall_1_7_0; }

		//{HLScelQueryAction} "query" "(" fields+=TemplateField ("," fields+=TemplateField)* ")" "@" target=XExpression
		public Group getGroup_2() { return cGroup_2; }

		//{HLScelQueryAction}
		public Action getHLScelQueryActionAction_2_0() { return cHLScelQueryActionAction_2_0; }

		//"query"
		public Keyword getQueryKeyword_2_1() { return cQueryKeyword_2_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_2() { return cLeftParenthesisKeyword_2_2; }

		//fields+=TemplateField
		public Assignment getFieldsAssignment_2_3() { return cFieldsAssignment_2_3; }

		//TemplateField
		public RuleCall getFieldsTemplateFieldParserRuleCall_2_3_0() { return cFieldsTemplateFieldParserRuleCall_2_3_0; }

		//("," fields+=TemplateField)*
		public Group getGroup_2_4() { return cGroup_2_4; }

		//","
		public Keyword getCommaKeyword_2_4_0() { return cCommaKeyword_2_4_0; }

		//fields+=TemplateField
		public Assignment getFieldsAssignment_2_4_1() { return cFieldsAssignment_2_4_1; }

		//TemplateField
		public RuleCall getFieldsTemplateFieldParserRuleCall_2_4_1_0() { return cFieldsTemplateFieldParserRuleCall_2_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_5() { return cRightParenthesisKeyword_2_5; }

		//"@"
		public Keyword getCommercialAtKeyword_2_6() { return cCommercialAtKeyword_2_6; }

		//target=XExpression
		public Assignment getTargetAssignment_2_7() { return cTargetAssignment_2_7; }

		//XExpression
		public RuleCall getTargetXExpressionParserRuleCall_2_7_0() { return cTargetXExpressionParserRuleCall_2_7_0; }

		//{HLScelGetPAction} "getp" "(" fields+=TemplateField ("," fields+=TemplateField)* ")" "@" target=XExpression
		public Group getGroup_3() { return cGroup_3; }

		//{HLScelGetPAction}
		public Action getHLScelGetPActionAction_3_0() { return cHLScelGetPActionAction_3_0; }

		//"getp"
		public Keyword getGetpKeyword_3_1() { return cGetpKeyword_3_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_2() { return cLeftParenthesisKeyword_3_2; }

		//fields+=TemplateField
		public Assignment getFieldsAssignment_3_3() { return cFieldsAssignment_3_3; }

		//TemplateField
		public RuleCall getFieldsTemplateFieldParserRuleCall_3_3_0() { return cFieldsTemplateFieldParserRuleCall_3_3_0; }

		//("," fields+=TemplateField)*
		public Group getGroup_3_4() { return cGroup_3_4; }

		//","
		public Keyword getCommaKeyword_3_4_0() { return cCommaKeyword_3_4_0; }

		//fields+=TemplateField
		public Assignment getFieldsAssignment_3_4_1() { return cFieldsAssignment_3_4_1; }

		//TemplateField
		public RuleCall getFieldsTemplateFieldParserRuleCall_3_4_1_0() { return cFieldsTemplateFieldParserRuleCall_3_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_5() { return cRightParenthesisKeyword_3_5; }

		//"@"
		public Keyword getCommercialAtKeyword_3_6() { return cCommercialAtKeyword_3_6; }

		//target=XExpression
		public Assignment getTargetAssignment_3_7() { return cTargetAssignment_3_7; }

		//XExpression
		public RuleCall getTargetXExpressionParserRuleCall_3_7_0() { return cTargetXExpressionParserRuleCall_3_7_0; }

		//{HLScelQueryPAction} "queryp" "(" fields+=TemplateField ("," fields+=TemplateField)* ")" "@" target=XExpression
		public Group getGroup_4() { return cGroup_4; }

		//{HLScelQueryPAction}
		public Action getHLScelQueryPActionAction_4_0() { return cHLScelQueryPActionAction_4_0; }

		//"queryp"
		public Keyword getQuerypKeyword_4_1() { return cQuerypKeyword_4_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_2() { return cLeftParenthesisKeyword_4_2; }

		//fields+=TemplateField
		public Assignment getFieldsAssignment_4_3() { return cFieldsAssignment_4_3; }

		//TemplateField
		public RuleCall getFieldsTemplateFieldParserRuleCall_4_3_0() { return cFieldsTemplateFieldParserRuleCall_4_3_0; }

		//("," fields+=TemplateField)*
		public Group getGroup_4_4() { return cGroup_4_4; }

		//","
		public Keyword getCommaKeyword_4_4_0() { return cCommaKeyword_4_4_0; }

		//fields+=TemplateField
		public Assignment getFieldsAssignment_4_4_1() { return cFieldsAssignment_4_4_1; }

		//TemplateField
		public RuleCall getFieldsTemplateFieldParserRuleCall_4_4_1_0() { return cFieldsTemplateFieldParserRuleCall_4_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_5() { return cRightParenthesisKeyword_4_5; }

		//"@"
		public Keyword getCommercialAtKeyword_4_6() { return cCommercialAtKeyword_4_6; }

		//target=XExpression
		public Assignment getTargetAssignment_4_7() { return cTargetAssignment_4_7; }

		//XExpression
		public RuleCall getTargetXExpressionParserRuleCall_4_7_0() { return cTargetXExpressionParserRuleCall_4_7_0; }

		//{HLScelExecAction} "exec" "(" arg=XExpression ")" "@" target=XExpression
		public Group getGroup_5() { return cGroup_5; }

		//{HLScelExecAction}
		public Action getHLScelExecActionAction_5_0() { return cHLScelExecActionAction_5_0; }

		//"exec"
		public Keyword getExecKeyword_5_1() { return cExecKeyword_5_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_2() { return cLeftParenthesisKeyword_5_2; }

		//arg=XExpression
		public Assignment getArgAssignment_5_3() { return cArgAssignment_5_3; }

		//XExpression
		public RuleCall getArgXExpressionParserRuleCall_5_3_0() { return cArgXExpressionParserRuleCall_5_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_4() { return cRightParenthesisKeyword_5_4; }

		//"@"
		public Keyword getCommercialAtKeyword_5_5() { return cCommercialAtKeyword_5_5; }

		//target=XExpression
		public Assignment getTargetAssignment_5_6() { return cTargetAssignment_5_6; }

		//XExpression
		public RuleCall getTargetXExpressionParserRuleCall_5_6_0() { return cTargetXExpressionParserRuleCall_5_6_0; }

		//{HLScelCallAction} "call" "(" arg=XExpression ")"
		public Group getGroup_6() { return cGroup_6; }

		//{HLScelCallAction}
		public Action getHLScelCallActionAction_6_0() { return cHLScelCallActionAction_6_0; }

		//"call"
		public Keyword getCallKeyword_6_1() { return cCallKeyword_6_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_6_2() { return cLeftParenthesisKeyword_6_2; }

		//arg=XExpression
		public Assignment getArgAssignment_6_3() { return cArgAssignment_6_3; }

		//XExpression
		public RuleCall getArgXExpressionParserRuleCall_6_3_0() { return cArgXExpressionParserRuleCall_6_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6_4() { return cRightParenthesisKeyword_6_4; }
	}

	public class TemplateFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TemplateField");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cFormalTemplateFieldAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cReferenceAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cReferenceXFeatureCallParserRuleCall_1_2_0 = (RuleCall)cReferenceAssignment_1_2.eContents().get(0);
		
		/// * 
		//Variable:
		//	type=JvmTypeReference name=ID	
		//;
		//
		//Statement:
		//	IfThenElseStatement
		//	| WhileStatement
		//	| VariableDeclaration
		//	| Block
		//;
		//
		//Assignment:
		//	target=[Variable] '=' value=XBlockExpression ';'
		//;
		//
		//VariableDeclaration:
		//	variable=Variable ('=' init=XExpression )? ';'
		//;
		//
		//Block: 
		//	'{' statements += Statement '}'
		//;
		//
		//IfThenElseStatement:
		//	'if' '(' condition=XExpression ')' thenBlock=Statement 'else' elseBlock=Statement
		//;
		//
		//WhileStatement:
		//	'while' '(' condition=XExpression ')' body=Statement
		//;
		//
		// * / TemplateField returns xbase::XExpression:
		//	XExpression | {FormalTemplateField} "?" reference=XFeatureCall;
		public ParserRule getRule() { return rule; }

		//XExpression | {FormalTemplateField} "?" reference=XFeatureCall
		public Alternatives getAlternatives() { return cAlternatives; }

		//XExpression
		public RuleCall getXExpressionParserRuleCall_0() { return cXExpressionParserRuleCall_0; }

		//{FormalTemplateField} "?" reference=XFeatureCall
		public Group getGroup_1() { return cGroup_1; }

		//{FormalTemplateField}
		public Action getFormalTemplateFieldAction_1_0() { return cFormalTemplateFieldAction_1_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_1() { return cQuestionMarkKeyword_1_1; }

		//reference=XFeatureCall
		public Assignment getReferenceAssignment_1_2() { return cReferenceAssignment_1_2; }

		//XFeatureCall
		public RuleCall getReferenceXFeatureCallParserRuleCall_1_2_0() { return cReferenceXFeatureCallParserRuleCall_1_2_0; }
	}
	
	
	private ModelElements pModel;
	private ModelElementElements pModelElement;
	private NodeDeclarationElements pNodeDeclaration;
	private ProcessDeclarationElements pProcessDeclaration;
	private XPrimaryExpressionElements pXPrimaryExpression;
	private HLScelPredicateElements pHLScelPredicate;
	private XLiteralElements pXLiteral;
	private SelfLiteralElements pSelfLiteral;
	private HLScelActionElements pHLScelAction;
	private TemplateFieldElements pTemplateField;
	
	private final Grammar grammar;

	private XbaseGrammarAccess gaXbase;

	@Inject
	public HLScelGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.cmg.resp.xtext.hlscel.HLScel".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//Model:
	//	elements+=ModelElement*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//ModelElement:
	//	ProcessDeclaration | NodeDeclaration;
	public ModelElementElements getModelElementAccess() {
		return (pModelElement != null) ? pModelElement : (pModelElement = new ModelElementElements());
	}
	
	public ParserRule getModelElementRule() {
		return getModelElementAccess().getRule();
	}

	//NodeDeclaration:
	//	"node" name=ID "(" (args+=FullJvmFormalParameter ("," args+=FullJvmFormalParameter)*)? ")" "{" "}";
	public NodeDeclarationElements getNodeDeclarationAccess() {
		return (pNodeDeclaration != null) ? pNodeDeclaration : (pNodeDeclaration = new NodeDeclarationElements());
	}
	
	public ParserRule getNodeDeclarationRule() {
		return getNodeDeclarationAccess().getRule();
	}

	//ProcessDeclaration:
	//	"process" name=ID "(" (args+=FullJvmFormalParameter ("," args+=FullJvmFormalParameter)*)? ")" body=XBlockExpression;
	public ProcessDeclarationElements getProcessDeclarationAccess() {
		return (pProcessDeclaration != null) ? pProcessDeclaration : (pProcessDeclaration = new ProcessDeclarationElements());
	}
	
	public ParserRule getProcessDeclarationRule() {
		return getProcessDeclarationAccess().getRule();
	}

	//XPrimaryExpression returns xbase::XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression | XForLoopExpression
	//	| XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression | XTryCatchFinallyExpression |
	//	XParenthesizedExpression | HLScelAction | HLScelPredicate;
	public XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return (pXPrimaryExpression != null) ? pXPrimaryExpression : (pXPrimaryExpression = new XPrimaryExpressionElements());
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//HLScelPredicate:
	//	"[|" exp=XExpression "|]";
	public HLScelPredicateElements getHLScelPredicateAccess() {
		return (pHLScelPredicate != null) ? pHLScelPredicate : (pHLScelPredicate = new HLScelPredicateElements());
	}
	
	public ParserRule getHLScelPredicateRule() {
		return getHLScelPredicateAccess().getRule();
	}

	//XLiteral returns xbase::XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral |
	//	SelfLiteral;
	public XLiteralElements getXLiteralAccess() {
		return (pXLiteral != null) ? pXLiteral : (pXLiteral = new XLiteralElements());
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//SelfLiteral returns xbase::XListLiteral:
	//	{SelfLiteral} "self";
	public SelfLiteralElements getSelfLiteralAccess() {
		return (pSelfLiteral != null) ? pSelfLiteral : (pSelfLiteral = new SelfLiteralElements());
	}
	
	public ParserRule getSelfLiteralRule() {
		return getSelfLiteralAccess().getRule();
	}

	//HLScelAction returns xbase::XExpression:
	//	{HLScelPutAction} "put" "(" featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)* ")" "@"
	//	target=XExpression | {HLScelGetAction} "get" "(" fields+=TemplateField ("," fields+=TemplateField)* ")" "@"
	//	target=XExpression | {HLScelQueryAction} "query" "(" fields+=TemplateField ("," fields+=TemplateField)* ")" "@"
	//	target=XExpression | {HLScelGetPAction} "getp" "(" fields+=TemplateField ("," fields+=TemplateField)* ")" "@"
	//	target=XExpression | {HLScelQueryPAction} "queryp" "(" fields+=TemplateField ("," fields+=TemplateField)* ")" "@"
	//	target=XExpression | {HLScelExecAction} "exec" "(" arg=XExpression ")" "@" target=XExpression | {HLScelCallAction}
	//	"call" "(" arg=XExpression ")";
	public HLScelActionElements getHLScelActionAccess() {
		return (pHLScelAction != null) ? pHLScelAction : (pHLScelAction = new HLScelActionElements());
	}
	
	public ParserRule getHLScelActionRule() {
		return getHLScelActionAccess().getRule();
	}

	/// * 
	//Variable:
	//	type=JvmTypeReference name=ID	
	//;
	//
	//Statement:
	//	IfThenElseStatement
	//	| WhileStatement
	//	| VariableDeclaration
	//	| Block
	//;
	//
	//Assignment:
	//	target=[Variable] '=' value=XBlockExpression ';'
	//;
	//
	//VariableDeclaration:
	//	variable=Variable ('=' init=XExpression )? ';'
	//;
	//
	//Block: 
	//	'{' statements += Statement '}'
	//;
	//
	//IfThenElseStatement:
	//	'if' '(' condition=XExpression ')' thenBlock=Statement 'else' elseBlock=Statement
	//;
	//
	//WhileStatement:
	//	'while' '(' condition=XExpression ')' body=Statement
	//;
	//
	// * / TemplateField returns xbase::XExpression:
	//	XExpression | {FormalTemplateField} "?" reference=XFeatureCall;
	public TemplateFieldElements getTemplateFieldAccess() {
		return (pTemplateField != null) ? pTemplateField : (pTemplateField = new TemplateFieldElements());
	}
	
	public ParserRule getTemplateFieldRule() {
		return getTemplateFieldAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=" | "*=" | "/=" | "%=" | "<" "<" "=" | ">" ">"? ">=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<" "=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<" | "=>") | "<>" | "?:";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation returns XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> ("(" declaredParam=JvmFormalParameter ":") switch=XExpression ")" | =>
	//	(declaredParam=JvmFormalParameter ":")? switch=XExpression) "{" cases+=XCasePart* ("default" ":" default=XExpression)?
	//	"}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ("case" case=XExpression)? (":" then=XExpression | ",");
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	=> ({XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":") forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XBasicForLoopExpression returns XExpression:
	//	{XBasicForLoopExpression} "for" "(" (initExpressions+=XExpressionOrVarDeclaration (","
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ";" expression=XExpression? ";" (updateExpressions+=XExpression (","
	//	updateExpressions+=XExpression)*)? ")" eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionOrVarDeclaration ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? (=>
	//	explicitConstructorCall?="(" (arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression returns XExpression:
	//	=> ({XSynchronizedExpression} "synchronized" "(") param=XExpression ")" expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbase.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbase.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXbase.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?="*" | memberName=ValidID) | importedType=[JvmDeclaredType|QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXbase.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(ValidID ".")+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXbase.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
