"; -*- Mode: Lisp -*-"
(SYSTEM:INIT-FASL :VERSION 39)
(SETQ SYSTEM:*SOURCE* #P"/Users/loreti/Documents/Workspaces/ECLIPSE/PROJECTS/SCEL/LIB/abcl-src-1.1.1/src/org/armedbear/lisp/find.lisp")
(SETQ SYSTEM::*FASL-UNINTERNED-SYMBOLS* #(#:WHOLE-253191 #:ENVIRONMENT-253192 #:WHOLE-253239 #:ENVIRONMENT-253240 #:WHOLE-253294 #:ENVIRONMENT-253295 #:WHOLE-253320 #:ENVIRONMENT-253321 #:WHOLE-253375 #:ENVIRONMENT-253376 #:WHOLE-253401 #:ENVIRONMENT-253402 #:WHOLE-253426 #:ENVIRONMENT-253427 #:WHOLE-253451 #:ENVIRONMENT-253452 #:WHOLE-253519 #:ENVIRONMENT-253520 #:WHOLE-253545 #:ENVIRONMENT-253546 #:WHOLE-253571 #:ENVIRONMENT-253572 #:WHOLE-253596 #:ENVIRONMENT-253597 #:WHOLE-253621 #:ENVIRONMENT-253622 #:WHOLE-253645 #:ENVIRONMENT-253646 #:WHOLE-253858 #:ENVIRONMENT-253859 #:WHOLE-253882 #:ENVIRONMENT-253883 #:WHOLE-254033 #:ENVIRONMENT-254034 #:WHOLE-254057 #:ENVIRONMENT-254058 #:WHOLE-254208 #:ENVIRONMENT-254209 #:WHOLE-254232 #:ENVIRONMENT-254233 #:WHOLE-254443 #:ENVIRONMENT-254444 #:WHOLE-254467 #:ENVIRONMENT-254468 #:WHOLE-254615 #:ENVIRONMENT-254616 #:WHOLE-254639 #:ENVIRONMENT-254640))
(SETQ SYSTEM:*FASL-LOADER* (SYSTEM::MAKE-FASL-CLASS-LOADER "org.armedbear.lisp.find"))
(SYSTEM:%IN-PACKAGE "SYSTEM")
(REQUIRE "EXTENSIBLE-SEQUENCES-BASE")
(FSET 'VECTOR-LOCATER-MACRO (MAKE-MACRO 'VECTOR-LOCATER-MACRO (GET-FASL-FUNCTION 
*FASL-LOADER* 0)) 1669 '(SEQUENCE BODY-FORM RETURN-TYPE))
(FSET 'LOCATER-TEST-NOT (MAKE-MACRO 'LOCATER-TEST-NOT (GET-FASL-FUNCTION *FASL-LOADER* 
1)) 2229 '(ITEM SEQUENCE SEQ-TYPE RETURN-TYPE))
(FSET 'VECTOR-LOCATER (MAKE-MACRO 'VECTOR-LOCATER (GET-FASL-FUNCTION *FASL-LOADER* 
2)) 2740 '(ITEM SEQUENCE RETURN-TYPE))
(FSET 'LOCATER-IF-TEST (MAKE-MACRO 'LOCATER-IF-TEST (GET-FASL-FUNCTION *FASL-LOADER* 
3)) 2908 '(TEST SEQUENCE SEQ-TYPE RETURN-TYPE SENSE))
(FSET 'VECTOR-LOCATER-IF-MACRO (MAKE-MACRO 'VECTOR-LOCATER-IF-MACRO (GET-FASL-FUNCTION 
*FASL-LOADER* 4)) 3406 '(TEST SEQUENCE RETURN-TYPE SENSE))
(FSET 'VECTOR-LOCATER-IF (MAKE-MACRO 'VECTOR-LOCATER-IF (GET-FASL-FUNCTION *FASL-LOADER* 
5)) 3595 '(TEST SEQUENCE RETURN-TYPE))
(FSET 'VECTOR-LOCATER-IF-NOT (MAKE-MACRO 'VECTOR-LOCATER-IF-NOT (GET-FASL-FUNCTION 
*FASL-LOADER* 6)) 3713 '(TEST SEQUENCE RETURN-TYPE))
(FSET 'LIST-LOCATER-MACRO (MAKE-MACRO 'LIST-LOCATER-MACRO (GET-FASL-FUNCTION *FASL-LOADER* 
7)) 3837 '(SEQUENCE BODY-FORM RETURN-TYPE))
(FSET 'LIST-LOCATER (MAKE-MACRO 'LIST-LOCATER (GET-FASL-FUNCTION *FASL-LOADER* 8)) 
4730 '(ITEM SEQUENCE RETURN-TYPE))
(FSET 'LIST-LOCATER-IF-MACRO (MAKE-MACRO 'LIST-LOCATER-IF-MACRO (GET-FASL-FUNCTION 
*FASL-LOADER* 9)) 4902 '(TEST SEQUENCE RETURN-TYPE SENSE))
(FSET 'LIST-LOCATER-IF (MAKE-MACRO 'LIST-LOCATER-IF (GET-FASL-FUNCTION *FASL-LOADER* 
10)) 5095 '(TEST SEQUENCE RETURN-TYPE))
(FSET 'LIST-LOCATER-IF-NOT (MAKE-MACRO 'LIST-LOCATER-IF-NOT (GET-FASL-FUNCTION *FASL-LOADER* 
11)) 5209 '(TEST SEQUENCE RETURN-TYPE))
(FSET 'VECTOR-POSITION (MAKE-MACRO 'VECTOR-POSITION (GET-FASL-FUNCTION *FASL-LOADER* 
12)) 5329 '(ITEM SEQUENCE))
(FSET 'LIST-POSITION (MAKE-MACRO 'LIST-POSITION (GET-FASL-FUNCTION *FASL-LOADER* 
13)) 5419 '(ITEM SEQUENCE))
(FSET 'POSITION (GET-FASL-FUNCTION *FASL-LOADER* 14) 5505 '(ITEM SEQUENCE &REST ARGS 
&KEY FROM-END (TEST (FUNCTION EQL)) TEST-NOT (START 0) END KEY) NIL)
(FSET 'LIST-POSITION* (GET-FASL-FUNCTION *FASL-LOADER* 15) 5841 '(ITEM SEQUENCE FROM-END 
TEST TEST-NOT START END KEY) NIL)
(FSET 'VECTOR-POSITION* (GET-FASL-FUNCTION *FASL-LOADER* 16) 6059 '(ITEM SEQUENCE 
FROM-END TEST TEST-NOT START END KEY) NIL)
(FSET 'VECTOR-POSITION-IF (MAKE-MACRO 'VECTOR-POSITION-IF (GET-FASL-FUNCTION *FASL-LOADER* 
17)) 6281 '(TEST SEQUENCE))
(FSET 'LIST-POSITION-IF (MAKE-MACRO 'LIST-POSITION-IF (GET-FASL-FUNCTION *FASL-LOADER* 
18)) 6377 '(TEST SEQUENCE))
(FSET 'POSITION-IF (GET-FASL-FUNCTION *FASL-LOADER* 19) 6469 '(TEST SEQUENCE &REST 
ARGS &KEY FROM-END (START 0) KEY END) NIL)
(FSET 'VECTOR-POSITION-IF-NOT (MAKE-MACRO 'VECTOR-POSITION-IF-NOT (GET-FASL-FUNCTION 
*FASL-LOADER* 20)) 6830 '(TEST SEQUENCE))
(FSET 'LIST-POSITION-IF-NOT (MAKE-MACRO 'LIST-POSITION-IF-NOT (GET-FASL-FUNCTION 
*FASL-LOADER* 21)) 6934 '(TEST SEQUENCE))
(FSET 'POSITION-IF-NOT (GET-FASL-FUNCTION *FASL-LOADER* 22) 7034 '(TEST SEQUENCE 
&REST ARGS &KEY FROM-END (START 0) KEY END) NIL)
(FSET 'VECTOR-FIND (MAKE-MACRO 'VECTOR-FIND (GET-FASL-FUNCTION *FASL-LOADER* 23)) 
7411 '(ITEM SEQUENCE))
(FSET 'LIST-FIND (MAKE-MACRO 'LIST-FIND (GET-FASL-FUNCTION *FASL-LOADER* 24)) 7496 
'(ITEM SEQUENCE))
(FSET 'LIST-FIND* (GET-FASL-FUNCTION *FASL-LOADER* 25) 7577 '(ITEM SEQUENCE FROM-END 
TEST TEST-NOT START END KEY) NIL)
(FSET 'VECTOR-FIND* (GET-FASL-FUNCTION *FASL-LOADER* 26) 7765 '(ITEM SEQUENCE FROM-END 
TEST TEST-NOT START END KEY) NIL)
(FSET 'FIND (GET-FASL-FUNCTION *FASL-LOADER* 27) 7957 '(ITEM SEQUENCE &REST ARGS 
&KEY FROM-END (TEST (FUNCTION EQL)) TEST-NOT (START 0) END KEY) NIL)
(FSET 'VECTOR-FIND-IF (MAKE-MACRO 'VECTOR-FIND-IF (GET-FASL-FUNCTION *FASL-LOADER* 
28)) 8346 '(TEST SEQUENCE))
(FSET 'LIST-FIND-IF (MAKE-MACRO 'LIST-FIND-IF (GET-FASL-FUNCTION *FASL-LOADER* 29)) 
8437 '(TEST SEQUENCE))
(FSET 'FIND-IF (GET-FASL-FUNCTION *FASL-LOADER* 30) 8524 '(TEST SEQUENCE &REST ARGS 
&KEY FROM-END (START 0) END KEY) NIL)
(FSET 'VECTOR-FIND-IF-NOT (MAKE-MACRO 'VECTOR-FIND-IF-NOT (GET-FASL-FUNCTION *FASL-LOADER* 
31)) 8837 '(TEST SEQUENCE))
(FSET 'LIST-FIND-IF-NOT (MAKE-MACRO 'LIST-FIND-IF-NOT (GET-FASL-FUNCTION *FASL-LOADER* 
32)) 8936 '(TEST SEQUENCE))
(FSET 'FIND-IF-NOT (GET-FASL-FUNCTION *FASL-LOADER* 33) 9031 '(TEST SEQUENCE &REST 
ARGS &KEY FROM-END (START 0) END KEY) NIL)
