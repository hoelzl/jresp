"; -*- Mode: Lisp -*-"
(SYSTEM:INIT-FASL :VERSION 39)
(SETQ SYSTEM:*SOURCE* #P"/Users/loreti/Documents/Workspaces/ECLIPSE/PROJECTS/SCEL/LIB/abcl-src-1.1.1/src/org/armedbear/lisp/late-setf.lisp")
(SETQ SYSTEM::*FASL-UNINTERNED-SYMBOLS* #(#:WHOLE-327838 #:ENVIRONMENT-327839 #:WHOLE-327875 #:ENV-327876 #:WHOLE-327911 #:ENV-327912 #:WHOLE-327916 #:ENV-327917 #:WHOLE-327921 #:ENV-327922))
(SETQ SYSTEM:*FASL-LOADER* (SYSTEM::MAKE-FASL-CLASS-LOADER "org.armedbear.lisp.late_setf"))
(SYSTEM:%IN-PACKAGE "SYSTEM")
(FSET 'DEFINE-SETF-EXPANDER (MAKE-MACRO 'DEFINE-SETF-EXPANDER (GET-FASL-FUNCTION 
*FASL-LOADER* 0)) 1665 '(ACCESS-FN LAMBDA-LIST &BODY BODY))
(PUT 'VALUES 'SETF-EXPANDER (FUNCTION (LAMBDA (#2? #3?) (BLOCK VALUES (LET* ((ENV 
#3?) (PLACES (CDR #2?))) (BLOCK VALUES (LET ((SETTERS NIL) (GETTERS NIL) (ALL-DUMMIES 
NIL) (ALL-VALS NIL) (NEWVALS NIL)) (DOLIST (PLACE PLACES) (MULTIPLE-VALUE-BIND (DUMMIES 
VALS NEWVAL SETTER GETTER) (GET-SETF-EXPANSION PLACE ENV) (PROGN (SETQ ALL-DUMMIES 
(APPEND ALL-DUMMIES DUMMIES (CDR NEWVAL))) (SETQ ALL-VALS (APPEND ALL-VALS VALS (MAPCAR 
(CONSTANTLY NIL) (CDR NEWVAL)))) (SETQ NEWVALS (APPEND NEWVALS (LIST (CAR NEWVAL))))) 
(SETQ SETTERS (CONS SETTER SETTERS)) (SETQ GETTERS (CONS GETTER GETTERS)))) (VALUES 
ALL-DUMMIES ALL-VALS NEWVALS (BACKQ-CONS 'VALUES (REVERSE SETTERS)) (BACKQ-CONS 'VALUES 
(REVERSE GETTERS))))))))))
(FSET 'MAKE-GENSYM-LIST (GET-FASL-FUNCTION *FASL-LOADER* 1) 3003 '(N) NIL)
(PUT 'GETF 'SETF-EXPANDER (FUNCTION (LAMBDA (#4? #5?) (BLOCK GETF (LET* ((ENV #5?)) 
(UNLESS (<= 2 (LENGTH (CDR #4?)) 3) (ARG-COUNT-ERROR 'DEFINE-SETF-EXPANDER 'GETF 
(CDR #4?) '(PLACE PROP &OPTIONAL DEFAULT &ENVIRONMENT ENV) 2 3)) (LET* ((PLACE (CAR 
(CDR #4?))) (PROP (CAR (CDR (CDR #4?)))) (DEFAULT (IF (NOT (NULL (CDR (CDR (CDR #4?))))) 
(CAR (CDR (CDR (CDR #4?)))) NIL))) (BLOCK GETF (MULTIPLE-VALUE-BIND (TEMPS VALUES 
STORES SET GET) (GET-SETF-EXPANSION PLACE ENV) (LET ((NEWVAL (GENSYM)) (PTEMP (GENSYM)) 
(DEF-TEMP (IF DEFAULT (GENSYM)))) (VALUES (BACKQ-APPEND TEMPS (BACKQ-CONS PTEMP (IF 
DEFAULT (BACKQ-LIST DEF-TEMP)))) (BACKQ-APPEND VALUES (BACKQ-CONS PROP (IF DEFAULT 
(BACKQ-LIST DEFAULT)))) (BACKQ-LIST NEWVAL) (BACKQ-LIST 'LET (BACKQ-LIST (BACKQ-LIST 
(CAR STORES) (BACKQ-LIST '%PUTF GET PTEMP NEWVAL))) SET NEWVAL) (BACKQ-LIST* 'GETF 
GET PTEMP (IF DEFAULT (BACKQ-LIST DEF-TEMP)))))))))))))
(PUT 'APPLY 'SETF-EXPANDER (FUNCTION (LAMBDA (#6? #7?) (DECLARE (IGNORE #7?)) (BLOCK 
APPLY (LET* ((FUNCTIONOID (CAR (CDR #6?))) (ARGS (CDR (CDR #6?)))) (BLOCK APPLY (LET 
((FUNCTION (SECOND FUNCTIONOID)) (NEW-VAR (GENSYM)) (VARS (MAKE-GENSYM-LIST (LENGTH 
ARGS)))) (VALUES VARS ARGS (LIST NEW-VAR) (BACKQ-LIST* 'APPLY (BACKQ-LIST 'FUNCTION 
(BACKQ-LIST 'SETF FUNCTION)) NEW-VAR VARS) (BACKQ-LIST* 'APPLY (BACKQ-LIST 'FUNCTION 
FUNCTION) VARS)))))))))
(PUT 'THE 'SETF-EXPANDER (FUNCTION (LAMBDA (#8? #9?) (BLOCK THE (LET* ((ENV #9?)) 
(UNLESS (<= 2 (LENGTH (CDR #8?)) 2) (ARG-COUNT-ERROR 'DEFINE-SETF-EXPANDER 'THE (CDR 
#8?) '(TYPE PLACE &ENVIRONMENT ENV) 2 2)) (LET* ((TYPE (CAR (CDR #8?))) (PLACE (CAR 
(CDR (CDR #8?))))) (BLOCK THE (MULTIPLE-VALUE-BIND (TEMPS SUBFORMS STORE-VARS SETTER 
GETTER) (GET-SETF-EXPANSION PLACE ENV) (VALUES TEMPS SUBFORMS STORE-VARS (BACKQ-LIST 
'MULTIPLE-VALUE-BIND STORE-VARS (BACKQ-LIST 'THE TYPE (BACKQ-CONS 'VALUES STORE-VARS)) 
SETTER) (BACKQ-LIST 'THE TYPE GETTER))))))))))
(FSET '(SETF MACRO-FUNCTION) (GET-FASL-FUNCTION *FASL-LOADER* 2) 4348 '(NEW-FUNCTION 
SYMBOL &OPTIONAL ENVIRONMENT) NIL)
