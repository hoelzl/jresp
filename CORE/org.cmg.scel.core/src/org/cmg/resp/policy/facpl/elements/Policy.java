package org.cmg.resp.policy.facpl.elements;


import java.lang.reflect.Method;
import java.util.LinkedList;
import java.util.List;

import org.cmg.resp.policy.AuthorizationDecision;
import org.cmg.resp.policy.AuthorizationRequest;
import org.cmg.resp.policy.AuthorizationResponse;
import org.cmg.resp.policy.facpl.FulfilledObligation;
import org.cmg.resp.policy.facpl.MatchDecision;
import org.cmg.resp.policy.facpl.RuleEffect;

public abstract class Policy extends PAFElement{

	private LinkedList<Rule> rules;

	
	protected void addRule(Rule rule){
		if (this.rules == null){
			this.rules = new LinkedList<Rule>();
		}
		this.rules.add(rule);
	}
	
	
	@Override
	public AuthorizationResponse evaluate(AuthorizationRequest request) {
		
		AuthorizationResponse dr = new AuthorizationResponse();
		try{
			
			//Target evaluation
			MatchDecision match_target = getTargetDecision(request);
			
			switch (match_target) {
			case NO_MATCH:
				dr.setDecision(AuthorizationDecision.NOT_APPLICABLE);
				return dr;

			case MATCH:
				Class<?> params[] = new Class[2];
				params[0] = List.class;
				params[1] = AuthorizationRequest.class;
						
				Method eval = algCombining.getDeclaredMethod("evaluate",params);
				Object alg = algCombining.newInstance();
				
				dr = (AuthorizationResponse) eval.invoke(alg, this.rules, request);
					
				LinkedList<FulfilledObligation> listObl = null;
				if (dr.getDecision().equals(AuthorizationDecision.PERMIT)){
					listObl = this.evaluateObl(RuleEffect.PERMIT,request);
				}else if(dr.getDecision().equals(AuthorizationDecision.DENY)){
					listObl = this.evaluateObl(RuleEffect.DENY,request);
				}
				//addObligation to decision result (Policy's Obligations)
				if (listObl != null){
					dr.addObligations(listObl);
				}		
				return dr;

			case INDETERMINATE:
				dr.setDecision(AuthorizationDecision.INDETERMINATE);
				return dr;
			default:
				throw new Exception();
			}	
		} catch (Throwable e) {
			//catch exception generated by reflection
			return new AuthorizationResponse(AuthorizationDecision.INDETERMINATE,null); 
		}
	}

}
