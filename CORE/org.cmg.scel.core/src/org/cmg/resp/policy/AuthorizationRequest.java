/**
 * Copyright (c) 2014 Concurrency and Mobility Group.
 * Universit√† di Firenze
 *	
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *      Michele Loreti
 */
package org.cmg.resp.policy;

import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;

import org.cmg.resp.exceptions.MissingAttributeException;
import org.cmg.resp.knowledge.Attribute;
import org.cmg.resp.topology.Target;

/**
 * @author Michele Loreti
 * @author Andrea Margheri
 * 
 */
public class AuthorizationRequest {

	protected ActionID action;

	protected Object actionArgument;

	protected Target destinationSubject;

	/**
	 * The attribute generated by the attribute collector
	 */
	protected Map<String, Attribute> interfaze;

	/**
	 * The value of the attributes organized under the category/identifier name
	 */
	private HashMap<StructName, Object> attributes;

	public AuthorizationRequest(ActionID action, Object actionArgument,
			Target destSubject, Map<String, Attribute> interfaze) {
		this.action = action;
		this.actionArgument = actionArgument;
		this.destinationSubject = destSubject;
		this.interfaze = interfaze;
		/*
		 * Generate the correct representation for attributes by using the structured-names
		 */
		this.attributes.put(new StructName("action","action-id"), action);
		this.attributes.put(new StructName("action","action-target"), destinationSubject);
		this.attributes.put(new StructName("atcion","item"), actionArgument);
		for(Entry<String, Attribute> i: interfaze.entrySet()){
			//add all the attributes given as input as the attribute generated by the AttributeCollector
			this.attributes.put(new StructName("object",i.getKey()),i.getValue());
		}
	}

	
	/**
	 * @return the action identifier
	 */
	public ActionID getAction() {
		return action;
	}

	/**
	 * @return the argument of the action
	 */
	public Object getActionArgument() {
		return actionArgument;
	}

	/**
	 * @return The destination components of the action 
	 */
	public Target getDestinationSubject() {
		return destinationSubject;
	}

	/**
	 * @return the map of attribute values given by the interface of the component where policy is invoked
	 */
	public Map<String, Attribute> getInterface() {
		return interfaze;
	}

	/**
	 * Given a structured name returns the value of the corresponding attribute
	 * @param Structured name
	 * @return Object attribute value
	 */
	public Object getAttributeValue(StructName name) throws MissingAttributeException{
		/*
		 * ########################
		 * PER PROVARE!!!!!!
		 */
		if (name.getCategory().equals("system") && name.getIDAttribute().equals("id")){
			return "VALUE";
		}
		/*
		 * ########################
		 */
		for(Entry<StructName, Object> i : this.attributes.entrySet()){
			if (i.getKey().equals(name)){
				return i.getValue();
			}
		}
		throw new MissingAttributeException();
	}

}
